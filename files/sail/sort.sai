COMMENT
			*****  SORT  *****

			by  Pentti Kanerva
		    IMSSS, Stanford University
			       1972


0. Table of Contents
   ----- -- --------
1. Pitch
2. Abstracts of Procedures
3. Examples
4. SAIL Procedures


1. Pitch
   -----

     <PENTTI>SORT  is a collection of SAIL procedures for sorting
     INTEGER, REAL and STRING ARRAYs.  The procedures can also be
     used for entering data into an array that is to have one entry 
     for each distinct data item, e.g., for compiling a vocabulary.

     SPEED and SAFETY have been important design objectives.  For
     speed, binary search and BLT machine instruction are used.
     Sorting the array in place contributes to safety.  No tempo-
     rary storage nor recursion is used.  The very efficient QUICK-
     SORT, for instance, can require  4n  words of push-down stack
     to sort an  n-element array.
     
     GENERALITY.  The sorting criterion (ascending, descending,
     etc.) is specified by the user as a Boolean procedure that is
     passed to the sorter as a parameter.  Both direct and indirect
     sorting of arrays is possible.  In indirect sorting an array
     of indeces or pointers is sorted.

     RESTRICTION.  Only one-dimensional arrays are physically sort-
     ed.  However, indirect sorting of multi-dimensional arrays and 
     parallel one-dimensional arrays is possible by using a one-
     dimensional pointer array and appropriate index computation.


2. Abstracts
   ---------
     In sorting, you call INTSORT, REALSORT, and/or STRSORT only.
     In collecting data into an array, you must call INSERTINDEX 
     and INT/REAL/STRROTATE.


INSERTINDEX ( LowerBound, UpperBound, OrderPredicate )
-     -	      -    -      -    -      -    -
	Finds (and returns) the smallest index  II,  LB leq II leq UB,
	  such that by inserting  A[LB]  between  A[II]  and  A[II+1]
	  in the sorted array segment  A[LB+1:UB]  gives  A[LB:UB]
	  that is in sort according to the criterion (i.e., BOOLEAN
	  PROCEDURE)  OP.

INTROTATE ( IntegerArray, LowerBound, InsertIndex )
REALROTATE ( RealArray, LB, II )
STRROTATE ( StringArray, LB, II )

	Array "Shufflers":  IA[LB:II] _ IA[LB+1:II] & IA[LB], i.e.,
	  rotates the array segment  IA[LB:II]  "left" by one element.
	  IA[LB]  wraps around to become  IA[II].
	Likewise for REALROTATE and STRROTATE.


*******								*******
*								      *
*   INTSORT ( IntegerArray, LowerBound, UpperBound, OrderPredicate )  *
*   REALSORT ( RealArray, LB, UB, OP )				      *
*   STRSORT ( StringArray, LB, UB, OP )				      *
*								      *
*******  							*******
	The Array Sorters.
	The array segment  IA[LB:UB]  is sorted according to  OP,  
	   i.e.,  OP(i,j)  will be true for all indeces  i, j 
	   such that  LB leq i < j leq UB .


NOTES:
     1.  The order predicate  OP  is passed as an argument to the
     sorting procedures, together with the array  A  to be sorted.
     The arguments  i  and  j  of  OP  are NOT elements of  A  but
     indeces to  A.   A  in turn can be a data array or a pointer
     array.  Computing the relative order of the elements corres-
     ponding to  i  and  j  is the user's choice.  This makes it
     possible to do both direct and indirect sorting.

     2.  In declaring the procedure  OP,  it need not be SIMPLE
     but its arguments must be by REFERENCE, e.g.,

	BOOLEAN SIMPLE PROCEDURE  ok (REFERENCE INTEGER i,j).

     3.  The array  IA, RA,  or  SA,  which is passed as an argu-
     ment to the sorting routines, is never referenced for infor-
     mation by the routines of this file (except, of course, via 
     the parametric procedure  OP).  Its only function is to get
     shuffled by the appropriate  ROTATE  routine.

     4.  Further speed can be attained by writing the compare
     routine right into the  INSERTINDEX  procedure.


ALPHABETIZED ( String1, String2 )

	A fairly fast ASCII string compare routine.  
	True  iff  S1, S2  are in "alphabetical" order (negative if
	  S1  comes before  S1,  positive if they are identical).
	(see COMMENT at beginning of "ALPHABETIZED").


3. Examples
   --------

NOTE 1:  Whenever an  INTEGER ARRAY  is implied in these examples,
	 REAL ARRAY  and  REALSORT  can be substituted for it.

NOTE 2:  The ' !' stands for the semicolon (we are inside a comment)!!


Example 1.	Sort an integer array (or real array)  A[0:9999]  in 
------- 	ascending sequence.

	.
	.
	INTEGER ARRAY  A[0:9999] !  COMMENT  Your array declaration !
	.
	.
	.
	REQUIRE "<PENTTI>SORT" SOURCE!FILE !   COMMENT  To compile
			the sorting routines into your program !

	BOOLEAN SIMPLE PROCEDURE  lessOrEqual (REFERENCE INTEGER i,j) !
	RETURN (A[i] LEQ A[j]) !	
	COMMENT  This is the sorting criterion furnished by the user 
		and used by  INTSORT.  Its two integer arguments must 
		be by REFERENCE !
	.
	.
	.
	intSort (A, 0, 9999, lessOrEqual) !   COMMENT  Do the sort !	
	.
	.



Example 2.	Alphabetize string array SA[1:1000] within limits [m:n].
-------
	.
	.	
	INTEGER  m, n !
	STRING ARRAY  SA [1:1000] !
	.
	.
	.
	REQUIRE "<PENTTI>SORT" SOURCE!FILE !

	BOOLEAN SIMPLE PROCEDURE  orderOK ( REFERENCE INTEGER i, j ) !
	RETURN ( alphabetized (SA[i], SA[j]) ) !
	COMMENT  Sorting criterion provided by the user.  The Boolean
		procedure  ALPHABETIZES  comes with the file "SORT" !
	.	
	.
	.
	strSort (SA, m, n, orderOK) !   COMMENT  Here we do the sort !
	.
	.

Example 3.   INDIRECT SORTING.  Alphabetize string array  S[1:n]  by
-------	     sorting a pointer array  P[1:n].   S[P[i]]  will be the  
	ith  sorted string  (n  must be either constant or a variable 
	of an outer block).

	Note:  This is just an exsample of indirect sort.  Use direct 
	   sorting for arrays that come by themselves.

	.
	.
	INTEGER  i !
	INTEGER ARRAY  P[1:n] !   COMMENT  Pointer array !
	STRING ARRAY  S[1:n] !
	.
	.
	.
	REQUIRE "<PENTTI>SORT" SOURCE!FILE !

	BOOLEAN SIMPLE PROCEDURE  orderOK ( REFERENCE INTEGER i, j ) !
	RETURN ( alphabetized (S[P[i]], S[P[j]]) ) !
	.
	.
	.
	FOR i _ 1 STEP 1 UNTIL n  DO  P[i] _ i !
	COMMENT  Initializes the pointer array !

	intSort (P, 1, n, orderOK) !	COMMENT  Does the sorting,
		but notice, it is an "INT"sort of  P !
	.
	.	

	;

COMMENT


4. SAIL Procedures
   ---- ----------
;



INTEGER SIMPLE PROCEDURE  insertIndex ( INTEGER i, last;
				 BOOLEAN SIMPLE PROCEDURE inOrder ) ;
COMMENT  		  -----------
	INSERTINDEX  II  is the first proper place for  A[i]  in the
	  sorted array segment  A[i+1:LAST],  such that

		A[i+1:II] & A[i] & A[II+1:last]

	  will be in sort.
	For  I geq LAST,  INSERTINDEX  has the value  I.
|
	Method:  Binary search.
	;

BEGIN "insertIndex" INTEGER a, b, c;

    a _ i;  c _ last + 1;	COMMENT  Bounds for search;

    COMMENT  Check mid point between bounds;

    WHILE c - a > 1  DO 
     IF inOrder (i, b _ (a + c) ASH -1)  THEN c _ b  ELSE a _ b
    ;

    RETURN (a);

END "insertIndex"
;

COMMENT  *******  INTEGER ARRAY SORTING  *******
		************************;



SIMPLE PROCEDURE	intRotate ( INTEGER ARRAY A; INTEGER i, j );
COMMENT			---------
	Speedy Integer Array Shuffler.
	Move first element of A[i:j] to last, and shift others 
	  'left' by one,  i.e.  A[i:j] _ A[i+1:j] & A[i] .
	The procedure uses information contained in the
	  array index block, and hence is SAIL implementation
	  dependent.  The bulk of the array is moved with
	  just one machine instruction (BLock Transfer).
	INTROTATE  could be written using the SAIL procedure
	  ARRBLT.  However, ARRBLT does not work quite right
	  for string arrays!
	i GEQ j  makes  INTROTATE  a no-op.
	;

IF i < j  THEN  
QUICK!CODE "intRotate"  DEFINE  x="1", y="2", z="3";
		
	move	x, A;	   COMMENT  A. = addr of first elt of A;
	sub	x,-4(x);   COMMENT  A0 = addr of A[0];
	move	y, x;
	add	x, i;	   COMMENT  A0+i   ... of A[i];
	add	y, j;	   COMMENT  A0+j   ... of A[j];
	move	z,(x);	   COMMENT  Save A[i];

	hrli	x, 1(x);   COMMENT  A0+i+1,,A0+i;

	blt	x,-1(y);   COMMENT  A[i:j-1] _ A[i+1:j];

	movem	z,(y);	   COMMENT  A[j] _ old A[i];

END "intRotate"
;
SIMPLE PROCEDURE	intSort ( INTEGER ARRAY A;  
				  INTEGER first, last;
				  BOOLEAN SIMPLE PROCEDURE inOrder;
				  BOOLEAN noisy (FALSE)	) ;
COMMENT			-------
	Sort an Integer Array.
	The array segment  A[FIRST:LAST]  (need not be the entire 
	  array) is sorted.

	The two integer arguments of  INORDER  must be by REFERENCE,
	  as in the example below:

	   BOOLEAN SIMPLE PROCEDURE   INORDER (REFERENCE INTEGER i,j) 

	  (the procedure need not be declared  SIMPLE).
	  INORDER  must be TRUE whenever  A[i]  comes strictly 
	  before  A[j].  For  A[i]  and  A[j]  of the same rank
	  INORDER = TRUE is preferred but not necessary.
	If NOISY, prints on controlling tty at 128-step intervals.
	FIRST geq LAST  won't hurt (no sorting).

	Method:  Insert method (starting from end of array) with
	------	 binary search.

	Timing for an array of  n  elements:
	------
	INORDER  is called an average of  n*(log2(n) - 1.58)  times,
		range from  n*(log2(n) - 2)  to  n*(log2(n) - 1).
	INSERTINDEX  is called  n  times (really  n - 1  times).
 	ROTATE  is called  n  times, and a total of   (n^2)/4
		words (average,  range  0  to  (n^2)/2  words) are 
		transferred at about 3 us. per word.
	   For an integer array of 10,000 elements this adds up to:
		117,000  INORDER calls,
		 10,000  INSERTINDEX calls,
		 10,000  INTROTATE calls, causing an average of
	     25,000,000  words to be transferred, requiring approx.
			 1 min. 15 sec. of block transfer time.;

BEGIN "intSort"  INTEGER i;

    IF noisy  THEN OUTSTR ("

Sorting... ");

    FOR i _ last - 1 STEP -1 UNTIL first  DO
    BEGIN
	intRotate ( A, i, insertIndex (i,last,inOrder) );

	COMMENT  Report our progress;
	IF noisy AND NOT (i LAND '177)  THEN outstr (cvs(i) & " ");
    END
    ;
    IF noisy  THEN OUTSTR ("...sorted!
");

END "intSort";

COMMENT  *******  REAL ARRAY SORTING  *******
		*********************;



SIMPLE PROCEDURE	realRotate ( REAL ARRAY A; INTEGER i, j );
COMMENT			----------
	Speedy Real Array shuffler.
	REAL ARRAYS and INTEGER ARRAYS have same structure.
	See comment to "INTROTATE".
	;
QUICK!CODE  jrst intRotate  END;





SIMPLE PROCEDURE	realSort ( REAL ARRAY A;  
				   INTEGER first, last;
				   BOOLEAN SIMPLE PROCEDURE inOrder;
				   BOOLEAN noisy (FALSE) ) ;
COMMENT			--------
	Sort a Real Array.
	See comment to "INTSORT".
	;
BEGIN "realSort"  INTEGER i;

    IF noisy  THEN OUTSTR ("

Sorting... ");

    FOR i _ last - 1 STEP -1 UNTIL first  DO
    BEGIN
	realRotate (A, i, insertIndex (i,last,inOrder));

	COMMENT  Report our progress;
	IF noisy AND NOT (i LAND '177)  THEN outstr (cvs(i) & " ");
    END
    ;

    IF noisy  THEN OUTSTR ("...sorted!
");

END "realSort"
;

COMMENT  *******  STRING ARRAY SORTING  *******
		***********************;



SIMPLE PROCEDURE	strRotate ( STRING ARRAY A; INTEGER i, j );
COMMENT 		---------
	Speedy String Array Shuffle.
	See comment to "INTROTATE".
	(String array elements are 2 words long.
	   Array address  A. is the address of the second
	   word of the first element of A)
	(SAIL procedure  ARRBLT  does not work quite right
	   for string arrays.)
	;

IF i < j  THEN  
QUICK!CODE "strRotate"  DEFINE  x="1", y="2", z="3", u="4", v="5";

	move x, A;	COMMENT  Get  A.;
	move y,-5(x);	COMMENT  Displacement from array index block;
	sub  x, y;
	subb x, y;	COMMENT  A0 = addr of second word of A[0];

	add  x, i;
	add  x, i;	COMMENT  A0+2*i;
	move u,-1(x);	COMMENT  Save A[i];
	move v,(x);

	hrli x,(x);
	addi x,-1;	COMMENT  A0+2*i+1,,A0+2*i-1 , thanks to carry;

	add  y, j;
	add  y, j;	COMMENT  A0+2*j;

	blt  x,-2(y);

	movem u,-1(y);	COMMENT  Recover original A[i];
	movem v,(y);

END "strRotate"
;

SIMPLE PROCEDURE	strSort ( STRING ARRAY A;  
				  INTEGER first, last;
				  BOOLEAN SIMPLE PROCEDURE inOrder;
				  BOOLEAN noisy (FALSE) ) ;
COMMENT  		-------
	Sort a String Array.
	See comment to "INTSORT".
	STRROTATE  word counts and execution times are double those 
	  of  INTROTATE.
	;

BEGIN "strSort"  INTEGER i;

    IF noisy  THEN OUTSTR ("

Sorting... ");

    FOR i _ last - 1 STEP -1 UNTIL first  DO
    BEGIN
	strRotate (A, i, insertIndex (i,last,inOrder));

	COMMENT  Report our progress;
	IF noisy AND NOT (i LAND '177)  THEN outstr (cvs(i) & " ");
    END
    ;

    IF noisy  THEN OUTSTR ("...sorted!
");

END "strSort"
;

BOOLEAN SIMPLE PROCEDURE	alphabetized ( STRING str1, str2 );
COMMENT  			------------
	ASCII string comparator.
	Comparison is character by character starting from the 
	  beginning of the string.  
	TRUE  iff  STR1  comes before or is the same as  STR2:
	  If STR1 < STR2 then ALPHABETIZED < 0.
	  If STR1 = STR2 then ALPHABETIZED > 0.
	ALPHABETIZED  is TRUE for the following pairs of strings:
	  ("ABC", "ABC"),  identical strings.
	  ("XYZ", "abc"),  upper case ranks before lower case.
	  (" XYZ", "ABC"),  space ranks before the letters.
	  ("ABC", "ABCD"),  the former is an initial substring
			      of the latter.
	;

START!CODE "alphabetized"
	DEFINE	ch1="1", ch2="2", n1="3", n2="4", bp1="5", bp2="6", 
		sp = "'16";
	LABEL  loop, fin2, fin1, fals, ret;

	hrrz	n1, -3(sp);
	move	bp1, str1;
	hrrz	n2, -1(sp);
	move	bp2, str2;

 loop:	sojl	n2, fin2;
	sojl	n1, fin1;
	ildb	1, bp1;
	ildb	2, bp2;
	subi	1, (2);		COMMENT  AC1 _ CH1 - CH2;
	jumpe	1, loop;	COMMENT  CH1 = CH2?;
COMMENT  Found first bytes that differ;
	jumpl	1, ret;		COMMENT  CH1 < CH2?;
	jrst	 fals;		COMMENT   No, return FALSE;
	
COMMENT  STR2 contains STR1, they are possibly identical;
 fin2:	jumpg	n1, fals;
	movei	1, 1;		COMMENT  STR1 = STR2: TRUE, positive;
	jrst	 ret;

COMMENT  STR1 is initial substring of STR2;
 fin1:	tloa	1, '777777;	COMMENT  STR1 < STR2: TRUE, negative;
 fals:	 setz	1,;		COMMENT  STR1 > STR2, FALSE;
 ret:
END "alphabetized"
;

 