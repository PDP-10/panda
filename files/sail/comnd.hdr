require "{}{}" delimiters;

comment Macro Definitions
  ================= 
  ;

define	nulio = {'377777};

comment *** Error Codes found in AC2 upon unparsable field (returned in !skip!)
comment     for CmKey and CmSwi;

define	NPXAMB = {'602044};
define	NPXNSW = {'602045};
define	NPXNOM = {'602046};
define	NPXNUL = {'602047};
define	NPXINW = {'602050};
define	NPXNC  = {'602051};
define	NPXICN = {'602052};
define	NPXIDT = {'602053};
define	NPXNQS = {'602054};
define	NPXNMT = {'602055};
define	NPXNMD = {'602056};
define	NPXCMA = {'602057};
define	COMX18 = {'602134};
define	COMX19 = {'602135};

comment *** Error codes causing Illegal Instruction Interrupts (not including
comment     errors caused by jsyses called by COMND);

define	COMNX1 = {'601257};
define	COMNX2 = {'601260};
define	COMNX3 = {'601261};
define	COMNX5 = {'601265};
define	COMNX8 = {'601321};
define	COMNX9 = {'601413};
define	COMX10 = {'601767};
define	COMX11 = {'602035};
define	COMX12 = {'602036};
define	COMX13 = {'602037};
define	COMX14 = {'602040};
define	COMX15 = {'602041};
define	COMX16 = {'602042};
define	COMX17 = {'602043};

comment *** End of Macro Definitions;

require "sai:comnd.rel" library;

external integer procedure cm!size
	(string array strarr);
external procedure cm!take(integer ichan, ochan(nulio);
		    boolean errpop(true));
external procedure cm!retry
	(string errmsg);
external string procedure cm!getatm;
external integer procedure cm!tbuild
	(string array keys;
	 reference integer array table);
external boolean procedure cm!ini
	(string prompt;
	 boolean newcomm(true));
external integer procedure cm!key
	(integer array table;
	 string help(null),def(null);
	 boolean sup$help(false),
		raise$input(false),
		no$indirect(false),
		wake$always(false);
	 string brchars(null));
external integer procedure cm!cfm
	(string help(null);
	 boolean sup$help(false));
external integer procedure cm!num
	(string help(null),def(null);
	 boolean sup$help(false);
	 integer radix(10);
	 boolean no$indirect(false),
		 wake$always(false));
external procedure cm!noi
	(string noise);
external integer procedure cm!ifi
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));
external integer procedure cm!ofi
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));
external procedure cm!cma
	(string help(null);
	 boolean sup$help(false));
external integer procedure cm!swi
	(integer array table;
	 string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false);
	 string brchars(null));
external string procedure cm!fld
	(string help(null),def(null);
	 boolean raise$input(false),
		 no$indirect(false),
		 wake$always(false);
	 string brchars(null));
external integer procedure cm!usr
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false),
		 parse$only(false));
external integer procedure cm!dir
	(string help(null),def(null);
	 boolean sup$help(false),
		 allow$wild(false),
		 raise$input(false),
		 no$indirect(false),
	 	 wake$always(false),
		 parse$only(false));
external real procedure cm!flt
	(string help(null),def(null);
	 boolean sup$help(false),
		 no$indirect(false),
		 wake$always(false));
external integer procedure cm!dev
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false);
	 string brchars(null));
external string procedure cm!txt
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false);
	 string brchars(null));
external integer procedure cm!tad
	(string help(null),def(null);
	 boolean sup$help(false),
		 date(true),time(true),
		 no$convert(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));
external string procedure cm!qst
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));
external string procedure cm!uqs
	(string brchars;
	 string help(null),def(null);
	 boolean raise$input(false),
		 no$indirect(false),
		 wake$always(false));
external boolean procedure cm!tok
	(string token,
	        help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));
external integer procedure cm!nux
	(string help(null),def(null);
	 boolean sup$help(false);
	 integer radix(10);
	 boolean no$indirect(false),
		 wake$always(false));
external string procedure cm!act
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));
external string procedure cm!nod
	(string help(null),def(null);
	 boolean sup$help(false),
	 	 no$indirect(false),
		 wake$always(false));
external integer procedure cm!fil
	(string help(null),def(null);
	 integer flag$gen('440004000000);
	 string device(null),
		directory(null),
		name(null),
		extension(null),
		protection(null),
		account(null);
	 integer jfn(0);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));
external procedure cm#reset;
external integer procedure cm#call
	(string def(null);
	 boolean raise$input(false),
		 no$indirect(false),
		 wake$always(false));
define cm#ini = {cm!ini};	comment in case the user thinks he needs
					cm#ini when using multiple FDBs;
external integer procedure cm#key
	(integer array table;
	 string help(null);
	 boolean sup$help(false);
	 string brchar(null));
external integer procedure cm#cfm
	(string help(null);
	 boolean sup$help(false));
external integer procedure cm#num
	(string help(null);
	 boolean sup$help(false);
	 integer radix(10));
external integer procedure cm#noi
	(string noise);
external integer procedure cm#ifi
	(string help(null);
	 boolean sup$help(false));
external integer procedure cm#ofi
	(string help(null);
	 boolean sup$help(false));
external integer procedure cm#cma
	(string help(null);
	 boolean sup$help(false));
external integer procedure cm#swi
	(integer array table;
	 string help(null);
	 boolean sup$help(false);
	 string brchars(null));
external integer procedure cm#fld
	(string help(null),
		brchars(null));
external integer procedure cm#usr
	(string help(null);
	 boolean sup$help(false),
		 parse$only(false));
external integer procedure cm#dir
	(string help(null);
	 boolean sup$help(false),
		 allow$wild(false),
		 parse$only(false));
external integer procedure cm#flt
	(string help(null);
	 boolean sup$help(false));
external integer procedure cm#dev
	(string help(null);
	 boolean sup$help(false);
	 string brchars(false));
external integer procedure cm#txt
	(string help(null);
	 boolean sup$help(false);
	 string brchars(null));
external integer procedure cm#act
	(string help(null);
	 boolean sup$help(false));
external integer procedure cm#tok
	(string token,
	        help(null);
	 boolean sup$help(false));
external integer procedure cm#fil
	(string help(null);
	 integer flag$gen('440004000000);
	 string device(null),
		directory(null),
		name(null),
		extension(null),
		protection(null),
		account(null);
	 integer jfn(0);
	 boolean sup$help(false));
external integer procedure cm#nod
	(string help(null);
	 boolean sup$help(false));
external integer procedure cm#nux
	(string help(null);
	 boolean sup$help(false);
	 integer radix(10));
external integer procedure cm#tad
	(string help(null);
	 boolean sup$help(false),
	 date(true),time(true),
	 no$convert(false));
external integer procedure cm#uqs
	(string brchars,help(null));	 	 
external integer procedure cm#qst
	(string help(null);
	 boolean sup$help(false));
external integer array cm!csb[0:9];
external integer array cm!fdb[0:3];
external integer array cm!gtbuf[0:13];
external integer array cm!buffer[0:99];
external integer array cm!atom[0:99];
external boolean cm!reparse,cm!colon;
external boolean cm!minor,cm!major,cm!fatal,cm!eof,cm!abort;
external integer cm!err;
external integer array cm#fdb[1:10,0:3];
external integer array cm!datime[2:4];
external integer cm#int;
external real cm#real;
external string cm#str;
external integer cm#level;
external simple procedure cm!ioj;
simple procedure cm!init;

	COMMENT
		Sets flags so that all errors are caught and noted by
	the COMND routines.  Also sets multiple fdb level to zero and
	initializes the CmIoj word of the CSB.
	;

	begin "cm!init"
	  cm!major := true;
	  cm!minor := true;
	  cm#reset;
	  cm!ioj;
	end "cm!init";

require cm!init initialization;

require unstack!delimiters;
