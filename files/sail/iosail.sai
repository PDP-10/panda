ENTRY
 YES,  NO,  ALPHABETIC,  UPPERCASE,  ALPHAMERIC,  
 CAPITALIZE,
 ROUND,  FLOOR,  CEILING,
 FPON,  FPOFF,  FPC,
 SETREADER,  GETREADER,  SETECHO,
 SETPROMPT,  GETPROMPT, 
 READLINE,  READBUFFER,
 READINTEGER,  READSTRING,  READREAL,  
 READYESNO,  READWORD, READBIGWORD,  READ, 
 OPENREAD,  OPENWRITE, 
 CLOSEFILE,  CLOSEALL, 
 EOF,  FILENAME;


COMMENT
         This program was written by <k.kjk> (Kevin Karplus).
                  It is being maintained by <k.kjk>.
      All changes should be approved by him, before being made.
;

BEGIN "OUTER"

require "{}{}" delimiters;
define cr	= {('15 & null)};
define lf	= {('12 & null)};
define crlf	= {('15 &'12)};
define tab	= {"	"};
define proc	= {procedure};
define int 	= {integer};
define !	= {comment};
define beginloop= {while true do begin};
define thru	= {step 1 until};
define alpha	= 
	{"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"};
define numer	= {"0123456789"};

! this file contains sources for several SAIL procedures
! to help novices through the terrors of SAIL input and output
! they should also be somewhat useful to inveterate SAIL hackers
! in standardizing input/output ;

! To use this file include the statement
	require "<sail>iosail.hdr" SOURCE!FILE;
! the above-mentioned header file also has several useful macros,
! so read it also ;

! the procedures contained in this file are:
	string  := READLINE(chan)
	string  := READSTRING(chan)
	integer := READINTEGER(chan)
	real    := READREAL(chan)
	boolean := READYESNO(chan)
	string  := READWORD(chan)
	string  := READBIGWORD(chan)
	real    := READ(chan)
	string  := READBUFFER(chan)

	SETPROMPT(chan,prompt)
	SETECHO(chan)
	SETREADER(chan)

	chan := OPENREAD(file)
	chan := OPENWRITE(file)
        CLOSEFILE(chan)

	boolean := EOF(chan)
	string := FILENAME(chan)

	and a host of others too numerous to mention (see page 4)
	;

! this page contains the global variables used by the procedures;

REQUIRE "<SAIL>RDTTY.HDR" SOURCE!FILE;

external integer !skip!;

integer ignor;		! breaktable (ignore nulls);
integer brquote;	! breaktable (break on quotes);
integer gtword;		! breaktable (get a word);
integer gtbgwrd;	! breaktable (get a big word);
integer brlf;		! breaktable (break on end of line);
integer capt;		! breaktable (no break, capitalize string);
integer gtnumb;		! breaktable (get a number (unsigned integer));

integer READERCHAN;	! the channel which is being used for input;
integer ECHOCHAN;	! the channel which is used for echoing input;
boolean ECHOON;		! this is turned off so READLINE doesn't echo 
			! when called from inside READ... ;
integer READBRK;	! the character which rdtty and input return
			! as break character;

boolean array INEOF[-2:15];	! the eof indicator for each channel;
boolean array RETEOF[-2:15];	! set if line read attempted past eof;
boolean array ROPENED[-2:15];	! this is set if the channel is opened
				! for reading;
boolean array WOPENED[-2:15];	! this is set if the channel is opened
				! for writing;
boolean array actually!a!tty[-2:15];	! is this chan a tty?;
string array BUFFER[-2:15];	! buffer for read functions;

string array  PROMPTSTRING[-2:15];	! the prompt printed when  
			! reading from a channel;
simple internal boolean proc YES(integer temp);
RETURN(temp="Y" or temp="y");

simple internal boolean proc NO(integer temp);
RETURN(temp="N" or temp="n");

simple internal boolean proc NUMERIC(integer temp);
RETURN(temp>="0" and temp<="9");

simple internal boolean proc LOWERCASE(integer temp);
RETURN(temp>="a" and temp<="z");

simple internal boolean proc UPPERCASE(integer temp);
RETURN(temp>="A" and temp <="Z");

simple internal boolean proc ALPHABETIC(integer temp);
RETURN(lowercase(temp) or uppercase(temp));

simple internal boolean proc ALPHAMERIC(integer temp);
RETURN(alphabetic(temp) or numeric(temp));

simple internal string proc CAPITALIZE(string temp);
begin "CAPITALIZE"
integer brk;
RETURN(scan(temp,capt,brk));
end "CAPITALIZE";

simple internal integer proc ROUND(real x);
begin integer i;
define FIXR = {'126000000000};
start!code "code"
	FIXR	2,x;
	MOVEM	2,i;
	end "code";
RETURN(i);
end;

simple internal integer proc FLOOR(real x);
start!code
	! this code is not very clear, but is a several year old
	! standard for computing FLOOR 
	! (see Gosper's entry in MIT's HAKMEM for details);
   MOVE 1,X;
   MULI 1,'400; ! duplicate sign bit& exponent in 1, fraction in 2;
   TSC 1,1;	! absolute value of exponent in right half;
   ASH 2,-'243(1);	! shift -'200-27-8+exponent;
   MOVE 1,2;
   end;


simple internal integer proc CEILING(real x);
start!code
	! this code is not very clear, but is a several year old
	! standard for computing CEILING(x)=-FLOOR(-x)
	! (see Gosper's entry in MIT's HAKMEM for details);
   MOVN 1,X;
   MULI 1,'400; ! duplicate sign bit& exponent in 1, fraction in 2;
   TSC 1,1;	! absolute value of exponent in right half;
   ASH 2,-'243(1);	! shift -'200-27-8+exponent;
   MOVN 1,2;
   end;


DEFINE DIE= {begin
	usererr(0,0,"PROGRAM terminated because of error","X");
	end};

DEFINE saveformat(junk) = {begin "saveform"
	integer t1,t2;
	getformat(t1,t2);
	setformat(0,7);
	junk;
	setformat(t1,t2);
	end "saveform"
};

DEFINE ECHOPRINT(foo) = {saveformat({
    if echochan neq -2 then
	if echochan<0 then print(foo)
		       else cprint(echochan,foo)
   })
};

DEFINE ERRMESS(chan,mess,doafter) = { begin "errmess"
    saveformat({
	print("ERROR on channel ",chan,":",mess,crlf)});
    doafter;
end "errmess"
};

DEFINE CHANCHECK(ch,readwrite,rou) = {
if ch<-2 or ch>15 then ERRMESS(ch,"rou: channel number invalid",DIE)
   else if not readwrite[ch] then ERRMESS(ch,"rou: channel not opened"
					,DIE);
};


internal proc FPON;
begin "fpon"
integer temp;
temp:=getprint;
     if temp="T" or temp="O" then setprint(null,"B")
else if temp="N" or temp="S" then setprint(null,"F");
end "fpon";

internal proc FPOFF;
begin "fpoff"
integer temp;
temp:=getprint;
     if temp="B" then setprint(null,"O")
else if temp="F" then setprint(null,"S");
end "fpoff";

internal proc FPC;
begin "fpc"
integer temp;
temp:=getprint;
     if temp="B" or temp="O" then setprint(null,"T")
else if temp="F" or temp="S" then setprint(null,"N");
end "fpc";
! procs SETREADER, GETREADER, SETECHO, defprompt, SETPROMPT, GETPROMPT;

simple internal proc SETREADER(integer chan (-2));
begin "setreader"
   CHANCHECK(chan,ROPENED,SETREADER);
   READERCHAN:=chan;
   if chan=-2 then begin "-2"
		actually!a!tty[-2]:=true;
		reteof[-2]:=ineof[-2]:=false;
		end "-2"
	      else begin "not -2"
		actually!a!tty[-2]:=actually!a!tty[chan];
		reteof[-2]:=reteof[chan];
		ineof[-2]:=ineof[chan];
		end "not -2";
end "setreader";


simple internal integer proc GETREADER;
RETURN(READERCHAN);


simple internal proc SETECHO(integer chan(-2));
begin "setecho"
CHANCHECK(chan,WOPENED,SETECHO);
ECHOCHAN:=chan;
end "setecho";

simple string proc defprompt(integer chan);
begin "DEFPROMPT"
string pr;
saveformat({
	if chan<0 then pr:= " ?>" else pr:=cvs(chan)&">"
	});
return(pr);
end "DEFPROMPT";

simple internal proc SETPROMPT(string prompt(null); integer chan(-2));
begin "setprompt"
CHANCHECK(chan,ROPENED,SETPROMPT);
if length(prompt)=0  then promptstring[chan] := defprompt(chan)
	else PROMPTSTRING[chan]:=prompt;
end "setprompt";

simple internal string proc GETPROMPT(integer chan(-2));
begin "getprompt"
CHANCHECK(chan,ROPENED,GETPROMPT);
return(promptstring[chan]);
end "getprompt";

internal string proc READLINE(integer chan);
begin "readline"
string st;	integer actualchan;
st:=null;

CHANCHECK(chan,ROPENED,READLINE);
if chan=-2 then  actualchan:=readerchan
	else actualchan:=chan;
if RETEOF[actualchan] then 
    ERRMESS(chan,"in READLINE: attempted read after end-of-file");
if INEOF[actualchan] then begin "attempt read past EOF"
	RETEOF[actualchan]:=RETEOF[chan]:=TRUE;
	if actually!a!tty[chan] then INEOF[chan]:=INEOF[actualchan]:=false;
	RETURN(null);
	end "attempt read past EOF";
RETEOF[chan]:=RETEOF[actualchan]:=false;
INEOF[actualchan]:=false;
buffer[chan]:=buffer[actualchan]:=null;
if actually!a!tty[chan] then begin
		st:=rdtty(promptstring[chan]);
      ! ^Z;	if readbrk=26 then INEOF[actualchan]:=true;
		end
	else begin
	     st:=null;
	     do
		st:=st&input(actualchan,brlf)
		! don't stop for INPUT count exhaustion;
		! fixed 10 Sept 1979 <csd.kjk>;
	     until INEOF[actualchan] or readbrk;
	    end;
if (chan=-2) and echoon 
		then echoprint({promptstring[chan],st,crlf});
INEOF[chan]:=INEOF[actualchan];
if ineof[chan] and length(st)=0 then begin "null at end"
	reteof[chan]:=reteof[actualchan]:=true;
	if actually!a!tty[chan] 
		then ineof[chan]:=ineof[actualchan]:=false;
	end "null at end";
RETURN(st);
end "readline";

DEFINE loopforit(rou,ok,ret,err,typeis)={
begin "loopforit"
integer brk;	string pr;
CHANCHECK(chan,ROPENED,rou);
if RETEOF[chan] 
	then ERRMESS(chan,"in rou: continuing read after end-of-file");
if equ(pr:=promptstring[chan] , defprompt(chan)) then
	promptstring[chan]:=pr&typeis;
echoon:=false;
while true do begin "looptilgetit"
    scan(buffer[chan],ignor,brk);
    if length(buffer[chan])>0 then begin "scanint"
	if ok	then RET
		else begin "notint"
		     ERRMESS(chan,"in rou "&err);
		     if not actually!a!tty[chan] then DIE;
		     end "notint";
	end "scanint";
    buffer[chan]:=READLINE(chan);
    if RETEOF[chan] then DONE "looptilgetit";
    end "looptilgetit";
if chan=-2 then echoprint({promptstring[chan],is,crlf});
echoon:=true;
promptstring[chan]:=pr;
scan(buffer[chan],ignor,brk);
if chan=-2 then buffer[readerchan]:=buffer[-2];
end "loopforit"};

internal integer proc READINTEGER(integer chan);
begin "READINTEGER"
integer is;
string numtemp;
is:=0;		numtemp:=null;
loopforit(READINTEGER,(numeric(brk) or brk="-" or brk ="+"),
	{begin if brk="-" or brk="+" 
		    then numtemp:=lop(buffer[chan]);
		numtemp:=numtemp&scan(buffer[chan],gtnumb,brk);
		is:=cvd(numtemp);
		DONE "looptilgetit";
		end },
	"can't begin an integer with "&brk,"(integer)");
RETURN(is);
end "READINTEGER";

internal string proc READSTRING(integer chan);
begin "READSTRING"
string is;
is:=null;
loopforit(READSTRING,(brk=""""),
	{begin "getstring"
	  brk:=lop(buffer[chan]);
	  is:="""";
	  beginloop "build"
	    is:=is&scan(buffer[chan],brquote,brk);
	    if brk="""" and buffer[chan] neq """" then DONE "looptilgetit";
	    if brk="""" then brk:=lop(buffer[chan]);
	    if length(buffer[chan])=0 then begin
		buffer[chan]:=READLINE(chan);
		is:=is&crlf;
		end;
	  end "build";
	 end "getstring"},
	"strings must start with "" not "&brk,  "(""string"")");
RETURN(is[2 to inf-1]);
end "READSTRING";

internal  real proc READREAL(integer chan);
begin "READREAL"
real is;
is:=0;
loopforit(READREAL,(numeric(brk) or brk="-" or brk="+" or brk="."),
	{begin is:=lrealscan(buffer[chan],brk);
	       DONE "looptilgetit";
	       end },
	"can't begin a real number with "&brk, "(real)");
RETURN(is);
end "READREAL";

internal boolean proc READYESNO(integer chan);
begin "READYESNO"
string is;
is:=null;
loopforit(READYESNO,(yes(brk) or no(brk)),
	{begin "ret"
	  is:=scan(buffer[chan],gtword,brk);
	  DONE "looptilgetit"
	end "ret"},
	"not a yes or no     Starting with "&brk,"(yes or no)");
RETURN(yes(is));
end "READYESNO";

internal string proc READWORD(integer chan);
begin "READWORD"
string is;
is:=null;
loopforit(READWORD,true,
	{begin "ret"
	  if alphameric(brk) then is:=scan(buffer[chan],gtword,brk)
		else is:=lop(buffer[chan]);
	  DONE "looptilgetit"
	end "ret"},
	"","(word)");
RETURN(is);
end "READWORD";

internal string proc READBIGWORD(integer chan(-2));
begin "READBIGWORD"
string is;
is:=null;
loopforit(READBIGWORD,true,
		{begin "ret"
		is:=scan(buffer[chan],gtbgwrd,brk);
		DONE "looptilgetit";
		end "ret"},
	"","(big word)");
RETURN(is);
end "READBIGWORD";

internal real proc READ(integer chan(-2));
begin "READ"
real foo;	! the number read to return;
!	this procedure included for compatibility with 
!	Floyd's "NOTES ON PROGRAMMING IN SAIL"
!	;
CHANCHECK(chan,ROPENED,READ);
if equ(getprompt(chan),defprompt(chan)) then 	
	begin "change prompt"
	setprompt(">?",chan);
	foo:=readreal(chan);
	setprompt(null,chan);
	end "change prompt"
   else foo:=readreal(chan);
RETURN(foo);
end "READ";

internal string proc READBUFFER(integer chan(-2));
begin "READBUFFER"
string temp;
CHANCHECK(chan,ROPENED,READBUFFER);
temp:=buffer[chan];
buffer[chan]:=null;
RETURN(temp);
end "READBUFFER";
! procedures OPENREAD,OPENWRITE;

define promptforname(str)={
if length(filename)=0 then begin 
			   outstr(str);
			   wasnull:=true;
			   end
		      else wasnull:=false
};

internal integer proc OPENREAD(string filename);
begin "OPENREAD"
integer chan;	boolean wasnull;

promptforname("Input file=");
chan:=openfile(filename,"RC");
if chan>15 then ERRMESS(chan,"OPENREAD: too many channels open",DIE);
if wasnull then echoprint({"Input file=",jfns(chan,0),crlf});
if devtype(chan)=10 or devtype(chan)=11    ! (((tty or pseudo-tty)));
	then actually!a!tty[chan]:=true
	else begin "real file"
	     actually!a!tty[chan]:=false;
	     setinput(chan,200,readbrk,INEOF[chan]);
	     end "real file";
ropened[chan]:=true;
RETEOF[chan]:=INEOF[chan]:=false;
RETURN(chan);
end "OPENREAD";

internal integer proc OPENWRITE(string filename);
begin"OPENWRITE"
integer chan;	boolean wasnull;

promptforname("Output file=");
chan:=openfile(filename,"CW");
if chan>15 then ERRMESS(chan,"OPENWRITE: too many channels open",DIE);
if wasnull then echoprint({"Output file=",jfns(chan,0),crlf});
wopened[chan]:=true;
RETURN(chan);
end "OPENWRITE";

! procedures CLOSEFILE;

internal proc CLOSEFILE(integer chan);
begin "CLOSEFILE"
if chan<-2 or chan>15 then ERRMESS(chan,
		"CLOSEFILE: invalid channel number",DIE);
if chan=-2 or chan=readerchan then begin 
	chan:=readerchan;
	ropened[-2]:=wopened[-2]:=true;
	setreader(-2);
	end;
if chan=echochan then setecho(-2);
if (ropened[chan] or wopened[chan]) and chan>=0 then cfile(chan);
if chan>=0 then ropened[chan]:=wopened[chan]:=false;
end "CLOSEFILE";

internal proc CLOSEALL;
begin "closeall"
integer chan,temp;
for chan:=0 thru 15 do closefile(chan);
setecho;
setreader;
setprompt;
fpc;
end "closeall";
! procedures EOF, FILENAME;

simple internal boolean proc EOF(integer chan (-2));
begin "EOF"
CHANCHECK(chan,ROPENED,EOF);
if chan=-2 then RETURN(RETEOF[readerchan]);
RETURN(RETEOF[chan]);
end "EOF";

simple internal string proc FILENAME(integer chan(-2));
begin "FILENAME"
if chan<-2 or chan>15 then ERRMESS(chan,
		"FILENAME: invalid channel",DIE);
if not WOPENED[chan] and not ROPENED[chan] then ERRMESS(chan,
		"FILENAME: channel not open",DIE);
if actually!a!tty[chan] then RETURN("TTY:");
if chan=-2 then RETURN(jfns(readerchan,0));
RETURN(jfns(chan,0));
end "FILENAME";

! initialization procedure;

proc init;
begin "init"
integer temp;

setbreak(brquote:=getbreak,"""",null,"INA");
setbreak(ignor:=getbreak," "&tab&crlf,null,"XNR");
setbreak(gtword:=getbreak,alpha&numer,null,"XNR");
setbreak(gtbgwrd:=getbreak," "&tab&crlf,null,"INR");
setbreak(brlf:=getbreak,lf,cr,"INS");
setbreak(capt:=getbreak,null,null,"IK");
setbreak(gtnumb:=getbreak,numer,null,"XNR");
setty(null,null,readbrk);

echoon:=true;
arrclr(INEOF);
arrclr(RETEOF);
arrclr(ROPENED,true);
arrclr(WOPENED,true);
arrclr(actually!a!tty);
actually!a!tty[-1]:=actually!a!tty[-2]:=true;
READERCHAN:=-2;
ECHOCHAN:=-2;
for temp:=-2  thru 15 do setprompt(null,temp);
arrclr(ROPENED);
arrclr(WOPENED);
WOPENED[-2]:=WOPENED[-1]:=true;
ROPENED[-2]:=ROPENED[-1]:=true;
end "init";

REQUIRE init INITIALIZATION[0];

END "OUTER"
   