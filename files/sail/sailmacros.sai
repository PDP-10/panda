IFC NOT DECLARATION (SAILMACROSW!) THENC

REQUIRE "<> <>" DELIMITERS;

COMMENT Sail Macros;

COMMENT This file contains a number of useful SAIL macros. It is required
by the SAILIO.SAI package;

DEFINE SAILMACROSW! = TRUE;

DEFINE ! = <COMMENT>,
    crlf = <('15 & '12)>,
     pff = <('14 & null)>,
    astk = <'52>,
    del  = <'177>,
  ctrlA  = <1>,
  ctrlC  = <3>,
  ctrlE  = <5>,
  ctrlF  = <6>,
  ctrlG  = <7>,
     bs  = <'10>,
    tab  = <'11>,
     lf  = <'12>,
  ctrlK  = <'13>,
     ff  = <'14>,
     cr  = <'15>,
  ctrlN  = <'16>,
  ctrlO  = <'17>,
  ctrlP  = <'20>,
  ctrlR  = <'22>,
  ctrlS  = <'23>,
  syn	 = <'26>,
  etb	 = <'27>,
  ctrlX  = <'30>,
  ctrlZ  = <'32>,
    esc  = <'33>,
  ctrl\  = <'34>,
     gs	 = <'35>,
 ctrlUP  = <'36>,
    eol  = <'37>,
  space  = <'40>,
  comma  = <'54>,
  hyphen = <'55>,
open!angle = <'74>,
close!angle = <'76>,
  colon = <'72>,
 period = <'56>,

   itty  = <'100>,
   otty  = <'101>,

   upto  = <step 1 until>,
 downto  = <step -1 until>,
 repeat  = <while true do>,

     N!R = <NULL!RECORD>,
    !NEW = <NEW!RECORD>,
     R!C = <RECORD!CLASS>,
     R!P = <RECORD!POINTER>,
okrec(r) = <r NEQ N!R>,

infinity = <'377777777777>,
rinfinity = <10.0^38>,
pi = <3.141592654>,
log10e = <0.4342944819>,
e!nat = <2.71828182845904>,

yes!or!no(s) = <s = "Y" OR s = "N">,
     !yes(s) = <s = "Y">,
      !no(s) = <s = "N">,
ISALTMODE(A) = <A = '33 OR A = '175 OR A = '176>,
SOURCE!(FIL) = <REQUIRE "FIL" SOURCE!FILE>,
  LOAD!(FIL) = <REQUIRE "FIL" LOAD!MODULE>,
      HALT!F =	<START!CODE
		 HALTF;
		 END>,
 DELAY(SECONDS) = <BEGIN
		   INTEGER MSEC;
		   MSEC _ 1000.*SECONDS;
			   START!CODE
			   MOVE 1, MSEC;
			   DISMS;
			   END;
		   END>;

! !SKIP! is used to return the activation character for TENEX terminal
  input;

EXTERNAL INTEGER !SKIP!;  

! CVF! performs a cleaned up F format conversion on X and returns the
  string result. Leading and trailing zeros, and trailing decimal points
  are suppressed;

SIMPLE STRING PROCEDURE CVF! 
	(REAL X);

	BEGIN "CVF!"
	STRING S, bb;
	IF NOT X THEN RETURN ("0");
	S _ CVF (X);
	WHILE S = " " DO bb _ LOP (S);
	WHILE S[INF FOR 1] = "0" DO S _ S[1 TO INF-1];
	IF S[INF FOR 1] = "." THEN S _ S[1 TO INF-1];
	RETURN (S);
	END "CVF!";

! ADD1 (SUB1) increments (decrements) its argument and returns the result;

INTEGER SIMPLE PROCEDURE ADD1(REFERENCE INTEGER NUM);
	START!CODE "ADD1" 
	AOS 1,NUM; 
	END "ADD1";

INTEGER SIMPLE PROCEDURE SUB1(REFERENCE INTEGER NUM);
	START!CODE "SUB1" 
	SOS 1,NUM; 
	END "SUB1";

INTEGER !DISABLED!, !TERM!;

! DISABLE!TERMINAL sets the terminal mode to binary 8 bit in and out,
  no format control and no control group translation, and no echoing. 
  It also sets !DISABLED!. It returns TRUE if the mode was actually
  changed (i.e., the terminal was not already in binary mode);

SIMPLE BOOLEAN PROCEDURE DISABLE!TERMINAL;

	BEGIN "DISABLE!TERMINAL"
	INTEGER DUM;
	IF NOT !DISABLED! THEN
		BEGIN
			START!CODE
			MOVEI 1, '777777;
			RFMOD;
			MOVEM 2, !TERM!;
			END;
		DUM _ !TERM! LAND '777777777477;
			START!CODE
			MOVEI 1, '777777;
			MOVE 2, DUM;
			SFMOD;
			END;
		!DISABLED! _ TRUE;
		RETURN (TRUE);
		END
	ELSE RETURN (FALSE);
	END "DISABLE!TERMINAL";


! ENABLE!TERMINAL sets the terminal mode to that specified in !TERM!, and
  clears !DISABLED!;

SIMPLE PROCEDURE ENABLE!TERMINAL;

	BEGIN "ENABLE!TERMINAL"
		START!CODE
		MOVEI 1, '777777;
		MOVE 2, !TERM!;
		SFMOD;
		END;
	!DISABLED! _ FALSE;
	END "ENABLE!TERMINAL";


! ECHO!OFF sets the terminal mode to no echo;

SIMPLE PROCEDURE ECHO!OFF;

	BEGIN "ECHO!OFF"
	INTEGER DUM;
		START!CODE
		MOVEI	1, '777777;
		RFMOD;
		MOVEM	2, DUM;
		END;
	DUM _ DUM LAND '777777771777;
		START!CODE
		MOVEI	1, '777777;
		MOVE	2, DUM;
		SFMOD;
		END;
	END "ECHO!OFF";


! ECHO!ON sets the terminal mode to immediate or deferred echo;

SIMPLE PROCEDURE ECHO!ON;

	BEGIN "ECHO!ON"
	INTEGER DUM;
		START!CODE
		MOVEI	1, '777777;
		RFMOD;
		MOVEM	2, DUM;
		END;
	DUM _ DUM LOR '6000;
		START!CODE
		MOVEI	1, '777777;
		MOVE	2, DUM;
		SFMOD;
		END;
	END "ECHO!ON";

REQUIRE UNSTACK!DELIMITERS;

ENDC

