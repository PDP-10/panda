require "{}{}" delimiters;
define !	= {comment};

!	This program header written by <CSD.KJK> (Kevin Karplus)
!	Maintained by <CSD.KJK> (Kevin Karplus)
!	PLEASE don't modify it.  send suggestions to the maintainer;

define SPACE	= {" "};
define PLOTLF	= {( '5 & '12 )} ;
define LF	= {( '12 & null )};
define LINEFEED	= {lf};
define CR	= {('15 & null)};
define CRLF	= {('15 &'12)};
define NEWLINE	= {('15 &'12)};
define FORMFD	= {('14 & null)};
define NEWPAGE	= {formfd};
define FORMFEED = {formfd};
define TAB	= {"	"};
define BELL	= {('7 & null)};
define FINE	= {('6 &null)};
define BOLD	= {('10 & null)};

define PROC	= { procedure };
define REF	= { reference };
define THRU	= { step 1 until };
define UPTO	= { :=1 step 1 until };
define BEGINLOOP= { while true do begin };
define R!P	= { record!pointer };
define R!C	= { record!class };
define NULLR	= { null!record };
define NEWR	= { new!record };
define NULLSTRING(x)= {(length(x)=0)};
define CVBS(b)	= {(if b then "TRUE" else "FALSE")};
define TERM!PRINT!ON = {setprint(null,"C")};
define TERM!PRINT!OFF= {setprint(null,"I")};
define FILE!PRINT!ON = {fpon};
define FILE!PRINT!OFF= {fpoff};
define FILE!PRINT!CLOSE = {fpc};


define ALPHA	= 
	{"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"};
define NUMER	= {"0123456789"};

define MEMLOC(x) 	= {memory[location(x)]};
define LOWBOUND(arr,dim)={arrinfo(arr,2*(dim)-1)};
define UPBOUND(arr,dim)={arrinfo(arr,2*(dim))};
define NUMDIM(arr)	={abs(arrinfo(arr,-1))};
! macros BUGON, BUGOFF, DEBUG,  boolean !bugoff;

boolean !bugoff;

define BUGON	= {!bugoff:=false};
define BUGOFF	= {!bugoff:=true};

define DEBUG (where,arglist) = { begin "DEBUG"
 if not !bugoff then begin  "do debug"
   integer sf1,sf2;
   getformat(sf1,sf2);
   setformat(0,7);
   redefine !bugind = 1;
   print("DEBUG:where ");

   ifc cvps(arglist) neq "(" 
	thenc redefine !argl = {(arglist)};
	elsec redefine !argl = {arglist}; endc

   ifc length(cvms(!argl)) > 2 thenc
	    forlc !bugind := !argl doc {
	    print((cvps(!bugind) & "="),
	      ifc expr!type(!bugind) land check!type(string)
		thenc """",!bugind,"""" 
		elsec !bugind endc,
		"; ");}
	    endc
	endc
   print(crlf);
   setformat(sf1,sf2);
   end "do debug";
  end "DEBUG"};

! WARNING--!BUGIND and !ARGL are required by the debug package,
! and should not be otherwise used in this block



! to use:
!  DEBUG(label,(i,j,k,l));

! alternate form:
! DEBUG(label,i);
! as long as i does not start with "(" this has the same effect as
! DEBUG(label,(i));

define ASSERT (!bugexpr,arglist) = { 
 begin "ASSERT"
 if not !bugoff and not (!bugexpr) then 
   begin  "do assert"
   setformat(0,7);

   print("ASSERTION failed:",cvps(!bugexpr),crlf,tab);

   ifc cvps(arglist) neq "(" 
	thenc redefine !argl = {(arglist)};
	elsec redefine !argl = {arglist}; endc

   ifc length(cvms(!argl)) > 2 thenc
	    forlc !bugind := !argl doc {
	    print((cvps(!bugind) & "="),
	      ifc expr!type(!bugind) land check!type(string)
		thenc """",!bugind,"""" 
		elsec !bugind endc,
		"; ");}
	    endc
	endc
   print(crlf);
   usererr(1,1,"");
   end "do assert";
  end "ASSERT"};


! to use:
!  ASSERT(boolean expression,(i,j,k,l));

! alternate form:
! ASSERT(boolean expression,i);
! as long as i does not start with "(" this has the same effect as
! ASSERT(boolean expression,(i));



simple external boolean proc YES(integer temp);
simple external boolean proc NO(integer temp);
simple external boolean proc NUMERIC(integer temp);
simple external boolean proc LOWERCASE(integer temp);
simple external boolean proc UPPERCASE(integer temp);
simple external boolean proc ALPHABETIC(integer temp);
simple external boolean proc ALPHAMERIC(integer temp);
simple external string  proc CAPITALIZE(string temp);
external simple integer procedure   ROUND(real x);
external simple integer procedure   FLOOR(real x);
external simple integer procedure CEILING(real x);

external string  proc READLINE(integer chan(-2));
external string  proc READSTRING(integer chan(-2));
external integer proc READINTEGER(integer chan(-2));
external real    proc READREAL(integer chan(-2));
external boolean proc READYESNO(integer chan(-2));
external string  proc READWORD(integer chan(-2));
external string  proc READBIGWORD(integer chan(-2));
external real    proc READ(integer chan(-2));
external string   proc READBUFFER(integer chan(-2));

external proc FPON;
external proc FPOFF;
external proc FPC;

simple external proc SETPROMPT(string prompt(null); integer chan(-2));
simple external proc SETECHO(integer chan(-2));
simple external proc SETREADER(integer chan(-2));
simple external string proc GETPROMPT(integer chan(-2));
simple external integer proc GETREADER;

external integer proc OPENREAD(string file(null));
external integer proc OPENWRITE(string file(null));
external         proc CLOSEFILE(integer chan(-2));
external         proc CLOSEALL;

simple external boolean proc EOF(integer chan(-2));
simple external string  proc FILENAME(integer chan(-2));
simple external string procedure rdtty(string prompt(">"));

REQUIRE "<sail>iosail.rel" LIBRARY;
