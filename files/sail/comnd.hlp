cm!act				[string procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));

cm!cfm				[integer procedure]
	(string help(null);
	 boolean sup$help(false));

cm!cma				[procedure]
	(string help(null);
	 boolean sup$help(false));

cm!dev				[integer procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false);
	 string brchars(null));

cm!dir				[integer procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 allow$wild(false),
		 raise$input(false),
		 no$indirect(false),
	 	 wake$always(false),
		 parse$only(false));

cm!fil				[integer procedure]
	(string help(null),def(null);
	 integer flag$gen('440004000000);
	 string device(null),
		directory(null),
		name(null),
		extension(null),
		protection(null),
		account(null);
	 integer jfn(0);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));

cm!fld				[string procedure]
	(string help(null),def(null);
	 boolean raise$input(false),
		 no$indirect(false),
		 wake$always(false);
	 string brchars(null));

cm!flt				[real procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 no$indirect(false),
		 wake$always(false));

cm!getatm;				[string procedure]
cm!ifi				[integer procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));

cm!ini				[boolean procedure]
	(string prompt;
	 boolean newcomm(true));

cm!key				[integer procedure]
	(integer array table;
	 string help(null),def(null);
	 boolean sup$help(false),
		raise$input(false),
		no$indirect(false),
		wake$always(false);
	 string brchars(null));

cm!nod				[string procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
	 	 no$indirect(false),
		 wake$always(false));

cm!noi				[procedure]
	(string noise);

cm!num				[integer procedure]
	(string help(null),def(null);
	 boolean sup$help(false);
	 integer radix(10);
	 boolean no$indirect(false),
		 wake$always(false));

cm!nux				[integer procedure]
	(string help(null),def(null);
	 boolean sup$help(false);
	 integer radix(10);
	 boolean no$indirect(false),
		 wake$always(false));

cm!ofi				[integer procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));

cm!qst				[string procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));

cm!retry				[procedure]
	(string errmsg);

cm!size				[integer procedure]
	(string array strarr);

cm!swi				[integer procedure]
	(integer array table;
	 string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false);
	 string brchars(null));

cm!tad				[integer procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 date(true),time(true),
		 no$convert(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));

cm!take(integer ichan, ochan(nulio);				[procedure]
		    boolean errpop(true));

cm!tbuild				[integer procedure]
	(string array keys;
	 reference integer array table);

cm!tok				[boolean procedure]
	(string token,
	        help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false));

cm!txt				[string procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false);
	 string brchars(null));

cm!uqs				[string procedure]
	(string brchars;
	 string help(null),def(null);
	 boolean raise$input(false),
		 no$indirect(false),
		 wake$always(false));

cm!usr				[integer procedure]
	(string help(null),def(null);
	 boolean sup$help(false),
		 raise$input(false),
		 no$indirect(false),
		 wake$always(false),
		 parse$only(false));

cm#act				[integer procedure]
	(string help(null);
	 boolean sup$help(false));

cm#call				[integer procedure]
	(string def(null);
	 boolean raise$input(false),
		 no$indirect(false),
		 wake$always(false));

cm#cfm				[integer procedure]
	(string help(null);
	 boolean sup$help(false));

cm#cma				[integer procedure]
	(string help(null);
	 boolean sup$help(false));

cm#dev				[integer procedure]
	(string help(null);
	 boolean sup$help(false);
	 string brchars(false));

cm#dir				[integer procedure]
	(string help(null);
	 boolean sup$help(false),
		 allow$wild(false),
		 parse$only(false));

cm#fil				[integer procedure]
	(string help(null);
	 integer flag$gen('440004000000);
	 string device(null),
		directory(null),
		name(null),
		extension(null),
		protection(null),
		account(null);
	 integer jfn(0);
	 boolean sup$help(false));

cm#fld				[integer procedure]
	(string help(null),
		brchars(null));

cm#flt				[integer procedure]
	(string help(null);
	 boolean sup$help(false));

cm#ifi				[integer procedure]
	(string help(null);
	 boolean sup$help(false));

cm#ini				[boolean procedure]
	(string prompt;
	 boolean newcomm(true));

cm#key				[integer procedure]
	(integer array table;
	 string help(null);
	 boolean sup$help(false);
	 string brchar(null));

cm#nod				[integer procedure]
	(string help(null);
	 boolean sup$help(false));

cm#noi				[integer procedure]
	(string noise);

cm#num				[integer procedure]
	(string help(null);
	 boolean sup$help(false);
	 integer radix(10));

cm#nux				[integer procedure]
	(string help(null);
	 boolean sup$help(false);
	 integer radix(10));

cm#ofi				[integer procedure]
	(string help(null);
	 boolean sup$help(false));

cm#qst				[integer procedure]
	(string help(null);
	 boolean sup$help(false));

cm#reset;				[procedure]
cm#swi				[integer procedure]
	(integer array table;
	 string help(null);
	 boolean sup$help(false);
	 string brchars(null));

cm#tad				[integer procedure]
	(string help(null);
	 boolean sup$help(false),
	 date(true),time(true),
	 no$convert(false));

cm#tok				[integer procedure]
	(string token,
	        help(null);
	 boolean sup$help(false));

cm#txt				[integer procedure]
	(string help(null);
	 boolean sup$help(false);
	 string brchars(null));

cm#uqs				[integer procedure]
	(string brchars,help(null));	 	 

cm#usr				[integer procedure]
	(string help(null);
	 boolean sup$help(false),
		 parse$only(false));
