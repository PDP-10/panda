(FILECREATED " 1-JUN-84 23:21:04" <NEWLISP>FFILEPOS.;2 30168  

      changes to:  (VARS FFILEPOSCOMS)
		   (FNS GETCASEARRAY)

      previous date: "22-MAY-80 19:54:11" <NEWLISP>FFILEPOS.;1)


(* Copyright (c) 1984 by Xerox Corporation)

(PRETTYCOMPRINT FFILEPOSCOMS)

(RPAQQ FFILEPOSCOMS ((FNS FFILEPOS FFILEPOSUNPMAP FILEPOS CASEARRAY SETCASEARRAY GETCASEARRAY)
		     (VARS FFILEPOSMIN (FFILEPOSINITIALIZEFLG T))
		     [ADDVARS (GAINSPACEFORMS ((NULL FFILEPOSINITIALIZEFLG)
					       "discard FFILEPOS initialization"
					       (PROGN (SETQ FFILEPOSINITIALIZEFLG T)
						      (SETQ FFILEPOSDELTA1 (SETQ FFILEPOSSTRCHAR
										 (SETQ FFILEPOSDELTA2
										       (SETQ 
										 FFILEPOSBYTEPTRS]
		     (DECLARE: DONTCOPY (ALISTS (PRETTYEQUIVLST MC))
			       EVAL@COMPILE
			       (PROP MACRO MC)
			       (FILES (SYSLOAD FROM LISPUSERS)
				      CJSYS)
			       (GLOBALVARS FFILEPOSDELTA1 FFILEPOSSTRCHAR FFILEPOSDELTA2 
					   FFILEPOSBYTEPTRS FFILEPOSINITIALIZEFLG 
					   FFILEPOSSETFILEPTRFLG))))
(DEFINEQ

(FFILEPOS
  (LAMBDA (PATTERN FILENAME FILESTART FILEEND SKIP TAIL CASEARRAY)
                                                            (* lmm "25-FEB-79 18:08")
    (PROG (ANS PG)
          (SETQ FILENAME (INPUT (INPUT FILENAME)))
          (OR FILEEND (SETQ FILEEND (GETEOFPTR FILENAME)))
          (OR FILESTART (SETQ FILESTART (GETFILEPTR FILENAME)))
          (COND
	    ((ILEQ (IDIFFERENCE FILEEND FILESTART)
		   FFILEPOSMIN)
	      (GO TRYFILEPOS)))
          (COND
	    (SKIP (SETQ SKIP (NTHCHAR SKIP 1))
		  (COND
		    ((EQ SKIP (NTHCHAR PATTERN 1))
		      (SETQ ANS (FFILEPOS (SUBSTRING PATTERN 2 -1)
					  FILENAME
					  (ADD1 FILESTART)
					  (ADD1 FILEEND)
					  SKIP TAIL CASEARRAY))
		      (RETURN (COND
				(TAIL ANS)
				(T (AND ANS (SETFILEPTR FILENAME (SUB1 ANS)))))))
		    ((SETQ ANS (STRPOS SKIP PATTERN))
		      (COND
			((ILEQ ANS 3)
			  (GO TRYFILEPOS)))
		                                            (* use FFILEPOS to scan for first occurrence)
		      (RETURN (FILEPOS PATTERN FILENAME (FFILEPOS (SUBSTRING PATTERN 1 (SUB1 ANS))
								  FILENAME FILESTART FILEEND SKIP NIL 
								  CASEARRAY)
				       FILEEND SKIP TAIL CASEARRAY))))))
          (COND
	    (FFILEPOSINITIALIZEFLG (SETQ FFILEPOSDELTA1 (ARRAY 128 128))
				   (SETQ FFILEPOSSTRCHAR (ARRAY 96 96))
				   (SETQ FFILEPOSDELTA2 (ARRAY 95 95))
				   (SETQ FFILEPOSBYTEPTRS (ARRAY 191 191))
				   (PROG (FILEBYTE WORDOFFSET)
				         (SETQ FILEBYTE 2)
				         (SETQ WORDOFFSET 0)
				         (SETA FFILEPOSBYTEPTRS 1 -29946544128)
				     NEXTWORD
				         (COND
					   ((EQ FILEBYTE 192)
					     (RETURN NIL)))
				         (SETA FFILEPOSBYTEPTRS FILEBYTE (IPLUS 31256739840 
										WORDOFFSET))
				         (SETA FFILEPOSBYTEPTRS (IPLUS 1 FILEBYTE)
					       (IPLUS 23740547072 WORDOFFSET))
				         (SETA FFILEPOSBYTEPTRS (IPLUS 2 FILEBYTE)
					       (IPLUS 16224354304 WORDOFFSET))
				         (SETA FFILEPOSBYTEPTRS (IPLUS 3 FILEBYTE)
					       (IPLUS 8708161536 WORDOFFSET))
				         (SETA FFILEPOSBYTEPTRS (IPLUS 4 FILEBYTE)
					       (IPLUS 1191968768 WORDOFFSET))
				         (SETQ FILEBYTE (IPLUS 5 FILEBYTE))
				         (SETQ WORDOFFSET (ADD1 WORDOFFSET))
				         (GO NEXTWORD))
				   (SETQ FFILEPOSINITIALIZEFLG NIL)))
          (RESETLST (RESETSAVE NIL (LIST (FUNCTION FFILEPOSUNPMAP)
					 (SETQ PG (MAPPAGE -1 262143))))
		    (SETQ ANS (MC (STRCHARSMAX MAXWORD EOPMAXBYTE INITFILEWORD INITFILEBYTE 
					       INITJFNPGNO EOFMAXWORD EOFMAXBYTE EOFJFNPGNO
					       (BLTPAIR (VAG (LOGOR (LLSH (IPLUS 2 (LOC 
										   FFILEPOSDELTA1))
									  22Q)
								    (IPLUS 3 (LOC FFILEPOSDELTA1)))))
					       (DELTA1LAST (VAG (IPLUS 201Q (LOC FFILEPOSDELTA1))))
					       JFNPGNO
					       (SCRATCHPG PG)
					       CASEPTR)
			          (= DELTA1 (IPLUS 2 (LOC FFILEPOSDELTA1)))
			          (= STRCHAR (IPLUS 2 (LOC FFILEPOSSTRCHAR)))
			          (= DELTA2 (IPLUS 2 (LOC FFILEPOSDELTA2)))
			          (= BP (IPLUS 3 (LOC FFILEPOSBYTEPTRS)))
			          (CQ CASEARRAY)
			          (MOVEI 2 , 2 (1))
			          (HRLI 2 , 2)
			          (CAMN 1 , KNIL)
			          (MOVEI 2 , 2)
			          (MOVEM 2 , CASEPTR)
			      SETUPSTRCHAR                  (* copy PATTERN into STRCHAR and set STRCHARSMAX)
			          (= SAVEBYTEPOINTER 1)
			          (= CHAR 2)
			          (= BYTEPOINTER 3)
			          (= I 4)
			          (= J 5)
			          (CQ (COND
					((LITATOM PATTERN)
					  (CDR (VAG (IPLUS (LOC PATTERN)
							   2))))
					(T (OR (STRINGP PATTERN)
					       (MKSTRING PATTERN)))))
			          (FASTCALL UPATM)          (* now BYTEPOINTER contains a byte pointer pointing to 
							    the char before PATTERN and I has nchars of PATTERN)
			          (JUMPE I , EASYWIN)
			          (CAILE I , 137Q)
			          (JRST TOOLONG)
			          (MOVEM I , STRCHARSMAX)
			          (MOVE SAVEBYTEPOINTER , BYTEPOINTER)
			          (MOVE J , (IPLUS 137Q STRCHAR)
					(0))
			          (CAMGE J , I)
			          (JRST PREPROCESS)
			      CHECKLASTLOOP
			          (ILDB CHAR , BYTEPOINTER)
			          (MOVE CHAR , @ CASEPTR)   (* ASSUMES THAT (= CHAR 2))
			      CHECKLASTLOOP+1
			          (CAME CHAR , STRCHAR (J))
			          (JRST CHECKEOL)
			          (SOJE I , PATTERNOUT)
			          (SOJG J , CHECKLASTLOOP)
			          (JRST PREPROCESS)
			      PATTERNOUT
			          (CAIE J , 1)
			          (JRST PREPROCESS)
			          (MOVE I , (IPLUS 137Q STRCHAR)
					(0))
			          (MOVEM I , STRCHARSMAX)
			          (JRST SEARCH+2)
			      CHECKEOL
			          (CAIE CHAR , 37Q)
			          (JRST PREPROCESS)
			          (MOVEI CHAR , 15Q)
			          (CAME CHAR , STRCHAR (J))
			          (JRST PREPROCESS)
			          (MOVEI CHAR , 12Q)
			          (SOJG J , CHECKLASTLOOP+1)
			      PREPROCESS
			          (SETZM (IPLUS 137Q STRCHAR)
					 (0))
			          (MOVE I , STRCHARSMAX)
			          (MOVE BYTEPOINTER , SAVEBYTEPOINTER)
			      LOADSTRCHAR
			          (ILDB CHAR , BYTEPOINTER)
			          (MOVE CHAR , @ CASEPTR)   (* ASSUMES THAT (= CHAR 2))
			          (CAIN CHAR , 37Q)
			          (JRST SLIDEDOWN)
			      LOADSTRCHAR+3
			          (MOVEM CHAR , STRCHAR (I))
			          (SOJG I , LOADSTRCHAR)    (* now STRCHAR array is set up!)
			          (JRST SETUPDELTA1)
			      SLIDEDOWN                     (* slide STRCHAR down by one to add CR/LF)
			          (= SLIDEPTR 5)
			          (= I+1 6)
			          (AOS SLIDEPTR , STRCHARSMAX)
			          (CAILE SLIDEPTR , 136Q)
			          (JRST TOOLONG)
			          (MOVE I+1 , I)
			          (ADDI I+1 , 1)
			      SLIDELOOP
			          (CAMG SLIDEPTR , I+1)
			          (JRST WRITECRLF)
			          (MOVE CHAR , (SUB1 STRCHAR)
					(SLIDEPTR))
			          (MOVEM CHAR , STRCHAR (SLIDEPTR))
			          (SOJA SLIDEPTR , SLIDELOOP)
			      WRITECRLF
			          (MOVEI CHAR , 15Q)
			          (MOVEM CHAR , STRCHAR (I+1))
			          (MOVEI CHAR , 12Q)
			          (JRST LOADSTRCHAR+3)
			      SETUPDELTA1                   (* set up DELTA1 array)
			          (= I 3)
			          (= I-1 4)
			          (= CHAR 2)
			          (MOVE I , STRCHARSMAX)
			          (MOVEM I , DELTA1 (0))
			          (MOVE 1 , BLTPAIR)
			          (BLT 1 , @ DELTA1LAST)    (* now every location in DELTA1 is set to STRCHARSMAX)
			          (MOVEI I-1 , -1 (I))
			      SETUPDELTA1LOOP
			          (MOVE CHAR , STRCHAR (I))
			          (MOVEM I-1 , DELTA1 (CHAR))
			          (MOVE I , I-1)
			          (SOJGE I-1 , SETUPDELTA1LOOP)
			          (MOVE CHAR , (ADD1 STRCHAR)
					(0))
			          (MOVEI I-1 , 1750Q)
			          (MOVEM I-1 , DELTA1 (CHAR))
                                                            (* so now DELTA1 is set up!)
			      SETUPDELTA2                   (* This routine sets up the DELTA2 array.)
			          (= STRBEG 1)
			          (= J 2)
			          (= K 3)
			          (= PATMAX 4)
			          (= STREND 5)
			          (= CHAR 6)
			          (MOVEI STREND , 1)
			          (MOVEI STRBEG , 1)
			          (MOVEI PATMAX , 1)
			      SETUPDELTA2LOOP
			          (CAMN PATMAX , STRCHARSMAX)
			          (JRST SEARCH)
			      FINDPAT
			          (CAML STREND , STRCHARSMAX)
			          (AOJA STREND , FINDPATRET)
			          (MOVE CHAR , (ADD1 STRCHAR)
					(STREND))
			          (CAMN CHAR , STRCHAR (PATMAX))
			          (AOJA STREND , FINDPATRET)
			      FINDLOOP
			          (ADDI STRBEG , 1)
			          (MOVE K , STRBEG)
			          (MOVEI J , 1)
			      MATCHLOOP
			          (CAMLE J , PATMAX)
			          (JRST FOUND)
			          (CAMLE K , STRCHARSMAX)
			          (JRST FOUND)
			          (MOVE CHAR , STRCHAR (J))
			          (CAME CHAR , STRCHAR (K))
			          (JRST FINDLOOP)
			          (ADDI J , 1)
			          (AOJA K , MATCHLOOP)
			      FOUND
			          (MOVE STREND , PATMAX)
			          (ADD STREND , STRBEG)
			          (SUBI STREND , 1)
			      FINDPATRET
			          (MOVEM STREND , (ADD1 DELTA2)
					 (PATMAX))
			          (AOJA PATMAX , SETUPDELTA2LOOP)
			      SEARCH                        (* This sets up the ACs and the stack for the actual 
							    search)
			          (MOVE 1 , STRCHARSMAX)
			          (MOVEM 1 , (IPLUS 137Q STRCHAR)
					 (0))
			      SEARCH+2
			          (CQ (VAG (FIX FILEEND)))
			          (SUBI 1 , 1)
			          (MOVEM 1 , EOFMAXBYTE)
			          (CQ (VAG (FIX FILESTART)))
			          (SUBI 1 , 1)
			          (ADD 1 , STRCHARSMAX)
			          (CAMLE 1 , EOFMAXBYTE)
			          (JRST LOSE)
			          (MOVEM 1 , INITFILEBYTE)
			          (CQ (OPNJFN FILENAME))
			          (SUBI 1 , ASZ)
			          (= HIGHJFN 6)
			          (HRLI HIGHJFN , 0 (1))
			          (MOVE 1 , INITFILEBYTE)
			          (IDIVI 1 , 5000Q)
			          (= FIRSTPAGE 1)
			          (= FIRSTBYTE 2)
			          (HRR HIGHJFN , FIRSTPAGE)
			          (MOVEM HIGHJFN , INITJFNPGNO)
			          (MOVEM HIGHJFN , JFNPGNO)
			          (IDIVI FIRSTBYTE , 276Q)
			          (= QUOTIENT 2)
			          (= REMAINDER 3)
			          (MOVEM REMAINDER , INITFILEBYTE)
			          (IMULI QUOTIENT , 46Q)
			          (ADD QUOTIENT , SCRATCHPG)
			          (MOVEM QUOTIENT , INITFILEWORD)
			          (MOVE 1 , EOFMAXBYTE)
			          (IDIVI 1 , 5000Q)
			          (= LASTPAGE 1)
			          (= LASTBYTE 2)
			          (HRR HIGHJFN , LASTPAGE)
			          (MOVEM HIGHJFN , EOFJFNPGNO)
			          (IDIVI LASTBYTE , 276Q)
			          (ADDI REMAINDER , 1)
			          (MOVEM REMAINDER , EOFMAXBYTE)
			          (IMULI QUOTIENT , 46Q)
			          (ADD QUOTIENT , SCRATCHPG)
			          (MOVEM QUOTIENT , EOFMAXWORD)
			          (MOVE 1 , SCRATCHPG)
			          (ADDI 1 , 756Q)
			          (MOVEM 1 , MAXWORD)
			          (MOVEI 1 , 132Q)
			          (MOVEM 1 , EOPMAXBYTE)
			          (MOVE 1 , JFNPGNO)
			          (JRST GETFIRSTPAGE)       (* This is the real search!)
			          (= CHAR 2)
			          (= D1 1)
			          (= FILEWORD 3)
			          (= MAXBYTE 4)
			          (= FILEBYTE 5)
			          (= J 6)
			      FASTLOOP
			          (LDB CHAR , BP (FILEBYTE))
			          (MOVE CHAR , @ CASEPTR)
			      FASTLOOP+1
			          (ADD FILEBYTE , DELTA1 (CHAR))
			      FASTLOOP+2
			          (CAMGE FILEBYTE , MAXBYTE)
			          (JRST FASTLOOP)
			          (CAILE FILEBYTE , 764Q)
			          (JRST SLOWLOOPSETUP)
			          (CAMN FILEWORD , MAXWORD)
			          (JRST GETNEXTPAGE)
			          (SUBI FILEBYTE , 276Q)
			          (ADDI FILEWORD , 46Q)
			      SWITCHMAX?
			          (CAMN FILEWORD , MAXWORD)
			          (MOVE MAXBYTE , EOPMAXBYTE)
			          (JRST FASTLOOP)
			      SLOWLOOPSETUP
			          (SUBI FILEBYTE , 1750Q)
			          (MOVEI J , 2)
			      WON?(CAMLE J , STRCHARSMAX)
			          (JRST WIN)
			          (SUBI FILEBYTE , 1)
			          (JUMPL FILEBYTE , BACKOVER)
			      SLOWLOOP
			          (LDB CHAR , BP (FILEBYTE))
			          (MOVE CHAR , @ CASEPTR)
			          (CAMN CHAR , STRCHAR (J))
			          (AOJA J , WON?)
			          (MOVE D1 , DELTA1 (CHAR))
			          (CAIN D1 , 1750Q)
			          (JRST USEDELTA2)
			          (CAML D1 , DELTA2 (J))
			          (JRST FASTLOOP+1)
			      USEDELTA2
			          (ADD FILEBYTE , DELTA2 (J))
			          (JRST FASTLOOP+2)
			      BACKOVER
			          (CAMN FILEWORD , SCRATCHPG)
			          (JRST GETPREVPAGE)
			          (MOVEI MAXBYTE , 276Q)
			          (MOVEI FILEBYTE , 275Q)
			          (SUBI FILEWORD , 46Q)
			          (JRST SLOWLOOP)
			      GETNEXTPAGE

          (* Steps to next page of file. Increments JFNPGNO by one and stores it. Leaves FILEWORD set to the beginning of the 
	  scratch page, and FILEBYTE set to proper displacement, given its current value. The routine only touches ACs 1 2 and
	  3; It assumes FILEBYTE is not one of those three!)


			          (AOS 1 , JFNPGNO)
			          (CAMLE 1 , EOFJFNPGNO)
			          (JRST LOSE)
			      GETFIRSTPAGE
			          (MOVE 2 , SCRATCHPG)
			          (LSH 2 , -11Q)
			          (HRLI 2 , 400000Q)
			          (MOVSI 3 , 160000Q)
			          (JSYS 56Q)
			          (SUB FILEBYTE , MAXBYTE)
			          (MOVEI MAXBYTE , 276Q)
			          (CAMG 1 , INITJFNPGNO)
			          (JRST SETUPFIRSTPG)
			          (MOVE FILEWORD , SCRATCHPG)
			          (CAMGE 1 , EOFJFNPGNO)
			          (JRST FASTLOOP)
			      SETUPLASTPG                   (* Set up for the final page.
							    This means setting the MAXWORD and EOPMAXBYTE fields)
			          (MOVE 1 , EOFMAXBYTE)
			          (MOVEM 1 , EOPMAXBYTE)
			          (MOVE 1 , EOFMAXWORD)
			          (MOVEM 1 , MAXWORD)
			          (JRST SWITCHMAX?)         (* now go see if its already time to use new MAXBYTE)
			      SETUPFIRSTPG                  (* Set up for the first page.
							    This means setting the FILEWORD and FILEBYTE fields.)
			          (SETOM INITJFNPGNO)
			          (MOVE FILEWORD , INITFILEWORD)
			          (MOVE FILEBYTE , INITFILEBYTE)
			          (CAME 1 , EOFJFNPGNO)

          (* make an explicit check to see if this is also the last page. If so, go set it up. Otherwise, go see if its time 
	  to switch to the new MAXBYTE -- ie, is new FILEWORD already on MAXWORD? Doing the EOF check here lets the normal 
	  case avoid checking the SWITCHMAX? condition.)


			          (JRST SWITCHMAX?)
			          (JRST SETUPLASTPG)
			      GETPREVPAGE                   (* this code is used by the slow loop to backup to the 
							    previous page.)
			          (SOS 1 , JFNPGNO)
			          (MOVE 2 , SCRATCHPG)
			          (LSH 2 , -11Q)
			          (HRLI 2 , 400000Q)
			          (MOVE 3 , = 160000000000Q)
			          (JSYS 56Q)
			          (MOVEI MAXBYTE , 132Q)
			          (MOVEM MAXBYTE , EOPMAXBYTE)
			          (MOVE FILEWORD , SCRATCHPG)
			          (ADDI FILEWORD , 756Q)
			          (MOVEI FILEBYTE , 131Q)
			          (MOVEM FILEWORD , MAXWORD)
			          (JRST SLOWLOOP)
			      EASYWIN
			          (CQ FILESTART)
			          (JRST EXIT)
			      TOOLONG
			          (CQ -1)
			          (JRST EXIT)
			      LOSE(MOVE 1 , KNIL)
			          (JRST EXIT)
			      WIN (MOVE 1 , JFNPGNO)
			          (ANDI 1 , 777777Q)
			          (IMULI 1 , 5000Q)
			          (SUB FILEWORD , SCRATCHPG)
			          (IMULI FILEWORD , 5)
			          (ADD 1 , FILEWORD)
			          (ADD 1 , FILEBYTE)
			          (MOVEM 1 , INITFILEBYTE)
			          (CQ TAIL)
			          (MOVE 2 , 1)
			          (MOVE 1 , INITFILEBYTE)
			          (CAME 2 , KNIL)
			          (ADD 1 , STRCHARSMAX)
			          (CQ (LOC (AC))))))
          (COND
	    (ANS (COND
		   ((MINUSP ANS)
		     (GO TRYFILEPOS)))
		 (SETFILEPTR FILENAME ANS)))
          (RETURN ANS)
      TRYFILEPOS
          (RETURN (FILEPOS PATTERN FILENAME FILESTART FILEEND SKIP TAIL CASEARRAY)))))

(FFILEPOSUNPMAP
  (LAMBDA (PG)                                              (* lmm "25-SEP-78 03:41")
    (JS PMAP 777777777777Q (XWD 400000Q (LRSH (LOC PG)
					      11Q))
	(XWD 160000Q 0))
    NIL))

(FILEPOS
  (LAMBDA (PATTERN FILENAME FILESTART FILEEND SKIP TAIL CASEARRAY)
                                                            (* lmm "25-OCT-78 00:43")

          (* FILEPOS is a sort of STRPOS for searching a file for the next occurrence of a specified character sequence.
	  The value of FILEPOS is the byte address of the first character of the sequence found, or NIL if not found.
	  -
	  -
	  X is the sequence to look for, and may be any type; a string is made if necessary. -
	  FILE is the file to be searched, and must have been opened by INFILE or IOFILE. The primary input will be used if 
	  FILE is NIL. If FILEPOS returns NIL, the file is not affected in any way: your next read, PEEKC or whatever 
	  (including writes if FILE open for BOTH) will have exactly the same effect it would have had if the FILEPOS hadn't 
	  been called. Otherwise, FILEPOS resets the disk pointer so that the next character read will be the first character 
	  of the sequence matched, i.e. the character addressed by the value returned from FILEPOS. -
	  START is the byte address on FILE at which to begin looking, which is the current value of the file pointer 
	  (i.e. the place you have 'read to') if NIL. -
	  END is the byte address at which to give up. If END is not given, the file will be searched to the EOF.
	  A match will succeed only if all of the characters in the matching sequence on the disk are before END.
	  -
	  -
	  SKIP is a dummy-match character a la STRPOS. -
	  TAIL is also a la STRPOS, causing value of return, and new file position, to be address of first character after 
	  matched sequence instead of address of first character matched.)


    (PROG ((PAT (OR (STRINGP PATTERN)
		    (COND
		      ((LITATOM PATTERN)
			(CDR (WORDOFFSET PATTERN 2)))
		      (T (MKSTRING PATTERN))))))
          (RETURN (MC (IPATPT TBACKUP BACKUP OLDFPTR SKIPCHAR NCHARSMONE FIRSTPAT FILEND OLDPOS 
			      CASEPTR PATCASE)
		      (= FILCNT 3)
		      (= PATBYT 4)
		      (= PATPTR 5)
		      (= PATCNT 6)
		      (CQ (COND
			    (SKIP (CHCON1 SKIP))
			    (T -1)))
		      (SUBI 1 , ASZ)
		      (MOVEM 1 , SKIPCHAR)
		      (CQ FILENAME)
		      (FASTCALL FGFPTR)                     (* getfileptr. Leaves file-index in FX.)
		      (MOVEM 1 , OLDPOS)
		      (MOVEM 1 , OLDFPTR)
		      (HLLOS FCHAR (FX))                    (* clear 1char buffer)
		      (HRRZ 1 , FILEN (FX))                 (* get JFN)
		      (MOVNI 2 , 1)                         (* set position to end)
		      (JS SFPTR)
		      (JRST JSYSERR)
		      (JS RFPTR)                            (* RFPTR records the address of EOF because of SFPTR 
							    above. Set FILEND to EOF,)
		      (JRST JSYSERR)
		      (MOVEM 2 , FILEND)
		      (CQ FILEEND)
		      (CAMN 1 , KNIL)                       (* But if END given,)
		      (JRST ONE 1)
		      (CQ (VAG (FIX (AC))))
		      (CAMG 1 , FILEND)                     (* And we don't camg to a bad end,)
		      (JUMPGE 1 , ONE)
		      (CQ (QUOTE "ATTEMPT TO READ PAST END OF FILE"))
		      (JRST ERRIT)
		  ONE (MOVEM 1 , FILEND)                    (* Then set FILEND to it instead.)
		      (CQ FILESTART)                        (* Initialize OLDFPTR to START if given, else OLDPOS.
							    Search will begin at this address.)
		      (CAMN 1 , KNIL)
		      (JRST TWO)
		      (CQ (VAG (FIX (AC))))
		      (MOVEM 1 , OLDFPTR)
		  TWO (CQ CASEARRAY)
		      (MOVEI 2 , 2 (1))
		      (HRLI 2 , 2)
		      (CAMN 1 , KNIL)
		      (MOVEI 2 , 2)
		      (MOVEM 2 , CASEPTR)

          (* CASEPTR is either (2 ,, case+2) or else 2; Thus (MOVE 2 , @ CASEPTR) will either leave 2;
	  alone or set it to the appropriate word from casearray)


		      (HRLI 2 , PATBYT)
		      (CAMN 1 , KNIL)
		      (MOVEI 2 , PATBYT)
		      (MOVEM 2 , PATCASE)                   (* PATCASE is set up also to be either 
							    (PATBYT ,, CASE+2) or PATBYT)
		      (CQ PAT)
		      (FASTCALL UPATM)                      (* UPATM takes a string or pname in ac1, returns a PDP10
							    byte pointer in ac3, NCHARS in ac4.)
		      (ILDB 2 , 3)
		      (MOVE 2 , @ CASEPTR)                  (* Initialize FIRSTPAT to first pattern byte.
							    Reset to -1 by initialization for SKIPCHAR if they 
							    match.)
		      (MOVEM 2 , FIRSTPAT)
		      (SUBI 4 , 1)                          (* Initialize NCHARSMONE to NCHARS of pattern minus one,
							    i.e. NCHARS of pattern after FIRSTCHAR removed.)
		      (MOVEM 3 , IPATPT)
		      (MOVEM 4 , NCHARSMONE)
		      (MOVE 1 , SKIPCHAR)
		      (CAMN 1 , FIRSTPAT)
		      (SETOM FIRSTPAT)                      (* Reset FIRSTPAT to -1 if it matches skip character.)
		      (HRRZ 1 , FILEN (FX))                 (* Only ac that needs initializing is jfn in ac 1)
                                                            (* Start of main algorithm.)
		  RESET
		      (MOVE 2 , OLDFPTR)                    (* Go back to OLDFPTR on disk.)
		      (JS SFPTR)
		      (JRST JSYSERR)
		      (MOVE FILCNT , FILEND)                (* Compute FILCNT, bytes-to-go on disk.)
		      (SUB FILCNT , 2)
		      (MOVE PATBYT , FIRSTPAT)
		  SCAN(JSP 7 , READBYTE)                    (* Read a disk byte. Fail exit from algorithm is in 
							    READBYTE.)
		      (CAME 2 , PATBYT)                     (* If the byte, returned in 2, matches,)
		      (JUMPGE PATBYT , SCAN)                (* Or if FIRSTPAT was skip char, set up match procedure.
							    Otherwise, go back and keep scanning.)
		      (MOVE PATPTR , IPATPT)                (* Set up ac's for match routine.)
		      (MOVE PATCNT , NCHARSMONE)
		      (JS RFPTR)                            (* Save current file position.)
		      (JRST JSYSERR)
		      (MOVEM 2 , OLDFPTR)
		      (MOVE 2 , TBACKUP)
		      (MOVEM 2 , BACKUP)

          (* Also save flag for WIN case. BACKUP is numberstack word, gets set only here, each time we try another possible 
	  match. BCKUP is reset by each call to READBYTE. The matcher uses READBYTE, so must save BCKUP here.)


		  MATCH
		      (SOJL PATCNT , WIN)                   (* Success exit from main algorithm.
							    Control count on pattern runs out.)
		      (ILDB PATBYT , PATPTR)                (* Fetch next pattern byte.)
		      (JSP 7 , READBYTE)
		      (CAME PATBYT , SKIPCHAR)
		      (CAMN 2 , @ PATCASE)
		      (JRST MATCH)
		      (JRST RESET)                          (* End of main algorithm)

          (* READBYTE is the routine to get one character from disk. Must force FILEPOS to return NIL if out of bounds;
	  RETNIL does that. Must convert carriage-return/linefeed sequences to EOL's without losing control count.
	  Must check after seeing zero byte to see if file really ok; UNXEOF does that.)


		  READBYTE
		      (SOJL FILCNT , RETNIL)
		      (SETZM TBACKUP)
		      (JS BIN)
		      (MOVE 2 , @ CASEPTR)
		      (CAIE 2 , 15Q)
		      (JRST 0 (7))
		      (SOJL FILCNT , RETNIL)
		      (JS BIN)
		      (HRRZI 2 , 37Q)
		      (SETOM TBACKUP)
		      (JRST 0 (7))
		  JSYSERR
		      (CQ (QUOTE "ERROR IN FILEPOS"))
		      (JRST ERRIT)                          (* RETNIL is called by READBYTE to force return of NIL.
							    Restore file to original position and pick up NIL for 
							    value.)
		  RETNIL
		      (MOVE 2 , OLDPOS)
		      (HRRZ 1 , FILEN (FX))
		      (JS SFPTR)
		      (JRST JSYSERR)
		      (CQ NIL)
		      (JRST OUT)

          (* WIN is success return. If TAIL is NIL, reset to OLDFPTR and back up over the disk byte which matched FIRSTPAT.
	  But if BACKUP is on, FIRSTPAT was matched by two bytes, an EOL pair, so back up one more.)


		  WIN (VAR (HRRZ 2 , TAIL))
		      (CAME 2 , KNIL)
		      (JRST WIN1)
		      (MOVE 2 , OLDFPTR)
		      (SUBI 2 , 1)
		      (SKIPE BACKUP)
		      (SUBI 2 , 1)
		      (JS SFPTR)
		      (JRST JSYSERR)
		  WON (MOVE 1 , 2)
		      (FASTCALL MKN)
		      (JRST OUT)                            (* WIN1 when TAIL is non-nil.
							    File is at the correct position already.
							    Just get position and return it.)
		  WIN1(JS RFPTR)
		      (JRST JSYSERR)
		      (JRST WON)                            (* ERRIT is error routine. Restore old file position 
							    before calling ERROR. Message is in ac 1)
		  ERRIT
		      (PUSHP)
		      (MOVE 2 , OLDPOS)
		      (HRRZ 1 , FILEN (FX))
		      (JS SFPTR)
		      (JRST JSYSERR)
		      (POPP)
		      (CQ (ERROR (AC)
				 (QUOTE "")))
		  OUT)))))

(CASEARRAY
  [LAMBDA NIL                      (* lmm "22-MAY-80 19:53")
    (PROG ((AR (ARRAY 128 128)))
          (FOR I FROM 0 TO 127 DO (SETCASEARRAY AR I I))
          (RETURN AR])

(SETCASEARRAY
  [LAMBDA (CASEARRAY CHAR N)       (* lmm "22-MAY-80 19:37")
    (SETA CASEARRAY (ADD1 CHAR)
	  N])

(GETCASEARRAY
  [LAMBDA (CASEARRAY CHAR)         (* lmm " 1-JUN-84 23:20")
    (ELT CASEARRAY (ADD1 CHAR])
)

(RPAQQ FFILEPOSMIN 10)

(RPAQQ FFILEPOSINITIALIZEFLG T)

(ADDTOVAR GAINSPACEFORMS [(NULL FFILEPOSINITIALIZEFLG)
			  "discard FFILEPOS initialization"
			  (PROGN (SETQ FFILEPOSINITIALIZEFLG T)
				 (SETQ FFILEPOSDELTA1 (SETQ FFILEPOSSTRCHAR (SETQ FFILEPOSDELTA2
										  (SETQ 
										 FFILEPOSBYTEPTRS])
(DECLARE: DONTCOPY 

(ADDTOVAR PRETTYEQUIVLST (MC . ASSEMBLE))
EVAL@COMPILE 

(PUTPROPS MC MACRO (X
	    (APPLY*
	      [FUNCTION (LAMBDA (X)

          (* This is just the body of MCEXPAND from <MOORE>ASSEMBLE. I have done it this way, rather than put MCEXPAND and 
	  MCSUBST into a DECLARE: in the FFILEPOS file because a "bug" in the declare logic causes those fns to be compiled 
	  and loaded, and hence they would be loaded into the standard system. This avoids that at the expense of having to 
	  interpret these fns when FFILEPOS is compiled.)


		  (PROG (ALIST NREFCNT NREFS NREFINITIALIZE NREFARRAYS BODY)
		        [SETQ NREFS (for VAR in (CAR X) collect (COND
								  ((LISTP VAR)
								    (CAR VAR))
								  (T VAR]
		        (SETQ NREFCNT (LENGTH NREFS))
		        (SETQ ALIST (for VAR in NREFS as I from 0 by -1 collect (CONS VAR I)))
		        [SETQ NREFINITIALIZE (for VAR in (CAR X) as I from 0 by -1
						join (COND
						       ((LISTP VAR)
							 (LIST (LIST (QUOTE CQ)
								     (CADR VAR))
							       (LIST (QUOTE NREF)
								     (LIST (QUOTE MOVEM)
									   1
									   (QUOTE ,)
									   I]
		        [SETQ BODY
			  (PROG (INDEX ARRAYLOC)
                                   (* This is just the body of MCSUBST from <MOORE>ASSEMBLE, applied to 
				   (CDR X) ALIST and NREFS)
			        (RETURN
				  (for STMT in (CDR X)
				     collect
				      [SETQ STMT (SUBLIS ALIST (COND
							   ((for VAR in NREFS
							       thereis (AND (NEQ (CAR STMT)
										 (QUOTE *))
									    (MEMB VAR STMT)))
							     (LIST (QUOTE NREF)
								   STMT))
							   (T STMT]
				      (COND
					[[AND (NEQ (CAR STMT)
						   (QUOTE NREF))
					      [LISTP (SETQ INDEX (CAR (LAST STMT]
					      (NUMBERP (SETQ INDEX (CAR INDEX)))
					      (LISTP (SETQ ARRAYLOC (CADR (LASTN STMT 2]
					  (SETQ ARRAYLOC (LIST (QUOTE LOGOR)
							       (LLSH INDEX 18)
							       ARRAYLOC))
					  [SETQ ARRAYLOC
					    (OR (CDR (SASSOC ARRAYLOC NREFARRAYS))
						(PROGN (SETQ NREFARRAYS (CONS (CONS ARRAYLOC
										    (IMINUS NREFCNT))
									      NREFARRAYS))
						       [SETQ NREFINITIALIZE
							 (NCONC NREFINITIALIZE
								(LIST (LIST (QUOTE CQ)
									    (LIST (QUOTE VAG)
										  ARRAYLOC))
								      (LIST (QUOTE NREF)
									    (LIST (QUOTE MOVEM)
										  1
										  (QUOTE ,)
										  (IMINUS NREFCNT]
						       (SETQ NREFCNT (ADD1 NREFCNT))
						       (IMINUS (SUB1 NREFCNT]
					  (LIST (QUOTE NREF)
						(APPEND (CAR (LASTN STMT 2))
							(LIST (QUOTE @)
							      ARRAYLOC]
					(T STMT))
				     unless (AND (LISTP STMT)
						 (EQ (CAR STMT)
						     (QUOTE =))
						 (SETQ ALIST (CONS (CONS (CADR STMT)
									 (CADDR STMT))
								   ALIST]
		        (RETURN (APPEND [COND
					  ((ZEROP NREFCNT)
					    (QUOTE (ASSEMBLE NIL)))
					  (T (LIST (QUOTE ASSEMBLE)
						   NIL
						   (CONS (QUOTE PUSHNN)
							 (for I from 1 to NREFCNT
							    collect (QUOTE (0]
					NREFINITIALIZE BODY (COND
					  ((ZEROP NREFCNT)
					    (QUOTE (EXIT)))
					  (T (LIST (QUOTE EXIT)
						   (LIST (QUOTE POPNN)
							 NREFCNT]
	      X)))

(FILESLOAD (SYSLOAD FROM LISPUSERS)
	   CJSYS)

(DECLARE: DOEVAL@COMPILE DONTCOPY

(ADDTOVAR GLOBALVARS FFILEPOSDELTA1 FFILEPOSSTRCHAR FFILEPOSDELTA2 FFILEPOSBYTEPTRS 
	  FFILEPOSINITIALIZEFLG FFILEPOSSETFILEPTRFLG)
)
)
(PUTPROPS FFILEPOS COPYRIGHT ("Xerox Corporation" 1984))
(DECLARE: DONTCOPY
  (FILEMAP (NIL (1068 26126 (FFILEPOS 1080 . 16504) (FFILEPOSUNPMAP 16508 . 16722) (FILEPOS 16726 . 
25647) (CASEARRAY 25651 . 25867) (SETCASEARRAY 25871 . 25999) (GETCASEARRAY 26003 . 26123)))))
STOP
