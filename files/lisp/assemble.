(FILECREATED "14-MAY-82 22:49:32" <NEWLISP>ASSEMBLE.;1 31198  

     changes to:  PFCOPYBYTES

     previous date: "21-NOV-79 17:49:59" <LISP>ASSEMBLE.;25)


(PRETTYCOMPRINT ASSEMBLECOMS)

(RPAQQ ASSEMBLECOMS ((DECLARE: FIRST EVAL@COMPILE (P [OR (GETPROP (QUOTE UCTCTP)
								  (QUOTE COREVAL))
							 (PUTPROP (QUOTE UCTCTP)
								  (QUOTE COREVAL)
								  (ADD1 (GETPROP (QUOTE CTCTP)
										 (QUOTE COREVAL]
						     (* relies on the fact that UCTCTP is right after 
							CTCTP)
						     (OR (GETPROP (QUOTE UCTVAR-UCTCT)
								  (QUOTE COREVAL))
							 (PUTPROP (QUOTE UCTVAR-UCTCT)
								  (QUOTE COREVAL)
								  9))
						     (* This whole P clause can be removed if UCTCTP 
							and UCTVAR-UCTCT are made corevals)))
		     (FNS * ASSEMBLEFNS)
		     (BLOCKS * ASSEMBLEBLOCKS)
		     [P (PUTDQ? DOMAPPAGE [LAMBDA (FILE PAGE#)
						  (JSYS 56Q (LOGOR (LLSH (OR (FIXP FILE)
									     (OPNJFN FILE))
									 22Q)
								   (LOGAND 777777Q PAGE#))
							-377777777001Q 140000000000Q)
						  (VAG 261632])
			(PUTDQ? MAPPAGE (LAMBDA (PAGE# FILE)
						(DOMAPPAGE PAGE# FILE]
		     (DECLARE: DOEVAL@LOAD DOEVAL@COMPILE DONTCOPY (PROP MACRO GETSYNSK))))
(DECLARE: FIRST EVAL@COMPILE 
[OR (GETPROP (QUOTE UCTCTP)
	     (QUOTE COREVAL))
    (PUTPROP (QUOTE UCTCTP)
	     (QUOTE COREVAL)
	     (ADD1 (GETPROP (QUOTE CTCTP)
			    (QUOTE COREVAL]
(* relies on the fact that UCTCTP is right after CTCTP)
(OR (GETPROP (QUOTE UCTVAR-UCTCT)
	     (QUOTE COREVAL))
    (PUTPROP (QUOTE UCTVAR-UCTCT)
	     (QUOTE COREVAL)
	     9))
(* This whole P clause can be removed if UCTCTP and UCTVAR-UCTCT are made corevals)
)

(RPAQQ ASSEMBLEFNS (COUNT COPYBYTES PFCOPYBYTES SKREAD SKATOM SKMACRO SKSTR SKPAREN SKBRACKET BINSK 
			  SETFCHAR SETLASTC MAPHASH DOBE DISMISS FNOPENADR GETINTERRUPT SETINTERRUPT 
			  SETINT1 DISINT))
(DEFINEQ

(COUNT
  [LAMBDA (X)                                   (* lmm "10-NOV-77 00:27"
)

          (* the old definition of COUNT was really god-awful;
	  this is about 3 times faster)


    (LOC (ASSEMBLE NIL
	           (CQ X)
	           (MOVEI 2 , 0)
	           (PUSHJ CP , COUNT1)
	           (MOVE 1 , 2)
	           (JRST OUT)
	       COUNT1                           (* subroutine: add to 2 
						the (COUNT 1))
	           (STE (QUOTE LISTT))
	           (RET)                        (* not a list, return)
	       A   (PUSHP)
	           (CAR1)
	           (STN (QUOTE LISTT))
	           (PUSHJ CP , COUNT1)
	           (POPP)
	           (CDR1)
	           (AOJA 2 , COUNT1)
	       OUT])

(COPYBYTES
  [LAMBDA (SRCFIL DSTFIL START END)                         (* rmk: "21-NOV-79 17:49")

          (* add options to COPYBYTES: # of bytes to copy -
	  if both START and END are NIL, then infinite (until end of file) -
	  if END is NIL then START is byte count; else start at START and go to END -
	  END can be -1, meaning that START is starting byte position -
	  Note that copying between locations on the same file is now permitted.)


    (ASSEMBLE NIL
	      (PUSHNN NIL NIL NIL NIL NIL NIL NIL)

          (* NP has on it: -
	  0 byte poiner -
	  -1 #bytes/page -
	  -2 output JFN -
	  -3 input JFN -
	  -4 total byte count -
	  -5 temporary -
	  -6 Saves current file position for same jfn)


	      (CQ SRCFIL)
	      (FASTCALL IFSET)                              (* set file for input; returns file index in FX, causes 
							    FILE NOT OPEN if not open for input)
	      (SKIPG 1 , FILEN (FX))                        (* can't copy from strings)
	      (JRST SRCERR)
	      (NREF (MOVEM 1 , -3))                         (* save input JFN)
	      (CQ2 DSTFIL)
	      (FASTCALL OFSET)

          (* set file for output; takes file in AC2 ! and returns file index in FX -
	  We save FX until after function calls, then restore it)


	      (NREF (MOVEM FX , -5))                        (* Store dest FX temporarily)
	      (MOVE 1 , FILEN (FX))                         (* Output jfn)
	      (NREF (MOVEM 1 , -2))                         (* save output JFN)
	      (NREF (CAME 1 , -3))                          (* Source=Dest?)
	      (JRST SETUP)
	      [CQ (VAG (FIX (GETFILEPTR SRCFIL]
	      (NREF (MOVEM 1 , -6))                         (* Current position is where storing begins)
	  SETUP
	      [CQ (VAG (FIX (COND
			      [END (SETFILEPTR SRCFIL START)
				   (COND
				     ((EQ END -1)
				       (SETQ START NIL)
				       177777777777Q)
				     (T (IDIFFERENCE END START]
			      (T (OR START 177777777777Q]
	      (JUMPG 1 , OK)
	      (JUMPE 1 , DONE)
	      (CQ (ERROR "END BEFORE START IN COPYBYTES" (LIST START END)))
	  OK  (NREF (MOVEM 1 , -4))                         (* Total byte count)
	      (NREF (MOVE 1 , -3))                          (* Source jfn)
	      (JSYS 45Q)                                    (* RFBSZ to get byte size for this opening of file)
	      (JFCL)                                        (* RFBSZ skips on TOPS20)
	      (MOVEI 3 , 44Q)
	      (IDIV 3 , 2)                                  (* #bytes/word)
	      (LSH 3 , 11Q)                                 (* 3 is now #bytes/page)
	      (NREF (MOVEM 3 , -1))                         (* save # bytes on the page)
	      (LSH 2 , 30Q)
	      (TLO 2 , 440000Q)                             (* make byte pointer with right byte size)
	      (NREF (MOVEM 2 , 0))                          (* save byte pointer)
	      (CQ (MAPPAGE -1 777777Q))                     (* get clean page to diddle with)
	      (NREF (MOVE FX , -5))                         (* restore FX for OUT-TO-TTY test)
	      (NREF (HRRM 1 , 0))                           (* and set it in the byte pointer)
	      (JRST LOOP)                                   (* and start)
	  SAMEJFN
	      (JSYS 43Q)                                    (* Input file position in 2)
	      (JRST SRCERR)
	      (NREF (EXCH 2 , -6))                          (* Save input, get output position)
	      (JSYS 27Q)                                    (* Reset it)
	      (JRST DSTERR)
	      (NREF (MOVE 2 , 0))                           (* Get bytepointer)
	      (JSYS 53Q)                                    (* SOUT)
	      (JUMPN 3 , DSTERR)
	      (NREF (SKIPG 4 , -4))                         (* Redundant test for positive remaining bytes before 
							    resetting file position, so at end, position is at point
							    of last IO operations)
	      (JRST DONE)
	      (JSYS 43Q)                                    (* Output position)
	      (JRST DSTERR)
	      (NREF (EXCH 2 , -6))                          (* Save output get input)
	      (JSYS 27Q)                                    (* set position)
	      (JRST SRCERR)
	      (JRST LOOP)
	  OUT-TO-TTY
	      (ILDB 1 , 2)                                  (* get char from byte pointer in 2)
	      (PUSHJ CP , FOUT)                             (* and send to output file (as in FX))
	      (AOJL 3 , OUT-TO-TTY)                         (* 3 has negative of # bytes to copy)
	  LOOP(NREF (SKIPG 1 , -4))                         (* # of bytes remaining positive?)
	      (JRST DONE)                                   (* no, done)
	      (NREF (MOVN 3 , -1))                          (* get negative of # of bytes on pae)
	      (ADD 1 , 3)                                   (* and reduce total by that amount)
	      (JUMPL 1 , LAST-TIME)                         (* if less than 1 page left, do special)
	      (NREF (MOVEM 1 , -4))                         (* else, store back reduced count for next time)
	      (JRST HIT-IT)
	  LAST-TIME
	      (NREF (MOVN 3 , -4))                          (* copy exact number)
	      (NREF (SETZM -4))                             (* and say that there are 0 left)
	  HIT-IT
	      (NREF (MOVEM 3 , -5))                         (* salt away # of bytes to copy)
	      (NREF (MOVE 1 , -3))                          (* get input JFN)
	      (NREF (MOVE 2 , 0))                           (* and byte pointer)
	      (JSYS 52Q)                                    (* SIN)
	      (JUMPE 3 , GOTEM)                             (* did we get all we wanted?)
	      (CQ START)                                    (* if START not given, meant copy until end of file, so 
							    this isn't an error)
	      (CAME 1 , ' NIL)
	      (JRST SRCERR)
	      (NREF (SETZM -4))                             (* say no more left)
	      (NREF (EXCH 3 , -5))                          (* number supposed to copy)
	      (NREF (SUBM 3 , -5))                          (* now 3 has neg of # actually read in)
	      (JUMPE 3 , DONE)                              (* none (i.e. 3 before was same as 3 after))
	  GOTEM
	      (NREF (MOVE 3 , -5))                          (* get back # of bytes for this time)
	      (NREF (MOVE 2 , 0))                           (* get back byte pointer)
	      (CAIG FX , 1)                                 (* FX 0 and 1 are the TTY; need to be handled special 
							    because of DRIBBLE)
	      (JRST OUT-TO-TTY)
	      (NREF (MOVE 1 , -2))                          (* get output JFN)
	      (NREF (CAMN 1 , -3))
	      (JRST SAMEJFN)                                (* Same as source)
	      (JSYS 53Q)                                    (* Different jfns--SOUT)
	      (JUMPE 3 , LOOP)                              (* should have been able to SOUT any that it could SIN)
	  DSTERR
	      (SKIPA 1 , ' T)
	  SRCERR
	      (MOVE 1 , ' NIL)
	      (CQ (ERROR (COND
			   ((AC)
			     SRCFIL)
			   (T DSTFIL))
			 (QUOTE "ERROR IN COPYBYTES")))
	  DONE(POPNN 7))
    T])

(PFCOPYBYTES
  [LAMBDA (SRCFIL DSTFIL START END FLG)
                                   (* lmm "14-MAY-82 22:48")

          (* copy bytes from SRCFIL to DSTFIL a la COPYBYTES, but with the following differences: -
	  (a) CHANGECHAR lines are eliminated -
	  (b) comments are printed a la **COMMENT**FLG -
	  (c) spaces at the beginning of the line are reduced by 1/2 unless FLG is set)


    (PROG [[SRCJ (VAG (OPNJFN (OR SRCFIL (INPUT))
			      (QUOTE INPUT]
	   [DSTJ (VAG (OPNJFN (OR DSTFIL (INPUT))
			      (QUOTE INPUT]
	   (CHANGECODE (VAG (OR (CHCON1 (OR CHANGECHAR "|"))
				0)))
	   (COMMENTCODE (VAG (OR (CHCON1 (OR COMMENTFLG (CHARACTER 0)))
				 0]
          (ASSEMBLE NIL
		    [CQ (VAG (FIX (COND
				    [END (SETFILEPTR SRCFIL START)
					 (COND
					   ((EQ END -1)
					     (SETQ START NIL)
					     177777777777Q)
					   (T (IDIFFERENCE END START]
				    (T (OR START 177777777777Q]
		    (JUMPLE 1 , OUT)
		    (MOVEI 5 , 0 (1))
                                   (* # of bytes to copy)
		    (MOVEI 3 , 0)
                                   (* # of spaces seen)
		    (MOVEI 6 , 0)
                                   (* flag, non-zero if in a string-quote)
		LP  (SOJL 5 , END)
		    (CQ SRCJ)
		    (JSYS 50Q)     (* BIN)
		    (JUMPN 2 , GOTCHAR)
		    (JSYS 24Q)
		    (TLNE 2 , 1000Q)
                                   (* end of file?)
		    (JRST END)
		GOTCHAR
		    (CAIN 2 , 40Q)
                                   (* SPACE)
		DOSP(AOJA 3 , LP)
		    (VAR (HRRZ 4 , CHANGECODE))
		    (CAIN 2 , 0 (4))
		    (JUMPE 6 , CHANGE)
		    (CAIN 2 , 11Q)
                                   (* TAB)
		    (JRST TAB)
		    (CAIN 2 , 15Q)
                                   (* CR)
		    (JRST CR)
		    (CAIN 2 , 45Q)
                                   (* "%%" escape)
		    (JRST ESC)
		    (CAIN 2 , 50Q)
		    (JUMPE 6 , LPAR)
                                   (* treat LPAR special only if not in string quotes)
		    (CAIG 2 , 32Q)
                                   (* ignore control chars)
		    (JRST LP)
		    (CAIN 2 , 37Q)
                                   (* EOL)
		    (JRST CR)
		    (CAIN 2 , 42Q)
		    (TRC 6 , -1)   (* swap "in string quotes" flag)
		ORDC(PUSHJ CP , SPACES)
		OUTCHAR
		    (PUSHJ CP , OUTC)
		    (JRST LP)
		SPACES
		    (JUMPE 3 , R)
		    (PUSHN 2)      (* SPACE)
		    (TLZN 3 , -1)
		    (JRST NOCR)
		    (MOVEI 2 , 37Q)
		    (FASTCALL OUTC)
		NOCR(JUMPE 3 , NOSPCX)
		    (VAR (HRRZ 2 , FLG))
		    (CAMN 2 , KNIL)
		    (IDIVI 3 , 2)
		    (MOVEI 2 , 40Q)
		SLP (PUSHJ CP , OUTC)
		    (SOJG 3 , SLP)
		NOSPCX
		    (POPN 2)
		    (MOVEI 3 , 0)
		R   (RET)
		OUTC(CQ DSTJ)
		    (CAIE 1 , 100Q)
		    (CAIN 1 , 101Q)
		    (JRST TTY)
		    (JSYS 51Q)
		    (RET)
		TTY (MOVEI FX , 1)
		    (MOVEI 1 , 0 (2))
		    (JRST FOUT)
		LPAR(SOJL 5 , END)
                                   (* account char after LPAR)
		    (CQ SRCJ)
		    (JSYS 50Q)
		    (VAR (HRRZ 4 , COMMENTCODE))
		    (CAIE 2 , 0 (4))
		    (JRST NOTCOMMENT)
		    (VAR (HRRZ 4 , **COMMENT**FLG))
		    (CAMN 4 , KNIL)
		    (JRST NOTCOMMENT)
		    (JSYS 50Q)
		    (CAIE 2 , 40Q)
		    (JRST NOTSPA)
		    (PUSHN 5)
		    (PUSHN 6)
		    (CQ (PRIN3 **COMMENT**FLG T))
		    [CQ (VAG (IDIFFERENCE (GETFILEPTR SRCFIL)
					  (PROGN (SKREAD SRCFIL "(* ")
						 (GETFILEPTR SRCFIL]
		    (POPN 6)
		    (POPN 5)
		    (ADD 5 , 1)
		    (MOVEI 3 , 0)
		    (SOJA 5 , LP)
		NOTSPA
		    (CQ SRCJ)
		    (JSYS 42Q)     (* BKJFN)
		    (JFCL)
		    (VAR (HRRZ 2 , COMMENTCODE))
		NOTCOMMENT
		    (PUSHN 2)
		    (FASTCALL SPACES)
		    (MOVEI 2 , 50Q)
		    (PUSHJ CP , OUTC)
		    (POPN 2)
		    (JRST GOTCHAR)
		CHANGE
		    (CQ SRCJ)
		    (JSYS 50Q)
		    (SUBI 5 , 1)
		    (CAIN 2 , 15Q)
		    (AOJA 3 , GOTCHAR)
                                   (* TREAT AS SPACE)
		    (CAIN 2 , 40Q)
		    (AOJA 3 , GOTCHAR)
		    (PUSHN 2)
		    (PUSHJ CP , SPACES)
		    (VAR (HRRZ 2 , CHANGECODE))
		    (PUSHJ CP , OUTC)
		    (POPN 2)
		    (JRST GOTCHAR)
		ESC (PUSHJ CP , SPACES)
		    (PUSHJ CP , OUTC)
		    (CQ SRCJ)
		    (JSYS 50Q)
		    (PUSHJ CP , OUTC)
		    (SOJA 5 , LP)
		CR  (HRLZI 3 , -1)
		    (JRST LP)
		TAB (TRZ 3 , 7)    (* bump to next multiple of 10Q)
		    (ADDI 3 , 10Q)
		    (JRST LP)
		END (PUSHJ CP , SPACES)
		OUT)
          (RETURN T])

(SKREAD
  [LAMBDA (FILE REREADSTRING)                   (* lmm "10-NOV-77 01:20"
)
    (PROG ((ESCFLG (ESCAPE T))
	   (RRSTR (AND REREADSTRING (SUBSTRING REREADSTRING 1 -1)))
	   BUF1 LSTC UNBALFLG SKATOM-LASTC C
	   (FILE (AND FILE (OR (OPENP FILE (QUOTE INPUT))
			       FILE)))
	   JFN)

          (* if FILE is given, then it is rebound to its full 
	  input name; otherwise, NIL)


          [SETQ JFN (OPNJFN (OR FILE (INPUT]
          (OR ESCFLG (ESCAPE))                  (* Put ESCAPE back the 
						way we found it, if 
						nec.)
          (COND
	    ((EQ JFN 64)

          (* TTY complicated, with POSITION, LASTC, LINBUF, 
	  SYSBUF, etc. Give error. should be fixed up to work 
	  right someday?)


	      (ERROR (QUOTE "SKREAD NOT LEGAL TO TTY")
		     FILE)))
          (SETQ BUF1 (SETFCHAR FILE))
          [AND (NULL BUF1)
	       (SETQ BUF1 (COND
		   (RRSTR 

          (* Double-buffer: BUF1 is analog of FCHAR, RRSTR of 
	  LINBUF. But convention that if there is nothing in 
	  BUF1 then RRSTR not checked.
	  Saves time but requires this COND check.
	  BUF1 contains an ASCII code.)


			  (CHCON1 (GLC RRSTR]
      TOP (SELECTQ (LOGAND [LOC (SETQ C (GETSYNSK (SETQ LSTC (BINSK]
			   7)
		   (3                           (* Left paren)
		      (SKPAREN))
		   (4                           (* Unmatched right paren
						terminates SKREAD.)
		      (SETQ UNBALFLG (QUOTE %))))
		   (1                           (* Ditto right square 
						bracket.)
		      (SETQ UNBALFLG (QUOTE %])))
		   (2                           (* Left bracket.)
		      (SKBRACKET))
		   [0 (COND
			((NEQ (LOGAND (LOC C)
				      16)
			      0)                (* Double-quote.)
			  (SKSTR))
			((NEQ (LOGAND (LOC C)
				      64)
			      0)                (* Flush leading Sepr 
						chars)
			  (GO TOP))
			(T (SKATOM)

          (* Anything else is atom. Put back the BREAK char 
	  and reset LASTC. This only has to be done in the 
	  case of SKATOM because only reading atoms ever goes 
	  too far.)


			   (SETFCHAR FILE BUF1)
			   (SETQ LSTC SKATOM-LASTC]
		   (SKMACRO))
          (SETLASTC LSTC FILE)

          (* Value of SKREAD is NIL normally;
	  but if an unbalanced paren or square bracket 
	  terminated the parse, it is returned as a character 
	  atom.)


          (RETURN UNBALFLG])

(SKATOM
  [LAMBDA NIL                                   (* lmm "10-NOV-77 01:16"
)                                               (* SUBFN of SKREAD.
						Blockcompiled away.)
    (PROG NIL
      TOP (COND
	    ((NEQ (LOGAND (LOC (GETSYNSK (BINSK)))
			  192)
		  0)
	      (SETQ BUF1 LSTC)                  (* Sepr or BREAK chars)
	      (RETURN))
	    (T (SETQ SKATOM-LASTC LSTC)))
          (GO TOP])

(SKMACRO
  [LAMBDA NIL                                   (* lmm "10-NOV-77 01:18"
)                                               (* skip a read macro at 
						top level)
    (PROG (SKIP)
          (SELECTQ
	    (LOGAND (LOC (GETSYNSK LSTC))
		    7)
	    [5
	      (AND
		(SETQ SKIP (GETPROP (CAR (VAG (IPLUS (LOC FILERDTBL)
						     LSTC 2)))
				    (QUOTE SKREAD)))
		(RETURN
		  (SETQ BUF1
		    (GLC
		      (OR [SETQ RRSTR
			    (APPLY* SKIP FILE FILERDTBL
				    (AND BUF1 (CONCAT
					   RRSTR
					   (FCHARACTER BUF1]
			  (RETURN (SETQ BUF1]
	    NIL)
          (COND
	    (BUF1                               (* read macro character,
						and re-read string)
                                                (* Bomb out; this isn't 
						right, but it is what 
						used to happen)
		  (SKATOM)
		  (SETFCHAR FILE BUF1)
		  (SETQ LSTC SKATOM-LASTC)
		  (RETURN)))                    (* otherwise, call READ)
          (SETFCHAR FILE LSTC)
          (READ FILE FILERDTBL)
          (SETQ BUF1 (SETFCHAR FILE))
          (SETQ LSTC (LASTC FILE])

(SKSTR
  [LAMBDA NIL                                   (* SUBFN of SKREAD.
						Blockcompiled away.)
    (PROG NIL
      TOP (COND
	    ((NEQ (LOGAND (LOC (GETSYNSK (BINSK)))
			  16)
		  0)                            (* Double-quote)
	      (RETURN))
	    (T (GO TOP])

(SKPAREN
  [LAMBDA NIL                                   (* SUBFN of SKREAD.
						Blockcompiled away.)
    (PROG (C)
      TOP [SELECTQ (LOGAND [LOC (SETQ C (GETSYNSK (BINSK]
			   7)
		   (3                           (* Left paren)
		      (SKPAREN)
		      (AND (EQ UNBALFLG (QUOTE %]))
			   (RETURN)))
		   (2                           (* Left bracket)
		      (SKBRACKET))
		   (4                           (* Right paren)
		      (RETURN))
		   (1 

          (* Right bracket ends this call to SKPAREN, and 
	  enter unwind mode to determine scope of bracket 
	  closure.)


		      (SETQ UNBALFLG (QUOTE %]))
		      (RETURN))
		   (COND
		     ((NEQ (LOGAND (LOC C)
				   16)
			   0)                   (* Double-quote)
		       (SKSTR]
          (GO TOP])

(SKBRACKET
  [LAMBDA NIL                                   (* SUBFN of SKREAD.
						Blockcompiled away.)
    (PROG (C)
      TOP [SELECTQ (LOGAND [LOC (SETQ C (GETSYNSK (BINSK]
			   7)
		   (2                           (* Left bracket)
		      (SKBRACKET))
		   (1                           (* Right bracket)
		      (RETURN))
		   (COND
		     ((NEQ (LOGAND (LOC C)
				   16)
			   0)                   (* Double-quote)
		       (SKSTR]
          (GO TOP])

(BINSK
  (LAMBDA NIL                                   (* lmm "24-FEB-79 20:12"
)

          (* SUBFN of SKREAD. Blockcompiled away.
	  someday fix so percent sign in RRSTR does the right 
	  thing.)


    (SETQ LSTC
      (COND
	(BUF1 (PROG NIL
		    (RETURN (CHCON1 (OR (AND RRSTR (GNC RRSTR))
					(RETURN (PROG1 BUF1
						       (SETQ BUF1)))))))
	      )
	(T                                      (* Buffers empty, gotta 
						really go to file.)
	   (ASSEMBLE NIL
		     (CQ JFN)
		     (SUBI 1 , ASZ)
		     (JSYS 50Q)                 (* BIN)
		     (JUMPE 2 , EOFP)
		     (VAR (HRRZ 3 , FILERDTBL))
		     (ADDI 3 , 2 (2))           (* GET READTABLE ENTRY)
		     (HLRZ 3 , 0 (3))
		     (TRNE 3 , 10Q)             (* TEST ESCAPE BIT)
		     (JRST PC)
		     (CAIE 2 , 15Q)
		     (JRST BACKIN)
		     (JSYS 50Q)                 (* BIN)
		     (CAIE 2 , 12Q)
		     (JRST LF1)
		     (MOVEI 2 , 37Q)
		     (JRST BACKIN)
		 EOFP(JSYS 24Q)                 (* GTSTS If hit eof, 
						SKREAD returns NIL.)
		     (TLNE 2 , 1000Q)
		     (JRST * 3)
		     (MOVEI 2 , 0)
		     (JRST BACKIN)
		     (CQ (ERRORX (LIST 20Q (OR FILE (INPUT)))))

          (* ESCAPE char. Read following char and return any 
	  ordinary literal char, e.g. 130Q for "X")


		 PC  (VAR (HRRZ 1 , ESCFLG))
		     (CAMN 1 , KNIL)
		     (JRST BACKIN)
		     (CQ JFN)
		     (SUBI 1 , ASZ)
		     (JSYS 50Q)                 (* JSYS BIN)
		     (CAIE 2 , 15Q)
		     (JRST PC2)
		     (JSYS 50Q)                 (* BIN)
		     (CAIE 2 , 12Q)
		     (JSYS 42Q)                 (* BKJFN)
		     (JFCL)
		 PC2 (MOVEI 2 , 130Q)
		     (JRST BACKIN)
		 LF1 (JSYS 42Q)                 (* BKJFN)
		     (JFCL)
		     (MOVEI 2 , 15Q)
		 BACKIN
		     (HRRZI 1 , ASZ (2))))))))

(SETFCHAR
  [LAMBDA (FL CHAR)                             (* lmm "10-NOV-77 00:45"
)                                               (* SUBFN of SKREAD.
						Blockcompiled away.)

          (* This was going to be a public function, but it 
	  has some real problems when FILE=T and CHAR is a 
	  double-quote, or a paren, some others.
	  So I check in SKREAD and just don't call SETFCHAR 
	  with FILE=T, but that makes it not a user usable 
	  fn.)


    (ASSEMBLE NIL
	      (CQ FL)
	      (FASTCALL IFSET)
	      (VAR (HRRZ 2 , CHAR))
	      (CAMN 2 , KNIL)
	      (HRRZI 2 , ASZ -1)                (* NIL=-1 means buffer 
						empty)
	      (SUBI 2 , ASZ)
	      (HRRE 1 , FCHAR (FX))
	      (JUMPGE 1 , * 2)
	      (SKIPA 1 , KNIL)
	      (ADDI 1 , ASZ)
	      (HRRM 2 , FCHAR (FX])

(SETLASTC
  [LAMBDA (CHAR FL)                             (* lmm "10-NOV-77 00:45"
)

          (* Used only in SKREAD, to reset LASTC given numeric
	  byte. Value not used.)


    (ASSEMBLE NIL
	      (CQ FL)
	      (FASTCALL IFSET)
	      (CQ CHAR)
	      (SUBI 1 , ASZ)
	      (HRLM 1 , FILEA (10Q])

(MAPHASH
  [LAMBDA (ARRAY MAPHFN)                        (* dcl: 19 Apr 78 23:29)
    (PROG ((AP (COND
		 ((NULL ARRAY)
		   SYSHASHARRAY)
		 ((LISTP ARRAY)
		   (CAR ARRAY))
		 (T ARRAY)))
	   END)
          (OR (HARRAYP AP)
	      (ERRORX (LIST 27 ARRAY)))
          (SETQ END (VAG (IPLUS (LOC AP)			       |
				(LOC (CAR AP))			       |
				-1)))           (* Last word of ARRAY.)|
          (SETQ AP (VAG (IPLUS (LOC AP)
			       2)))             (* First element in 
						ARRAY.)
      LP  [COND							       |
	    ((NEQ (CAR AP)					       |
		  (VAG 0))					       |
								       |
          (* HASH-VALUE cell is empty if it has VAG 0 in it s 	       |
	  right half)						       |
								       |
								       |
	      (APPLY* MAPHFN (CAR AP)				       |
		      (CDR AP]					       |
          (AND (EQ AP END)					       |
	       (RETURN ARRAY))					       |
          [SETQ AP (VAG (ADD1 (LOC AP]
          (GO LP])

(DOBE
  [LAMBDA NIL                                   (* dismisses until 
						output buffer is empty)
    (JSYS 68 65])

(DISMISS
  [LAMBDA (N)                                   (* Dismisses for N 
						milliseconds.)
    (JSYS 119 N)
    N])

(FNOPENADR
  [LAMBDA (HANDLE N)

          (* Value is address portion of correspondin cell, as
	  a relative address. i.e. takes into acount that in 
	  swapped functions, all references are relative to 
	  beginning of block, whereas in compiled code, they 
	  are absolute)


    (COND
      [(SWPARRAYP HANDLE)
	(IPLUS -2 (LOC (FNOPENRA HANDLE N]
      (T (IDIFFERENCE (LOC (FNOPENRA HANDLE N))
		      (LOC HANDLE])

(GETINTERRUPT
  [LAMBDA (CHAR)                                (* lmm "11-JAN-78 23:37"
)
    (COND
      ((OR (NULL CHAR)
	   (EQ CHAR T))
	(ASSEMBLE NIL
	          (MOVE 4 , CTCTP)
	          (CQ CHAR)
	          (CAME 1 , KNIL)
	          (SKIPA 1 , KNIL)              (* char is T, make it 
						NIL but leave 4 alnoe)
	          (MOVE 4 , UCTCTP)
	      GETALL
	          (HLRZ 3 , 0 (4))
	          (TRNE 3 , 400000Q)
	          (JRST ENDGETALL)
	          (PUSH PP , 4)
	          (CAIN 3 , 34Q)
	          (MOVEI 3 , 177Q)
	          (MOVEI 2 , 0 (1))
	          (MOVEI 1 , ASZ (3))
	          (FASTCALL CONS)
	          (POP PP , 4)
	      ENDGETALL
	          (AOBJN 4 , GETALL)
	      OUT))
      (T (ASSEMBLE NIL
	           (CQ NIL)
	           (VAR (HRRZ 2 , CHAR))        (* CHAR is either a 
						character code or a 
						channel name)
	           (MOVEI 4 , CHN)
	           (HRLI 4 , -11Q)              (* set up AOBJN pointer 
						to table of channel 
						names)
	       CHLP(CAMN 2 , @ 0 (4))
	           (JRST ISCHAN)                (* CHAR is a channel 
						name)
	           (AOBJN 4 , CHLP)             (* Try again)
                                                (* assume CHAR is a 
						character code)
	           (SUBI 2 , ASZ)
	           (CAIN 2 , 177Q)
	           (MOVEI 2 , 34Q)
	           (MOVE 4 , CTCTP)
	       FIND(MOVS 3 , 0 (4))
	           (CAIE 2 , 0 (3))
	           (JRST ENDLP)
	           (HRRZ 2 , UCTCTP)
	           (CAILE 2 , 0 (4))
	           (JRST SYSINT)
	           (TLNE 3 , 400000Q)
	           (JRST HARDUSER)
	           (SKIPN 1 , UCTVAR-UCTCT (4))
	           (HRRZ 1 , ' INTERRUPT)
	           (JRST OUT)
	       HARDUSER
	           (HRRZ 1 , ' ERRORX)
	           (JRST OUT)
	       SYSINT
	           (SUB 4 , CTCTP)
	           (MOVEI 1 , CHN)
	           (ADDI 1 , 0 (4))
	           (HRRZ 1 , @ 0 (1))           (* (HRRZ 1 , @ CHN 
						(4)))
	           (JRST OUT)
	       CHN (CAI ' HELP)
	           (CAI ' PRINTLEVEL)
	           (CAI ' STORAGE)
	           (CAI ' RUBOUT)
	           (CAI ' ERROR)
	           (CAI ' RESET)
	           (CAI ' OUTPUTBUFFER)
	           (CAI ' BREAK)
	           (CAI ' CONTROL-T)
	       ISCHAN
	           (SUBI 4 , CHN)
	           (ADD 4 , CTCTP)
	           (HLRZ 3 , 0 (4))
	           (TRNN 3 , 400000Q)
	           (MOVEI 1 , ASZ (3))
	           (CAIN 1 , ASZ 34Q)
	           (MOVEI 1 , ASZ 177Q)
	           (JRST OUT)
	       ENDLP
	           (AOBJN 4 , FIND)
	       OUT])

(SETINTERRUPT
  [LAMBDA (CHAR CLASS)                          (* lmm: 
						"28-MAR-77 01:12:41")
    (PROG (TEM)
          [COND
	    ((EQ CHAR 127)
	      (SETQ CHAR 28))
	    ((OR (ILESSP (LOC CHAR)
			 (LOC 1))
		 (IGREATERP (LOC CHAR)
			    (LOC 28)))
	      (ERRORX (LIST 27 CHAR]
          (ASSEMBLE NIL
		    (MOVE 7 , CTCTP)
		LP  (HLRZ 1 , 0 (7))
		    (TRNN 1 , 400000Q)
		    (JSYS 140Q)                 (* DTI)
		    (AOBJN 7 , LP))
          [AND (SETQ TEM (GETINTERRUPT CHAR))
	       (COND
		 ((EQ TEM CLASS)
		   (GO OUT))
		 (T (DISINT CHAR]
          (OR CLASS (GO OUT))
          (COND
	    ((SETQ TEM (GETINTERRUPT CLASS))
	      (DISINT TEM)))
          (SETINT1 CHAR CLASS)
      OUT (ASSEMBLE NIL
		    (FASTCALL SETINT])

(SETINT1
  [LAMBDA (CHAR CLASS)                          (* lmm "14-OCT-77 13:39"
)
    (ASSEMBLE NIL
	      (CQ CHAR)
	      (SUBI 1 , ASZ)                    (* make sure char is in 
						range)
	      (VAR (HRRZ 2 , CLASS))            (* CLASS is either a 
						system class, ERRORX, 
						INTERRUPT, or a 
						variable)
	      (MOVEI 4 , CHN)
	      (HRLI 4 , -11Q)                   (* set up AOBJN pointer 
						to table of channel 
						names)
	  CHANLP
	      (CAMN 2 , @ 0 (4))
	      (JRST SYSTEMCLASS)
	      (AOBJN 4 , CHANLP)                (* user interrupt)
	      (MOVE 4 , UCTCTP)
	  FIND(MOVS 3 , 0 (4))
	      (TRZE 3 , 400000Q)
	      (JRST FOUNDFREE)
	      (AOBJN 4 , FIND)
	      (FASTCALL SETINT)
	      (CQ (ERRORX (LIST 44Q)))
	  FOUNDFREE
	      (HRLM 1 , 0 (4))
	      (MOVEI 1 , 400000Q)
	      (ANDCAM 1 , 0 (4))                (* turn off hard-flag)
	      (MOVEM 2 , UCTVAR-UCTCT (4))      (* store var name)
	      (CAMN 2 , ' INTERRUPT)
	      (SETZM UCTVAR-UCTCT (4))          (* if soft interrupt, 
						clear var name)
	      (CAMN 2 , ' ERRORX)
	      (IORM 1 , 0 (4))                  (* leave var name, but 
						set hard flag)
	      (JRST OUT)
	  CHN (CAI ' HELP)
	      (CAI ' PRINTLEVEL)
	      (CAI ' STORAGE)
	      (CAI ' RUBOUT)
	      (CAI ' ERROR)
	      (CAI ' RESET)
	      (CAI ' OUTPUTBUFFER)
	      (CAI ' BREAK)
	      (CAI ' CONTROL-T)
	  SYSTEMCLASS
	      (SUBI 4 , CHN)
	      (ADD 4 , CTCTP)
	      (HRLM 1 , 0 (4))
	  OUT])

(DISINT
  [LAMBDA (CH)                                  (* lmm: 
						"14-MAR-77 03:16:19")
    (ASSEMBLE NIL
	      (CQ CH)
	      (SUBI 1 , ASZ)
	      (MOVE 4 , CTCTP)
	      (MOVEI 2 , 400000Q)
	  FINDLP
	      (MOVS 3 , 0 (4))
	      (CAIN 1 , 0 (3))
	      (HRLM 2 , 0 (4))
	      (AOBJN 4 , FINDLP])
)

(RPAQQ ASSEMBLEBLOCKS ((SKREAD SKREAD SKATOM SKMACRO SKSTR SKPAREN SKBRACKET BINSK SETFCHAR SETLASTC
			       (LOCALFREEVARS BUF1 RRSTR JFN ESCFLG LSTC SKATOM-LASTC UNBALFLG FILE))
		       (NIL GETINTERRUPT COUNT COPYBYTES PFCOPYBYTES MAPHASH DOBE DISMISS FNOPENADR
			    (LOCALVARS . T))
		       (SETINTERRUPT SETINTERRUPT SETINT1 DISINT (LOCALVARS . T))))
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
(BLOCK: SKREAD SKREAD SKATOM SKMACRO SKSTR SKPAREN SKBRACKET BINSK SETFCHAR SETLASTC
	(LOCALFREEVARS BUF1 RRSTR JFN ESCFLG LSTC SKATOM-LASTC UNBALFLG FILE))
(BLOCK: NIL GETINTERRUPT COUNT COPYBYTES PFCOPYBYTES MAPHASH DOBE DISMISS FNOPENADR (LOCALVARS . T))
(BLOCK: SETINTERRUPT SETINTERRUPT SETINT1 DISINT (LOCALVARS . T))
]
(PUTDQ? DOMAPPAGE [LAMBDA (FILE PAGE#)
			  (JSYS 56Q (LOGOR (LLSH (OR (FIXP FILE)
						     (OPNJFN FILE))
						 22Q)
					   (LOGAND 777777Q PAGE#))
				-377777777001Q 140000000000Q)
			  (VAG 261632])
(PUTDQ? MAPPAGE [LAMBDA (PAGE# FILE)
			(DOMAPPAGE PAGE# FILE])
(DECLARE: DOEVAL@LOAD DOEVAL@COMPILE DONTCOPY 

(PUTPROPS GETSYNSK MACRO [(X)
			  (CDR (VAG (IPLUS (LOC FILERDTBL)
					   X 2])
)
(DECLARE: DONTCOPY
  (FILEMAP (NIL (1918 30000 (COUNT 1930 . 2651) (COPYBYTES 2655 . 10072) (PFCOPYBYTES 10076 . 14647) (
SKREAD 14651 . 17047) (SKATOM 17051 . 17466) (SKMACRO 17470 . 18568) (SKSTR 18572 . 18851) (SKPAREN 
18855 . 19650) (SKBRACKET 19654 . 20129) (BINSK 20133 . 21946) (SETFCHAR 21950 . 22763) (SETLASTC 
22767 . 23082) (MAPHASH 23086 . 24053) (DOBE 24057 . 24181) (DISMISS 24185 . 24311) (FNOPENADR 24315 .
 24749) (GETINTERRUPT 24753 . 27345) (SETINTERRUPT 27349 . 28125) (SETINT1 28129 . 29674) (DISINT 
29678 . 29997)))))
STOP
