(FILECREATED " 8-OCT-78 02:25:01" <NETLISP>SWAP.;8 10538  

     changes to:  SWAPCOMS MKSWAPP MKSWAP2

     previous date: " 8-OCT-78 02:11:59" <NETLISP>SWAP.;7)


(PRETTYCOMPRINT SWAPCOMS)

(RPAQQ SWAPCOMS ((FNS * SWAPFNS)
	(BLOCKS * SWAPBLOCKS)
	(VARS (NOSWAPFNS (QUOTE (LAPRD BINRD FNTYP NOLINKDEF LISPXPRINT 
				       LISPXPRIN1 LISPXPRIN2 
				       LISPXSPACES LISPXTERPRI 
				       ADDSPELLBLOCK SAVESET /PUT 
				       DCHCONBLOCK MKSWAP2BLOCK KFORK 
				       RFSTS USERNUMBER))))
	(DECLARE: DONTCOPY DOEVAL@COMPILE (PROP MACRO ASSEM))
	(GLOBALVARS NOSWAPFNS MKSWAPSIZE NOSWAPFLG)))

(RPAQQ SWAPFNS (MKSWAP MKUNSWAP MKSWAP1 MKUNSWAP1 MKSWAP2 MKUNSWAP2 
		       BREGIFY DO.CODE.MODS BLT MKSWAPP))
(DEFINEQ

(MKSWAP
  [LAMBDA (X)
    (COND
      ((ARRAYP X)
	(MKSWAP1 X))
      ((SCODEP X)
	X)
      ([OR (NOT (LITATOM X))
	   (NOT (ARRAYP (GETD X]
	(ERROR (QUOTE "MKSWAP -- Arg illegal:")
	       X))
      (T (PUTD X (MKSWAP1 (GETD X)))
	 X])

(MKUNSWAP
  [LAMBDA (X)
    (COND
      ((SWPARRAYP X)
	(MKUNSWAP1 X))
      ((NOT (SCODEP X))
	(ERROR (QUOTE "MKUNSWAP -- Arg illegal:")
	       X))
      (T [PUTD X (VAG (IPLUS 2 (LOC (MKUNSWAP1 (GETD X]
	 X])

(MKSWAP1
  [LAMBDA (ARR)

          (* This function takes a regular, resident array 
	  ARR, and returns a swapped array 
	  (i.e. return is a handle, type 4) which is 
	  appropriately relocated, etc.)


    (PROG (SIZE HANDLE)
          (SETQ ARR (ARRAYBEG ARR))
          (SETQ SIZE (ARRAYSIZE ARR))
          (SETQ HANDLE (SWPARRAY SIZE))
          (SWPPOS HANDLE (FUNCTION MKSWAP2))
          (RETURN HANDLE])

(MKUNSWAP1
  [LAMBDA (HANDLE)                              (* Inverse to MKSWAP, 
						q.v.)
    (PROG (ARR SIZE)
          [SETQ ARR (ARRAY (SETQ SIZE (ARRAYSIZE HANDLE]
          (SWPPOS HANDLE (FUNCTION MKUNSWAP2))
          (RETURN ARR])

(MKSWAP2
  (LAMBDA (BFPOS)                               (* lmm " 8-OCT-78 02:23"
)
    (PROG ((BOX 2097152))
          (CLOSER (LOC BOX)
		  (IMINUS (LOC ARR)))
          (BLT ARR BFPOS (VAG (IPLUS 1 SIZE (LOC BFPOS))))
                                                (* Copy header and data 
						into array.)
          (COND
	    ((AND (NEQ (CDR ARR)
		       (VAG 0))
		  (IGREATERP (OPENR (LOC ARR))
			     0))

          (* If the AND is NIL, ARR contained no relocation 
	  bits (e.g. was a data array) so there is nothing 
	  more to do.)


	      (RELOC BFPOS BOX)                 (* Otherwise is code 
						array, stuff indexing 
						bits into relocated 
						instructions.)
	      (BREGIFY BFPOS ARR)               (* convert "JSP 7,ENTERF"
 
						to "JSP 7,ENTERB")
	      (DO.CODE.MODS BFPOS)))            (* Relocate to zero.
						Assumes that BREG 
						addresses header, not 
						the JSP.)
      )))

(MKUNSWAP2
  [LAMBDA (BFPOS)
    (COND
      ((ILESSP (OPENR (LOC BFPOS))
	       0)

          (* If the ILESSP is T, things must be rehashed since
	  the garbage collector doesn't yet handle swapped 
	  hash arrays properly.)


	(CLRHASH ARR)
	(REHASH BFPOS ARR))
      (T [BLT BFPOS ARR (VAG (IPLUS 1 SIZE (LOC ARR]
	 (COND
	   ((NEQ (CDR BFPOS)
		 (VAG 0))
	     (RELOC ARR (LOC ARR))
	     (BREGIFY BFPOS ARR T)
	     (DO.CODE.MODS ARR T])

(BREGIFY
  [LAMBDA (SWPARR ARR UNFLG)                    (* dcl: 27 Apr 76 15:53)

          (* If UNFLG is NIL then SWPARR is a half-swapped 
	  array being constructed from ARR, and SWPARR has 
	  been relocated to zero using Alice's subr, RELOC, 
	  but indexing bits must now be OR'D into the 
	  relocatable instructions. We can tell which 
	  instructions are relocatable very easily now, no 
	  messing around with bit tables in the bottom of the 
	  array: just pick out the instructions which were 
	  changed by RELOC. -
	  If UNFLG is T, then ARR is a half-unswapped array 
	  (a half-wasp deejay?) being constructed from SWPARR,
	  and everything works pretty much the same except 
	  we're clearing the index field to zeros.
	  -
	  Special cases -
	  Code always starts with JSP to ENTERF 
	  (changed to be to ENTERB later) followed by two data
	  words, some of which are relocated by RELOC but 
	  should be left alone by BREGIFY.
	  -
	  There may follow a JSP to BLKENT with two XWD's, 
	  similarly. -
	  AC assignments: -
	  SWPTR is stepping pointer for SWPARR.
	  -
	  CPTR is stepping pointer for ARR.
	  -
	  LIMIT is first literal addr in SWPARR.
	  -)


    (ASSEMBLE NIL
	      (C
		(SUBPAIR
		  (QUOTE (SWPTR CPTR LIMIT))
		  (QUOTE (7 6 5))
		  (QUOTE (ASSEMBLE NIL
			           (MOVEI 2 , 3)
			           (PUSHN 2)
			           (CQ ARR)
			           (HRRZI CPTR , 5 (1))
                                                (* Skips two header 
						words, JSP, 2 xwds.)
			           (CQ SWPARR)
			           (HRRZI SWPTR , 5 (1))
			           (HRRZ LIMIT , 1 (1))
			           (ADDI LIMIT , 0 (1))

          (* Now make sure the first instruction isn't that 
	  JSP to SBLKNT or BLKENT. If it is, skip it and its 
	  two XWD's.)


			           (CQ UNFLG)
			           (CAME 1 , KNIL)
                                                (* If unswapping, 
						compare)
			           (SKIPA 1 , JSP.TO.SBLKNT)
                                                (* This, otherwise)
			           (MOVE 1 , JSP.TO.BLKENT)
                                                (* This instruction, to)
			           (CAME 1 , 0 (SWPTR))
                                                (* The first code word,)
			           (JRST DISPATCH)
                                                (* If not blockcompiled,
						go ahead.)
			           (NREF (ADD SWPTR , 0))
                                                (* Else skip over BLKENT
						stuff.)
			           (NREF (ADD CPTR , 0))

          (* Main loops. Any instructions not the same must 
	  have been changed by RELOC, should therefore have 
	  indexing field set or cleared.)


			       DISPATCH
			           (CQ UNFLG)
			           (CAME 1 , KNIL)
			           (JRST UNSWPLP)
			       SWPLP
			           (MOVE 1 , 0 (SWPTR))
			           (CAMN 1 , 0 (CPTR))
			           (JRST SWPNOP)
			           (TLNE 1 , 17Q)
			           (JRST ERROR)
                                                (* If indexing bits not 
						zero then error, you 
						can't index twice.)
			           (TLO 1 , BR)
                                                (* Index by BR.)
			           (MOVEM 1 , 0 (SWPTR))
                                                (* Put back.)
			       SWPNOP
			           (ADDI SWPTR , 1)
			           (CAML SWPTR , LIMIT)
			           (JRST OUT)
			           (AOJA CPTR , SWPLP)
			       ERROR
			           (PUSH CP , CPTR)
			           [CQ (ERROR 
			  "Unrelocatable instruction at location: "
					      (ASSEMBLE NIL
						        (POP CP , 1]
			       UNSWPLP
			           (MOVE 1 , 0 (CPTR))
			           (CAMN 1 , 0 (SWPTR))
                                                (* If RELOC changed this
						instruction,)
			           (JRST UNSWPNOP)
			           (TLZ 1 , 17Q)
                                                (* Unconditionally clear
						index field.)
			           (MOVEM 1 , 0 (CPTR))
			       UNSWPNOP
			           (ADDI SWPTR , 1)
			           (CAML SWPTR , LIMIT)
			           (JRST OUT)
			           (AOJA CPTR , UNSWPLP)
			       JSP.TO.BLKENT
			           (JSP 7 , BLKENT)
                                                (* Used as a literal 
						here.)
			       JSP.TO.SBLKNT
			           (JSP 7 , SBLKNT)
			       OUT (POPNN 1])

(DO.CODE.MODS
  [LAMBDA (ADDR FLG)                            (* dcl: 26 FEB 76 03:45)

          (* ADDR is address of code block.
	  FLG=NIL means we're in MKSWAP , FLG=T means in 
	  MKUNSWAP. -
	  -
	  JSP 7,ENTERF must be changed to JSP 7,ENTERB.
	  -
	  JSP 7,BLKENT must be changed to JSP 7,SBLKNT, if it 
	  is present, i.e. if code was created by 
	  blockcompiler.)


    (COND
      (FLG (ASSEMBLE NIL
		     (CQ ADDR)
		     (HRRZI 2 , ENTERF)
		     (HRRZ 3 , 2 (1))
		     (CAIN 3 , ENTERB)
		     (HRRM 2 , 2 (1))
		     (MOVE 2 , 5 (1))
		     (HRRZI 3 , BLKENT)
		     (CAMN 2 , JSP.TO.SBLKNT)
		     (HRRM 3 , 5 (1))
		     (JRST OUT)
		 JSP.TO.SBLKNT
		     (JSP 7 , SBLKNT)
		 OUT))
      (T (ASSEMBLE NIL
	           (CQ ADDR)
	           (HRRZI 2 , ENTERB)
	           (HRRZ 3 , 2 (1))
	           (CAIN 3 , ENTERF)
	           (HRRM 2 , 2 (1))             (* Smash ENTERF to be 
						ENTERB.)
	           (MOVE 2 , 5 (1))             (* 1st wd after JSP to 
						ENTERF.)
	           (HRRZI 3 , SBLKNT)
	           (CAMN 2 , JSP.TO.BLKENT)
	           (HRRM 3 , 5 (1))             (* Smash BLKENT to be 
						SBLKNT.)
	           (JRST OUT)
	       JSP.TO.BLKENT
	           (JSP 7 , BLKENT)             (* Used as literal.)
	       OUT])

(BLT
  [LAMBDA (FROM TO HIWRITE)
    (ASSEMBLE NIL
	      (VAR (HRL 2 , FROM))
	      (VAR (HRR 2 , TO))
	      (VAR (HRRZ 1 , HIWRITE))
	      (BLT 2 , @ 1])

(MKSWAPP
  (LAMBDA (FNAME CDEF)                          (* lmm " 8-OCT-78 02:19"
)
    (AND (LITATOM FNAME)
	 (NOT (FMEMB FNAME NOSWAPFNS))
	 (NULL NOSWAPFLG)
	 (ARRAYP (OR CDEF (SETQ CDEF (GETD FNAME))))
	 (ILESSP MKSWAPSIZE (ARRAYSIZE CDEF)))))
)

(RPAQQ SWAPBLOCKS ((MKSWAPBLOCK MKSWAP MKUNSWAP MKSWAP1 MKUNSWAP1
				(ENTRIES MKSWAP MKUNSWAP)
				(SPECVARS ARR SIZE))
		   (MKSWAP2BLOCK MKSWAP2 MKUNSWAP2 BREGIFY DO.CODE.MODS 
				 BLT (ENTRIES MKSWAP2 MKUNSWAP2)
				 (SPECVARS ARR SIZE))))
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
(BLOCK: MKSWAPBLOCK MKSWAP MKUNSWAP MKSWAP1 MKUNSWAP1 (ENTRIES MKSWAP 
							   MKUNSWAP)
	(SPECVARS ARR SIZE))
(BLOCK: MKSWAP2BLOCK MKSWAP2 MKUNSWAP2 BREGIFY DO.CODE.MODS BLT
	(ENTRIES MKSWAP2 MKUNSWAP2)
	(SPECVARS ARR SIZE))
]

(RPAQQ NOSWAPFNS (LAPRD BINRD FNTYP NOLINKDEF LISPXPRINT LISPXPRIN1 
			LISPXPRIN2 LISPXSPACES LISPXTERPRI 
			ADDSPELLBLOCK SAVESET /PUT DCHCONBLOCK 
			MKSWAP2BLOCK KFORK RFSTS USERNUMBER))
(DECLARE: DONTCOPY DOEVAL@COMPILE 

(PUTPROPS ASSEM MACRO (MACROAS
			(EDITE (CONS (QUOTE ASSEMBLE)
				     (CONS NIL (COPY (CDR MACROAS))))
			       (CAR MACROAS))))
)
(DECLARE: DOEVAL@COMPILE DONTCOPY

(ADDTOVAR GLOBALVARS NOSWAPFNS MKSWAPSIZE NOSWAPFLG)
)
(DECLARE: DONTCOPY
  (FILEMAP (NIL (736 9505 (MKSWAP 748 . 996) (MKUNSWAP 1000 . 1220) (
MKSWAP1 1224 . 1653) (MKUNSWAP1 1657 . 1905) (MKSWAP2 1909 . 2866) (
MKUNSWAP2 2870 . 3333) (BREGIFY 3337 . 7763) (DO.CODE.MODS 7767 . 9076) 
(BLT 9080 . 9244) (MKSWAPP 9248 . 9502)))))
STOP
   