(FILECREATED "11-Jul-84 23:29:37" <NEWLISP>BASIC..160 40346  

      changes to:  (VARS BASICCOMS)
		   (FNS ALLOCSTRING)

      previous date: "13-JUL-83 03:18:16" <NEWLISP>BASIC..159)


(* Copyright (c) 1983, 1984 by Xerox Corporation)

(PRETTYCOMPRINT BASICCOMS)

(RPAQQ BASICCOMS [[DECLARE: FIRST (P (MOVD? (QUOTE ARRAY)
					    (QUOTE OLDARRAY))
				     (SETQ NOSWAPFNS (CONS (QUOTE SETA)
							   NOSWAPFNS]
	(FNS ALLOCSTRING CAAR CADR CDAR CDDR CAAAR CAADR CADAR CADDR CDAAR CDADR CDDAR CDDDR CAAAAR 
	     CAAADR CAADAR CAADDR CADAAR CADADR CADDAR CADDDR CDAAAR CDAADR CDADAR CDADDR CDDAAR 
	     CDDADR CDDDAR CDDDDR)
	(FNS ABS ADD1 ARRAY ARRAYSIZE ARRAYORIG HARRAYSIZE BOUNDP DELETECONTROL DIFFERENCE DRIBBLE 
	     ECHOCONTROL EVQ FASSOC FGETD FLAST FLENGTH FMEMB FNTH FDIFFERENCE FIX FIXP FMINUS FLOAT 
	     FUNCTION GETPROPLIST GETSYNTAX GETSYNREADTABLE GETSYNTERMTABLE GETSYNTAXP IDIFFERENCE 
	     ILESSP IMINUS LESSP LRSH NEQ NILL NLISTP RELSTKP RPLACA RPLACD RSH SETA SETD SETSYNTAX 
	     SETPROPLIST SMALLP STRPOS STRPOSL MAKEBITTABLE SUB1 SYNTAXP TYPEP ZEROP DOCOLLECT 
	     ENDCOLLECT)
	[P (COND ((EQ (GETTOPVAL (QUOTE BINCOMPFLG))
		      (QUOTE NOBIND))
		  [MAPC (QUOTE ((DECLARE . QUOTE)
				(MAKEPDQ)
				(SETCV)))
			(FUNCTION (LAMBDA (X)
					  (PUTD (CAR X)
						(GETD (CDR X]
		  [COND ((EXPRP (GETD (QUOTE LAPRD)))
			 [PUTDQ STRPOS (LAMBDA (X Y START SKIP ANCHOR TAIL)
					       [COND [(LITATOM X)
						      (SETQ X (CDR (VAG (IPLUS (LOC X)
									       2]
						     ((NULL (STRINGP X))
						      (SETQ X (MKSTRING X]
					       [COND ((STRINGP Y))
						     [(LITATOM Y)
						      (SETQ Y (CDR (VAG (IPLUS (LOC Y)
									       2]
						     (T (SETQ Y (MKSTRING Y]
					       [COND (SKIP (SETQ SKIP (NTHCHAR SKIP 1]
					       (COND [START (COND ((MINUSP START)
								   (SETQ START (IPLUS START
										      (NCHARS Y)
										      1]
						     (T (SETQ START 1)))
					       (SETQ Y (SUBSTRING Y START))
					       (PROG ((N START)
						      W X1 Y1)
						     L2
						     (SETQ X1 (SUBSTRING X 1))
						     (SETQ Y1 (SUBSTRING Y 1))
						     LP
						     (COND [(SETQ W (GNC X1))
							    (COND ((EQ W (GNC Y1))
								   (GO LP))
								  ((EQ W SKIP)
								   (GO LP))
								  (T (GO NX]
							   (TAIL (RETURN (IPLUS (NCHARS X)
										N)))
							   (T (RETURN N)))
						     NX
						     (COND (ANCHOR (RETURN)))
						     (COND ((GNC Y)
							    (SETQ N (ADD1 N))
							    (GO L2))
							   (T (RETURN]
			 [PUTDQ STRPOSL (LAMBDA (L STR)
						(PROG (TEM)
						      (SETQ STR (MKSTRING STR))
						      [SOME L (FUNCTION (LAMBDA (X)
										(SETQ TEM
										      (STRPOS X STR]
						      (RETURN TEM]
			 (PUTDQ MAKEBITTABLE (LAMBDA (X)
						     X]
		  (RPAQQ NOLINKMESS T)
		  (RPAQQ BINCOMPFLG T)
		  (RPAQQ BINFIXFLG T)
		  (SETQ STRPOSLARRAY (ARRAY 4 4))
		  (RPAQQ OCOREVALS NOBIND)
		  (RPAQQ SCOREVALS NOBIND)))
	   (RELSTK (SETQ BOUNDPDUMMY (STKNTH -1]
	(GLOBALVARS STRPOSLARRAY)
	(LOCALVARS . T)
	(BLOCKS (SYNTAXP SYNTAXP (NOLINKFNS . T))
		(GETSYNTAX GETSYNTAX GETSYNREADTABLE GETSYNTERMTABLE GETSYNTAXP (NOLINKFNS . T)))
	(DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)
									      (NLAML FUNCTION)
									      (LAMA NILL])
(DECLARE: FIRST 
(MOVD? (QUOTE ARRAY)
       (QUOTE OLDARRAY))
(SETQ NOSWAPFNS (CONS (QUOTE SETA)
		      NOSWAPFNS))
)
(DEFINEQ

(ALLOCSTRING
  [LAMBDA (N INITCHAR OLD)                                  (* rmk: " 8-SEP-81 23:49")
                                                            (* OLD isn't implemented yet)
    (ASSEMBLE NIL
	      (FASTCALL MKSTRS)
	      [CQ (VAG (FIX (OR (SMALLP INITCHAR)
				(CHCON1 INITCHAR]
	      (PUSHN)
	      (CQ2 (VAG (FIX N)))
	      (JRST ST)
	  LP  (NREF (MOVE 1 , 0))
	      (FASTCALL MKSTR1)
	  ST  (SOJGE 2 , LP)
	      (POPN)
	      (MOVE 1 , UNP1)
	      (FASTCALL MKSP])

(CAAR
  [LAMBDA (X)
    (CAR (CAR X])

(CADR
  [LAMBDA (X)
    (CAR (CDR X])

(CDAR
  [LAMBDA (X)
    (CDR (CAR X])

(CDDR
  [LAMBDA (X)
    (CDR (CDR X])

(CAAAR
  [LAMBDA (X)
    (CAR (CAAR X])

(CAADR
  [LAMBDA (X)
    (CAR (CADR X])

(CADAR
  [LAMBDA (X)
    (CAR (CDAR X])

(CADDR
  [LAMBDA (X)
    (CAR (CDDR X])

(CDAAR
  [LAMBDA (X)
    (CDR (CAAR X])

(CDADR
  [LAMBDA (X)
    (CDR (CADR X])

(CDDAR
  [LAMBDA (X)
    (CDR (CDAR X])

(CDDDR
  [LAMBDA (X)
    (CDR (CDDR X])

(CAAAAR
  [LAMBDA (X)
    (CAAR (CAAR X])

(CAAADR
  [LAMBDA (X)
    (CAAR (CADR X])

(CAADAR
  [LAMBDA (X)
    (CAAR (CDAR X])

(CAADDR
  [LAMBDA (X)
    (CAAR (CDDR X])

(CADAAR
  [LAMBDA (X)
    (CADR (CAAR X])

(CADADR
  [LAMBDA (X)
    (CADR (CADR X])

(CADDAR
  [LAMBDA (X)
    (CADR (CDAR X])

(CADDDR
  [LAMBDA (X)
    (CADR (CDDR X])

(CDAAAR
  [LAMBDA (X)
    (CDAR (CAAR X])

(CDAADR
  [LAMBDA (X)
    (CDAR (CADR X])

(CDADAR
  [LAMBDA (X)
    (CDAR (CDAR X])

(CDADDR
  [LAMBDA (X)
    (CDAR (CDDR X])

(CDDAAR
  [LAMBDA (X)
    (CDDR (CAAR X])

(CDDADR
  [LAMBDA (X)
    (CDDR (CADR X])

(CDDDAR
  [LAMBDA (X)
    (CDDR (CDAR X])

(CDDDDR
  [LAMBDA (X)
    (CDDR (CDDR X])
)
(DEFINEQ

(ABS
  [LAMBDA (X)
    (COND
      ((GREATERP 0 X)
	(MINUS X))
      (T X])

(ADD1
  [LAMBDA (X)
    (IPLUS X 1])

(ARRAY
  [LAMBDA (N TYP INIT ORIG)                     (* dcl: 21 Jul 81 13:53)

          (* This new style function allows TYP to be an 
	  integer, meaning an INTEGER array, or any datatype 
	  field specification.)


    [COND
      ((AND ORIG (NEQ ORIG 1))                  (* Interlisp-Jericho 
						only has origin-1 
						arrays.)
	(ERRORX (LIST 27 ORIG]
    (PROG (LNG REALTYPE NEWARRAY)
          (SETQ LNG (COND
	      ((NOT (NUMBERP N))
		(ERRORX (LIST 27 N)))
	      ((NOT (FIXP N))
		(FIX N))
	      (T N)))
          [SETQ REALTYPE (COND
	      ((OR (NULL TYP)
		   (EQ TYP 0))
		NIL)
	      ((NUMBERP TYP)

          (* This is for the old type of ARRAY call, and is 
	  still used for setting up compiled fns.)


		TYP)
	      [(NLISTP TYP)
		(SELECTQ TYP
			 ((POINTER FLAG)
			   NIL)
			 ((FLOATP FLOATING)
			   (COND
			     (INIT (SETQ INIT (FLOAT INIT)))
			     (T (SETQ INIT 0.0)))
			   NIL)
			 ((FIXP WORD BYTE INTEGER)
			   LNG)
			 (ERRORX (LIST 27 TYP]
	      (T (SELECTQ (CAR TYP)
			  ((BITS BETWEEN)
			    LNG)
			  (ERRORX (LIST 27 TYP]
          (SETQ NEWARRAY (OLDARRAY LNG REALTYPE INIT))
          [COND
	    ((AND INIT REALTYPE (IEQP REALTYPE N))
	      (PROG ((I 1))
		$$LP(COND
		      ((IGREATERP I LNG)
			(RETURN)))
		    (SETA NEWARRAY I INIT)
		$$ITERATE
		    (SETQ I (IPLUS I 1))
		    (GO $$LP]
          (RETURN NEWARRAY])

(ARRAYSIZE
  [LAMBDA (A)
    (SELECTQ (NTYP A)
	     [1 

          (* We permit A not to be the beginning of an array, 
	  i.e. that (ARRAYBEG A) and A may not be EQ, so that 
	  ARRAYSIZE will work for compiled functions.)


		(IPLUS -2 (LOC (CAR (ARRAYBEG A]
	     [4                                 (* Swapped array.)
		(SWPPOS A (FUNCTION (LAMBDA (A)

          (* A is now the swapping-buffer address where the 
	  swapped array got placed by SWPPOS.)


			    (IPLUS -2 (LOC (CAR A]
	     (ERRORX (LIST 28 A])

(ARRAYORIG
  [LAMBDA (X)                                   (* lmm "22-JUN-82 22:32"
)
    1])

(HARRAYSIZE
  [LAMBDA (HARRAY)                              (* rmk: " 7-MAY-82 12:46"
)
    (OR HARRAY (SETQ HARRAY SYSHASHARRAY))
    (AND (LISTP HARRAY)
	 (SETQ HARRAY (CAR HARRAY)))
    (COND
      ((HARRAYP HARRAY)
	(IPLUS (LOC (CAR HARRAY))
	       -2))
      (T (ERRORX (LIST 28 HARRAY])

(BOUNDP
  [LAMBDA (VAR)
    (DECLARE (LOCALVARS . T))                   (* lmm " 7-APR-82 23:19"
)
    (AND (LITATOM VAR)
	 (OR (NEQ (GETATOMVAL VAR)
		  (QUOTE NOBIND))
	     (RELSTK (STKSCAN VAR NIL BOUNDPDUMMY)))
	 T])

(DELETECONTROL
  [LAMBDA (TYPE MESSAGE TTBL)                   (* dcl: 12 Nov 81 16:21)
    (PROG (X)
          (SETQ TTBL (GETTERMTABLE TTBL))
          (SELECTQ TYPE
		   [(ECHO NOECHO)
		     [SETQ X
		       (OPENR (LOC (SETQ TTBL
				     (VAG (IPLUS (LOC TTBL)
						 14]
		     (CLOSER (LOC TTBL)
			     (SELECTQ TYPE
				      (ECHO 0)
				      (NOECHO 1)
				      (HELP)))
		     (RETURN (COND
			       ((EQ X 0)
				 (QUOTE ECHO))
			       (T (QUOTE NOECHO]
		   NIL)
          (COND
	    ((STRINGP MESSAGE)
	      (SETQ X MESSAGE))
	    [(LITATOM MESSAGE)
	      (SETQ X (AND MESSAGE (CDR (VAG (IPLUS (LOC MESSAGE)
						    2]
	    (T (ERROR (QUOTE "ILLEGAL MESSAGE TYPE - DELETECONTROL")
		      MESSAGE)))
          (COND
	    ((IGREATERP (NCHARS MESSAGE)
			4)
	      (ERROR (QUOTE "ILLEGAL MESSAGE LENGTH - DELETECONTROL")
		     MESSAGE)))
          (SETQ MESSAGE
	    (ASSEMBLE NIL
		      [CQ (VAG (IPLUS (SELECTQ TYPE
					       ((DELETELINE LINEDELETE)
						 11Q)
					       (1STCHDEL 12Q)
					       (NTHCHDEL 13Q)
					       (POSTCHDEL 14Q)
					       (EMPTYCHDEL 15Q)
					       (ERRORX (LIST 33Q TYPE)))
				      (LOC TTBL]
		      (PUSHN 0 (1))
		      (MOV21)
		      (CQ X)
		      (CAMN 1 , KNIL)
		      (JRST OUT)
		      (FASTCALL UPATM)
		      (SETZM 0 (2))
		      (HRLI 2 , 440700Q)
		      (JUMPE 4 , OUT)
		  LOOP(ILDB 1 , 3)
		      (IDPB 1 , 2)
		      (SOJG 4 , LOOP)
		  OUT (CQ (CONCAT (QUOTE "12345")))
		      (FASTCALL UPATM)
		      (NREF (MOVEI 2 , 0))
		      (HRLI 2 , 440700Q)
		  LP  (ILDB 5 , 2)
		      (IDPB 5 , 3)
		      (SOJG 4 , LP)
		      (POPNN 1)))
          (RETURN (OR (SUBSTRING MESSAGE 1 (SUB1 (STRPOS (FCHARACTER
							   0)
							 MESSAGE)))
		      (QUOTE ""])

(DIFFERENCE
  [LAMBDA (X Y)
    (PLUS X (MINUS Y])

(DRIBBLE
  [LAMBDA (FILE APPENDFLG THAWEDFLG)
    (PROG ((DRIBBLEFILE (SETDRIBBLEFILE)))
          (AND DRIBBLEFILE (CLOSEF DRIBBLEFILE))
          [AND FILE (SETDRIBBLEFILE
		 (OR (OPENP FILE)
		     (OPENF FILE (LOGOR 7516225536 (COND
					  (APPENDFLG 8192)
					  (T 0))
					(COND
					  (THAWEDFLG 1024)
					  (T 0]
          (RETURN DRIBBLEFILE])

(ECHOCONTROL
  [LAMBDA (CHAR MODE TTBL)                      (* dcl: 27 Oct 81 11:00)
    (PROG (X)
          (SETQ TTBL (GETTERMTABLE TTBL))
          (SETQ CHAR
	    (LOGAND
	      [COND
		((OR (AND (ILESSP [SETQ X
				    (OR (NUMBERP CHAR)
					(AND (EQ (NCHARS CHAR)
						 1)
					     (CHCON1 CHAR]
				  32)
			  (IGREATERP X -1))
		     (AND (ILESSP X 91)
			  (IGREATERP X 64))
		     (AND (ILESSP (SETQ X (IPLUS X -32))
				  91)
			  (IGREATERP X 64)))
		  X)
		(T (ERRORX (LIST 27 CHAR]
	      31))
          (SETQ X (IPLUS (ITIMES (IREMAINDER CHAR 18)
				 -2)
			 34))
          [SETQ MODE (SELECTQ MODE
			      (IGNORE 0)
			      (REAL 2)
			      (SIMULATE 3)
			      ((UPARROW INDICATE)
				1)
			      (NIL NIL)
			      (ERRORX (LIST 27 MODE]
          (SETQ CHAR (VAG (IPLUS (LOC TTBL)
				 (IQUOTIENT CHAR 18)
				 7)))
          (RETURN
	    (PROG1 (SELECTQ (LOGAND (LRSH (OPENR (LOC CHAR))
					  X)
				    3)
			    (0 (QUOTE IGNORE))
			    (2 (QUOTE REAL))
			    (3 (QUOTE SIMULATE))
			    (QUOTE INDICATE))
		   (COND
		     (MODE (CLOSER (LOC CHAR)
				   (LOGOR (LOGAND (OPENR (LOC CHAR))
						  (LOGXOR (LLSH 3 X)
							  -1))
					  (LLSH MODE X)))
			   (ASSEMBLE NIL
				     (FASTCALL SETMOD])

(EVQ
  [LAMBDA (X)
    X])

(FASSOC
  [LAMBDA (KEY ALST)
    (PROG ((Y0 ALST))
          (DECLARE (LOCALVARS Y0))
      LP  [COND
	    ((NLISTP ALST)
	      (COND
		((NULL ALST)
		  (RETURN NIL)))
	      (ERROR (QUOTE "bad argument - FASSOC")
		     Y0)                        (* Compiled, this might 
						hang, e.g. if ALST were 
						a number.)
	      )
	    ((EQ (CAAR ALST)
		 KEY)
	      (RETURN (CAR ALST]
          (SETQ ALST (CDR ALST))
          (GO LP])

(FGETD
  [LAMBDA (X)
    (COND
      [(LITATOM X)
	(COND
	  ((SUBRP X)                            (* For consistency with 
						compiled version.)
	    (CDR (GETD X)))
	  (T (GETD X]
      (T 

          (* Since FGETD would produce raadom results on this 
	  argument when compiled, give an error interpreted to
	  help user findbugs before compiling.)


	 (ERROR (QUOTE "bad argument - FGETD")
		X])

(FLAST
  [LAMBDA (X)
    (PROG ((X0 X)
	   XX)
          (DECLARE (LOCALVARS X0 XX))
      L   (COND
	    ((NLISTP X)
	      (COND
		((NULL X)
		  (RETURN XX)))
	      (ERROR (QUOTE "bad argument - FLAST")
		     X0)                        (* Compiled, this might 
						hang, e.g. if Y were a 
						number.)
	      ))
          (SETQ XX X)
          (SETQ X (CDR X))
          (GO L])

(FLENGTH
  [LAMBDA (X)
    (PROG ((X0 X)
	   (N 0))
          (DECLARE (LOCALVARS X0 N))
      LP  (COND
	    ((NLISTP X)
	      (COND
		((NULL X)
		  (RETURN N)))
	      (ERROR (QUOTE "bad argument - FLENGTH")
		     X0)                        (* Compiled, this might 
						hang, e.g. if Y were a 
						number.)
	      ))
          (SETQ X (CDR X))
          (SETN N (ADD1 N))                     (* Increment)
          (GO LP])

(FMEMB
  [LAMBDA (X Y)
    (PROG ((Y0 Y))
          (DECLARE (LOCALVARS Y0))
      LP  (RETURN (COND
		    ((NLISTP Y)
		      (COND
			((NULL Y)
			  (RETURN NIL)))
		      (ERROR (QUOTE "bad argument - FMEMB")
			     Y0)                (* Compiled, this might 
						hang, e.g. if Y were a 
						number.)
		      )
		    ((EQ X (CAR Y))
		      Y)
		    (T (SETQ Y (CDR Y))
		       (GO LP])

(FNTH
  [LAMBDA (X N)
    (COND
      ((IGREATERP 1 N)
	(CONS NIL X))
      (T (PROG ((X0 X))
	       (DECLARE (LOCALVARS X0))
	   LP  (COND
		 ((NLISTP X)
		   (COND
		     ((NULL X)
		       (RETURN NIL)))
		   (ERROR (QUOTE "bad argument - FNTH")
			  X0)                   (* Compiled, this might 
						hang, e.g. if Y were a 
						number.)
		   )
		 ((NOT (IGREATERP N 1))
		   (RETURN X)))
	       (SETQ X (CDR X))
	       (SETQ N (SUB1 N))
	       (GO LP])

(FDIFFERENCE
  [LAMBDA (X Y)
    (FPLUS X (MINUS Y])

(FIX
  [LAMBDA (X)
    (COND
      ((FIXP X))
      (T (IPLUS X])

(FIXP
  [LAMBDA (X)
    (AND (NUMBERP X)
	 (NOT (FLOATP X))
	 X])

(FMINUS
  [LAMBDA (X)
    (FLOAT (MINUS X])

(FLOAT
  [LAMBDA (X)
    (COND
      ((FLOATP X))
      (T (FPLUS X])

(FUNCTION
  [NLAMBDA (FN ENV)
    (COND
      ((NULL ENV)
	FN)
      (T [COND
	   ((LITATOM ENV)
	     (SETQ ENV (EVAL ENV (QUOTE INTERNAL]
	 (LIST (QUOTE FUNARG)
	       FN
	       (COND
		 ((STACKP ENV)
		   ENV)
		 (T (FUNCT1 ENV])

(GETPROPLIST
  [LAMBDA (ATM)
    (COND
      ((LITATOM ATM)
	(CDR ATM))
      (T (ERRORX (LIST 14 ATM])

(GETSYNTAX
  [LAMBDA (CH TABLE)                            (* dcl: 14 Jul 81 14:06)
    (PROG (X)
          [COND
	    ((AND (SMALLP CH)
		  (IGREATERP CH 0)
		  (ILESSP CH 128)))
	    ((EQ (NCHARS CH)
		 1)
	      (SETQ CH (CHCON1 CH)))
	    ((FMEMB CH
		    (QUOTE (RIGHTBRACKET LEFTBRACKET RIGHTPAREN 
					 LEFTPAREN MACRO SPLICE INFIX 
					 ESCAPE BREAK SEPR OTHER 
					 STRINGDELIM BREAKCHAR SEPRCHAR 
					 ALWAYS ALONE FIRST IMMED 
					 IMMEDIATE NONIMMED 
					 NONIMMEDIATE ESC ESCQUOTE 
					 NOESC NOESCQUOTE)))
	      (SETQ X T))
	    ((FMEMB CH
		    (QUOTE (DELETECHAR CHARDELETE CNTRLV CTRLV 
				       LINEDELETE DELETELINE RETYPE EOL 
				       NONE)))
	      (SETQ X 0))
	    (T (ERRORX (LIST 27 CH]
          (RETURN
	    (COND
	      [X
		(COND
		  [(EQ X 0)
		    (COND
		      ((EQ CH (QUOTE NONE))
			(SETQ TABLE (VAG (IPLUS (LOC (GETSYNTERMTABLE
						       TABLE))
						2)))
			(PROG ($$VAL I $$TEM1 $$TEM2)
			      (SETQ I 0)
			  $$LP(COND
				((IGREATERP I 127)
				  (RETURN $$VAL))
				((NOT
				    (PROG (J)
				          (SETQ J 0)
				      $$LP(COND
					    ((IGREATERP J 4)
					      (RETURN T)))
				          (AND
					    (EQ
					      (OPENR
						(IPLUS (LOC TABLE)
						       J))
					      I)
					    (RETURN NIL))
				      $$ITERATE
				          (SETQ J (IPLUS J 1))
				          (GO $$LP)))
				  (GO $$ITERATE)))
			      (SETQ $$TEM1 I)
			      [COND
				[$$TEM2 (FRPLACD $$TEM2
						 (SETQ $$TEM2
						   (FRPLACD
						     (CONS $$TEM1 
							   $$TEM2]
				(T (SETQ $$VAL (SETQ $$TEM2
				       (CONS $$TEM1]
			  $$ITERATE
			      (SETQ I (IPLUS I 1))
			      (GO $$LP)))
		      (T
			(AND
			  (NEQ
			    [SETQ X
			      (LOC
				(CAR
				  (VAG (IPLUS (LOC (GETSYNTERMTABLE
						     TABLE))
					      (SELECTQ CH
						       ((DELETECHAR
							   CHARDELETE)
							 2)
						       ((DELETELINE
							   LINEDELETE)
							 3)
						       (RETYPE 4)
						       ((CNTRLV CTRLV)
							 5)
						       (EOL 6)
						       (HELP]
			    1000)
			  (LIST X]
		  (T (SETQ TABLE (GETSYNREADTABLE TABLE))
		     (PROG ($$VAL I $$TEM1 $$TEM2)
		           (SETQ I 0)
		       $$LP(COND
			     ((IGREATERP I 127)
			       (RETURN $$VAL))
			     ((NOT (GETSYNTAXP I CH TABLE))
			       (GO $$ITERATE)))
		           (SETQ $$TEM1 I)
		           [COND
			     [$$TEM2 (FRPLACD $$TEM2
					      (SETQ $$TEM2
						(FRPLACD (CONS $$TEM1 
							     $$TEM2]
			     (T (SETQ $$VAL (SETQ $$TEM2 (CONS $$TEM1]
		       $$ITERATE
		           (SETQ I (IPLUS I 1))
		           (GO $$LP]
	      [(TERMTABLEP TABLE)
		(COND
		  ([EQ (SETQ CH (VAG CH))
		       (CAR (SETQ TABLE (VAG (IPLUS (LOC TABLE)
						    2]
		    (QUOTE CHARDELETE))
		  ([EQ CH (CAR (VAG (IPLUS (LOC TABLE)
					   1]
		    (QUOTE LINEDELETE))
		  ([EQ CH (CAR (VAG (IPLUS (LOC TABLE)
					   2]
		    (QUOTE RETYPE))
		  ([EQ CH (CAR (VAG (IPLUS (LOC TABLE)
					   3]
		    (QUOTE CNTRLV))
		  ([EQ CH (CAR (VAG (IPLUS (LOC TABLE)
					   4]
		    (QUOTE EOL))
		  (T (QUOTE NONE]
	      (T (SETQ TABLE (VAG (IPLUS (LOC (GETSYNREADTABLE TABLE))
					 CH 2)))
		 (SELECTQ
		   (LOC (SETQ X (CDR TABLE)))
		   (160 (QUOTE BREAKCHAR))
		   (96 (QUOTE SEPRCHAR))
		   (176 (QUOTE STRINGDELIM))
		   (40 (QUOTE ESCAPE))
		   (161 (QUOTE RIGHTBRACKET))
		   (162 (QUOTE LEFTBRACKET))
		   (163 (QUOTE LEFTPAREN))
		   (164 (QUOTE RIGHTPAREN))
		   (0 (QUOTE OTHER))
		   (SELECTQ (LOGAND (LOC X)
				    7)
			    ((5 6 7)
			      (LIST (SELECTQ (LOGAND (LOC X)
						     7)
					     (5 (QUOTE MACRO))
					     (6 (QUOTE SPLICE))
					     (7 (QUOTE INFIX))
					     (HELP))
				    (SELECTQ (LOGAND (LOC X)
						     984)
					     (512 (QUOTE ALONE))
					     (256 (QUOTE FIRST))
					     (128 (QUOTE ALWAYS))
					     (ERROR (QUOTE 
					  "Illegal readtable entry")
						    (LOC X)))
				    (COND
				      ((NEQ (LOGAND (LOC X)
						    1024)
					    0)
					(QUOTE IMMEDIATE))
				      (T (QUOTE NONIMMEDIATE)))
				    (COND
				      ((NEQ (LOGAND (LOC X)
						    32)
					    0)
					(QUOTE ESCQUOTE))
				      (T (QUOTE NOESCQUOTE)))
				    (CAR TABLE)))
			    (ERROR (QUOTE "Illegal readtable entry")
				   (LOC X])

(GETSYNREADTABLE
  [LAMBDA (TABLE)                               (* dcl: 14 Jul 81 11:57)
    (COND
      [(EQ TABLE (QUOTE ORIG))
	(VAG (GETPROP (QUOTE ORGRDT)
		      (QUOTE COREVAL]
      (T (GETREADTABLE TABLE])

(GETSYNTERMTABLE
  [LAMBDA (TABLE)                               (* dcl: 14 Jul 81 14:41)
    (COND
      [(EQ TABLE (QUOTE ORIG))
	(VAG (GETPROP (QUOTE ORGTTX)
		      (QUOTE COREVAL]
      (T (GETTERMTABLE TABLE])

(GETSYNTAXP
  [LAMBDA (CHARCODE CLASS TABLE)                (* dcl: 14 Jul 81 14:02)

          (* This is a copy of a large chunk of code from 
	  SYNTAXP. I'm just to lazy to do it right.)


    [SETQ CHARCODE (CDR (VAG (IPLUS (LOC TABLE)
				    (LOGAND CHARCODE 127)
				    2]
    (SELECTQ CLASS
	     [(BREAK SEPR)
	       (NEQ 0 (LOGAND (LOC CHARCODE)
			      (SELECTQ CLASS
				       (BREAK 128)
				       (SEPR 64)
				       (HELP]
	     [(LEFTPAREN RIGHTPAREN LEFTBRACKET RIGHTBRACKET BREAKCHAR 
			 SEPRCHAR ESCAPE STRINGDELIM OTHER)
	       (EQ (LOC CHARCODE)
		   (SELECTQ CLASS
			    (LEFTPAREN 163)
			    (RIGHTPAREN 164)
			    (LEFTBRACKET 162)
			    (RIGHTBRACKET 161)
			    (STRINGDELIM 176)
			    (ESCAPE 40)
			    (BREAKCHAR 160)
			    (SEPRCHAR 96)
			    (OTHER 0)
			    (HELP]
	     [(MACRO SPLICE INFIX)
	       (EQ (LOGAND (LOC CHARCODE)
			   7)
		   (SELECTQ CLASS
			    (MACRO 5)
			    (SPLICE 6)
			    (INFIX 7)
			    (HELP]
	     [(ALONE ALWAYS FIRST IMMED IMMEDIATE ESC ESCQUOTE NONIMMED 
		     NONIMMEDIATE NOESC NOESCQUOTE)
	       (AND (IGREATERP (LOGAND (LOC CHARCODE)
				       7)
			       4))
	       (SELECTQ CLASS
			[(NOESC NOESCQUOTE NONIMMED NONIMMEDIATE)
			  (EQ 0 (LOGAND (LOC CHARCODE)
					(SELECTQ CLASS
						 ((NOESC NOESCQUOTE)
						   32)
						 1024]
			(NEQ 0 (LOGAND (LOC CHARCODE)
				       (SELECTQ CLASS
						(ALONE 512)
						(ALWAYS 128)
						(FIRST 256)
						((ESC ESCQUOTE)
						  32)
						1024]
	     (ERROR "Illegal syntax class" CLASS])

(IDIFFERENCE
  [LAMBDA (X Y)
    (IPLUS X (IMINUS Y])

(ILESSP
  [LAMBDA (X Y)
    (IGREATERP Y X])

(IMINUS
  [LAMBDA (X)
    (FIX (MINUS X])

(LESSP
  [LAMBDA (X Y)
    (GREATERP Y X])

(LRSH
  [LAMBDA (N M)
    (LLSH N (IMINUS M])

(NEQ
  [LAMBDA (X Y)
    (NOT (EQ X Y])

(NILL
  [LAMBDA ARGS                                              (* rmk: "13-JUL-83 03:18")
    NIL])

(NLISTP
  [LAMBDA (X)
    (NULL (LISTP X])

(RELSTKP
  [LAMBDA (X)                                   (* dcl: 31 Mar 76 22:45)
    (AND (STACKP X)
	 (ZEROP (OPENR (LOC X])

(RPLACA
  [LAMBDA (X Y)
    (COND
      [(NLISTP X)
	(COND
	  [(NULL X)
	    (COND
	      (Y (ERRORX (LIST 7 Y]
	  ((ERRORX (LIST 4 X]
      (T (FRPLACA X Y])

(RPLACD
  [LAMBDA (X Y)
    (COND
      [(NLISTP X)
	(COND
	  [(NULL X)
	    (COND
	      (Y (ERRORX (LIST 7 Y]
	  ((ERRORX (LIST 4 X]
      (T (FRPLACD X Y])

(RSH
  [LAMBDA (N M)
    (LSH N (IMINUS M])

(SETA
  [LAMBDA (A N V)                               (* dcl: 20 Oct 76 20:52)
    (COND
      [(SWPARRAYP A)
	(COND
	  ([AND (IGREATERP N (IPLUS (LOC (FNOPENRA A -1))
				    -2))
		(ILESSP N (SUB1 (COND
				  ((NEQ (FNOPENRD A -2)
					(VAG 0))
				    (LOC (FNOPENRD A -2)))
				  (T (LOC (FNOPENRA A -2]
	    (FNCLOSERA A (IPLUS N -1)
		       V))
	  ((AND (IGREATERP N 0)
		(IGREATERP (SUB1 (LOC (FNOPENRA A -2)))
			   N))
	    (FNCLOSER A (IPLUS N -1)
		      V))
	  (T (ERROR (QUOTE "out of bounds SETA")
		    N]
      ((OR (NOT (ARRAYP A))
	   (NEQ A (ARRAYBEG A)))
	(ERRORX (LIST 28 A)))
      ([AND (IGREATERP N
		       (IPLUS [LOC (CAR (VAG (ADD1 (LOC A]
			      -2))
	    (ILESSP N (SUB1 (COND
			      ((NEQ (CDR A)
				    (VAG 0))
				(LOC (CDR A)))
			      (T (LOC (CAR A]
	(FRPLACA (VAG (IPLUS (LOC A)
			     N 1))
		 V))
      ((AND (IGREATERP N 0)
	    (IGREATERP (SUB1 (LOC (CAR A)))
		       N))
	(CLOSER (IPLUS (LOC A)
		       N 1)
		V))
      (T (ERROR (QUOTE "out of bounds SETA")
		N)))
    V])

(SETD
  [LAMBDA (A N V)                               (* dcl: 20 Oct 76 20:53)
    (COND
      [(SWPARRAYP A)
	(COND
	  ([AND (IGREATERP N (IPLUS (LOC (FNOPENRA A -1))
				    -2))
		(ILESSP N (SUB1 (COND
				  ((NEQ (FNOPENRD A -2)
					(VAG 0))
				    (LOC (FNOPENRD A -2)))
				  (T (LOC (FNOPENRA A -2]
	    (FNCLOSERD A (IPLUS N -1)
		       V))
	  ((AND (IGREATERP N 0)
		(IGREATERP (SUB1 (LOC (FNOPENRA A -2)))
			   N))
	    (FNCLOSER A (IPLUS N -1)
		      V))
	  (T (ERROR (QUOTE (QUOTE "out of bounds SETD"))
		    N]
      ((OR (NOT (ARRAYP A))
	   (NEQ A (ARRAYBEG A)))
	(ERRORX (LIST 28 A)))
      ([AND (IGREATERP N
		       (IPLUS [LOC (CAR (VAG (ADD1 (LOC A]
			      -2))
	    (ILESSP N (SUB1 (COND
			      ((NEQ (CDR A)
				    (VAG 0))
				(LOC (CDR A)))
			      (T (LOC (CAR A]
	(FRPLACD (VAG (IPLUS (LOC A)
			     N 1))
		 V))
      ((AND (IGREATERP N 0)
	    (IGREATERP (SUB1 (LOC (CAR A)))
		       N))
	(CLOSER (IPLUS (LOC A)
		       N 1)
		V))
      (T (ERROR (QUOTE "out of bounds SETD")
		N)))
    V])

(SETSYNTAX
  [LAMBDA (CH CLASS TABLE)
    [COND
      [(SMALLP CH)
	(COND
	  ((OR (MINUSP CH)
	       (IGREATERP CH 127))
	    (ERRORX (LIST 27 CH]
      ((EQ (NCHARS CH)
	   1)
	(SETQ CH (CHCON1 CH)))
      (T (ERRORX (LIST 27 CH]
    (COND
      [(LISTP CLASS)
	(PROG1
	  (GETSYNTAX CH (SETQ TABLE (GETREADTABLE TABLE)))
	  (SELECTQ
	    (CAR CLASS)
	    ((MACRO SPLICE INFIX)
	      (AND (NLISTP (CDR CLASS))
		   (ERRORX (LIST 27 CLASS)))
	      (PROG ((ALWAYS 1)
		     (ESCQUOTE 1)
		     FIRST ALONE (IMMED 0)
		     X)
		    (PROG ($$VAL)
		          (SETQ X (CDR CLASS))
		      $$LP(COND
			    ((OR (NLISTP X)
				 (NLISTP (CDR X)))
			      (GO $$OUT)))
		          (SELECTQ (CAR X)
				   (ALWAYS (AND (OR FIRST ALONE)
						(GO CLERR))
					   (SETQ ALWAYS T))
				   (FIRST (AND (OR (EQ ALWAYS T)
						   ALONE)
					       (GO CLERR))
					  (SETQ ALWAYS NIL)
					  (SETQ FIRST T))
				   (ALONE (AND (OR (EQ ALWAYS T)
						   FIRST)
					       (GO CLERR))
					  (SETQ ALWAYS NIL)
					  (SETQ ALONE T))
				   ((IMMED IMMEDIATE)
				     (AND (NULL IMMED)
					  (GO CLERR))
				     (SETQ IMMED T))
				   ((NONIMMED NONIMMEDIATE)
				     (AND (EQ IMMED T)
					  (GO CLERR))
				     (SETQ IMMED NIL))
				   ((ESC ESCQUOTE)
				     (AND (NULL ESCQUOTE)
					  (GO CLERR))
				     (SETQ ESCQUOTE T))
				   ((NOESC NOESCQUOTE)
				     (AND (EQ ESCQUOTE T)
					  (GO CLERR))
				     (SETQ ESCQUOTE NIL))
				   (ERRORX (LIST 27 CLASS)))
		      $$ITERATE
		          (SETQ X (CDR X))
		          (GO $$LP)
		      $$OUT
		          (RETURN $$VAL))
		    [COND
		      ((AND (NULL (CDR X))
			    (CAR X))
			(FRPLACA
			  [FRPLACD (VAG (IPLUS (LOC TABLE)
					       CH 2))
				   (VAG (LOGOR (COND
						 (ALWAYS 128)
						 (T 0))
					       (COND
						 (FIRST 256)
						 (T 0))
					       (COND
						 (ALONE 512)
						 (T 0))
					       (COND
						 ((EQ IMMED T)
						   1024)
						 (T 0))
					       (COND
						 (ESCQUOTE 32)
						 (T 0))
					       (SELECTQ (CAR CLASS)
							(MACRO 5)
							(SPLICE 6)
							(INFIX 7)
							(HELP]
			  (CAR X)))
		      (T (ERRORX (LIST 27 CLASS]
		    (RETURN)
		CLERR
		    (ERROR (QUOTE "Conflicting readmacro options")
			   CLASS)))
	    (ERRORX (LIST 27 CLASS]
      (T
	(PROG (X (MASK (VAG 255)))
	      (RETURN
		(COND
		  [(SETQ X (SELECTQ CLASS
				    (BREAK (SETQ MASK (VAG 128))
					   (VAG 160))
				    (SEPR (SETQ MASK (VAG 64))
					  (VAG 96))
				    NIL))
		    (PROG1
		      (GETSYNTAX CH (SETQ TABLE (GETREADTABLE TABLE)))
		      (AND
			(EQ
			  (LOGAND
			    [LOC (CDR (SETQ CH
					(VAG (IPLUS CH 2 (LOC TABLE]
			    (LOC MASK))
			  0)
			(FRPLACD CH X]
		  ((SETQ X (SELECTQ CLASS
				    (LEFTBRACKET (VAG 162))
				    (RIGHTBRACKET (VAG 161))
				    (LEFTPAREN (VAG 163))
				    (RIGHTPAREN (VAG 164))
				    (STRINGDELIM (VAG 176))
				    (ESCAPE (VAG 40))
				    (BREAKCHAR (VAG 160))
				    (SEPRCHAR (VAG 96))
				    (OTHER (VAG 0))
				    NIL))
		    (PROG1 (GETSYNTAX CH (SETQ TABLE (GETREADTABLE
					  TABLE)))
			   (FRPLACD (VAG (IPLUS CH 2 (LOC TABLE)))
				    X)))
		  ((EQ CLASS (QUOTE NONE))
		    (AND (NEQ [SETQ CLASS (GETSYNTAX CH (SETQ TABLE
						       (GETTERMTABLE
							 TABLE]
			      (QUOTE NONE))
			 (CLOSER (IPLUS (SELECTQ CLASS
						 (CHARDELETE 2)
						 (LINEDELETE 3)
						 (RETYPE 4)
						 (CNTRLV 5)
						 (EOL 6)
						 (HELP))
					(LOC TABLE))
				 1000))
		    CLASS)
		  ((SETQ X (SELECTQ CLASS
				    ((DELETECHAR CHARDELETE)
				      (VAG 2))
				    ((DELETELINE LINEDELETE)
				      (VAG 3))
				    (RETYPE (VAG 4))
				    ((CNTRLV CTRLV)
				      (VAG 5))
				    (EOL (VAG 6))
				    NIL))
		    (PROG1
		      (AND
			(NEQ
			  [SETQ X
			    (LOC
			      (CAR
				(SETQ CLASS
				  (VAG (IPLUS (LOC (SETQ TABLE
						     (GETTERMTABLE
						       TABLE)))
					      (LOC X]
			  1000)
			X)
		      (OR (SYNTAXP CH (QUOTE NONE)
				   TABLE)
			  (SETSYNTAX CH (QUOTE NONE)
				     TABLE))
		      (CLOSER (LOC CLASS)
			      CH)))
		  ((SELECTQ CLASS
			    ((NIL T ORIG)
			      T)
			    (OR (READTABLEP CLASS)
				(TERMTABLEP CLASS)))
		    (SETSYNTAX CH (GETSYNTAX CH CLASS)
			       TABLE))
		  (T (SETSYNTAX CH (GETSYNTAX CLASS TABLE)
				TABLE])

(SETPROPLIST
  [LAMBDA (ATM LST)
    (COND
      [(NULL ATM)
	(COND
	  (LST (ERRORX (LIST 6 LST]
      ((LITATOM ATM)
	(CDR (FRPLACD ATM LST)))
      ((ERRORX (LIST 14 ATM])

(SMALLP
  [LAMBDA (N)
    (AND (EQ (NTYP N)
	     (NTYP 1))
	 N])

(STRPOS
  [LAMBDA (PAT STRING START SKIP ANCHOR TAIL)   (* dcl: 1 Nov 82 14:13)
    [COND
      [(LITATOM PAT)
	(SETQ PAT (CDR (VAG (IPLUS (LOC PAT)
				   2]
      ((NULL (STRINGP PAT))
	(SETQ PAT (MKSTRING PAT]
    [COND
      ((STRINGP STRING))
      [(LITATOM STRING)
	(SETQ STRING (CDR (VAG (IPLUS (LOC STRING)
				      2]
      (T (SETQ STRING (MKSTRING STRING]
    (ASSEMBLE NIL
	      (CQ SKIP)
	      (CAMN 1 , KNIL)
	      (JRST A)
	      (CQ (VAG (CHCON1 SKIP)))
	      (SKIPA)
	  A   (SETO 1 ,)
	      (PUSHN 1)                         (* SKIP CHAR)
	      (CQ PAT)
	      (PUSHJ CP , UPATM)
	      (PUSHN 3)                         (* BYTE PTR. ORIG PAT)
	      (PUSHN 4)                         (* LENGTH ORIG PAT)
	      (CQ START)
	      (CAMN 1 , KNIL)
	      (SKIPA 1 , = 1)
	      (PUSHJ CP , IUNBOX)
	      (MOVE 7 , 1)                      (* SAVE START)
	      (CQ STRING)
	      (PUSHJ CP , UPATM)
	      (PUSHN 3)                         (* BYTE PTR ORIG STRING)
	      (PUSHN 4)                         (* LENGTH ORIG STRING)
	      (SKIPG 7)
	      (ADDI 7 , 1 (4))                  (* START NEG, ADD LEN+1)
	      (JUMPLE 7 , FALSE)
	      (SUBI 4 , -1 (7))
	      (JUMPLE 4 , FALSE)
	      (SUBI 7 , 1)
	      (IDIVI 7 , 5)
	      (NREF (ADDM 7 , -1))              (* UPDATE BYTE PTR TO 
						START)
	      (SKIPA)
	      (NREF (IBP -1))
	      (SOJGE 10Q , * -1)
	      (SETZ 7 ,)
	      (CQ ANCHOR)
	      (CAME 1 , KNIL)
	      (SETO 7 ,)
	  B   (NREF (MOVE 3 , -1))
	      (NREF (MOVE 5 , -3))
	      (NREF (MOVE 6 , -2))
	      (CAIGE 4 , 0 (6))
	      (JRST FALSE)
	  L   (SOJL 6 , RY)
	      (ILDB 1 , 5)
	      (ILDB 2 , 3)
	      (CAIE 1 , 0 (2))
	      (NREF (CAMN 1 , -4))
	      (JRST L)
	      (JUMPN 7 , FALSE)                 (* QUIT IF ANCHORED)
	      (SOJLE 4 , FALSE)                 (* QUIT IF STRING EMPTY)
	      (NREF (IBP -1))
	      (JRST B)
	  RY  (NREF (MOVE 1 , 0))
	      (VAR (HRRZ 2 , TAIL))
	      (CAME 2 , KNIL)
	      (NREF (ADD 1 , -2))
	      (SUBI 1 , -1 (4))
	      (PUSHJ CP , MKN)
	      (JRST OUT)
	  FALSE
	      (MOVE 1 , KNIL)
	  OUT (POPNN 5)
	      (RET])

(STRPOSL
  [LAMBDA (A STR START NEG)                     (* E (RADIX 10Q))
                                                (* Construct bit table 
						if necessary and set up 
						pointer.)
    (COND
      ((NOT (ARRAYP A))
	(SETQ A (MAKEBITTABLE A NEG STRPOSLARRAY)))
      (NEG (ASSEMBLE NIL
		     (CQ A)
		     (E (CEXP2 (QUOTE STRPOSLARRAY)))
		     (SETCM 3 , 2 (1))
		     (MOVEM 3 , 2 (2))
		     (SETCM 3 , 3 (1))
		     (MOVEM 3 , 3 (2))
		     (SETCM 3 , 4 (1))
		     (MOVEM 3 , 4 (2))
		     (SETCM 3 , 5 (1))
		     (MOVEM 3 , 5 (2)))
	   (SETQ NEG NIL)
	   (SETQ A STRPOSLARRAY)))
    (ASSEMBLE NIL
	      (CQ A)
	      (ADD 1 , = 102000002Q)
	      (PUSHN 1)
	      (PUSHN = 0))                      (* Construct byte 
						pointer and byte count 
						for atom or string.)
    (PROG NIL
      L1                                        (* Compute starting byte
						number and save on 
						number stack, replacing 
						NEG flag.)
          (ASSEMBLE NIL
		    (NREF (SETZM 0))
		    (CQ START)
		    (CAMN 1 , ' NIL)
		    (JRST CC)
		    (CQ (VAG (AC)))
		    (SUBI 1 , 1)
		    (NREF (MOVEM 1 , 0))
		    (JUMPGE 1 , CC)
		    (CQ (VAG (IPLUS (NCHARS STR)
				    START)))
		    (NREF (MOVEM 1 , 0))
		CC)
          (COND
	    ((STRINGP STR)
	      (ASSEMBLE NIL
		        (CQ STR)
		        (MOVE 1 , 0 (1))
		        (LDB 4 , = 251700000001Q)
		        (TLZ 1 , 777770Q)
		        (IDIVI 1 , 5)
		        (IMUL 2 , = -70000Q)
		        (ADDI 2 , 440700Q)
		        (HRL 1 , 2)))
	    ((LITATOM STR)
	      (ASSEMBLE NIL
		        (CQ STR)
		        (HLRZ 1 , 2 (1))
		        (HRLI 1 , 440700Q)
		        (ILDB 4 , 1)))
	    (T (SETQ STR (MKSTRING STR))
	       (GO L1)))                        (* Now have byte pointer
						in 1, count in 4)
      )
    (ASSEMBLE NIL
	      (POPN 2)
	      (JUMPL 2 , NO)
	      (SUB 4 , 2)
	      (JUMPLE 4 , NO)
	      (MOVN 4 , 4)
	      (HRLZ 4 , 4)
	      (JUMPE 2 , LP)                    (* Start at other than 
						first character, must 
						increment byte pointer.)
	      (ADD 4 , 2)
	      (IDIVI 2 , 5)
	      (ADD 1 , 2)                       (* Word part.
						Just do IBP's for byte 
						part)
	      (JUMPE 3 , LP)
	  LP1 (IBP 1)
	      (SOJG 3 , LP1)
	  LP  (ILDB 2 , 1)
	      (IDIVI 2 , 44Q)
	      (NREF (MOVE 2 , @ 0))
	      (ROT 2 , 0 (3))
	      (JUMPL 2 , YES)
	      (AOBJN 4 , LP)
	  NO  (CQ NIL)
	      (JRST OUT)
	  YES (HRRZ 1 , 4)
	      (ADDI 1 , 1)
	      (CQ (LOC (AC)))
	  OUT                                   (* E (RADIX 10))
	      (POPNN 1])

(MAKEBITTABLE
  [LAMBDA (L NEG A)                             (* E (RADIX 10Q))
    (OR (AND (ARRAYP A)
	     (IGREATERP (ARRAYSIZE A)
			3))
	(SETQ A (ARRAY 4 4)))
    (ASSEMBLE NIL
	      (CQ NEG)
	      (CAMN 1 , ' NIL)
	      (SKIPA 2 , = 0)
	      (MOVNI 2 , 1)
	      (VAR (HRRZ 3 , A))
	      (MOVEM 2 , 2 (3))
	      (MOVEM 2 , 3 (3))
	      (MOVEM 2 , 4 (3))
	      (MOVEM 2 , 5 (3))
	      (ANDI 2 , 400000Q)
	      (PUSHN 2)                         (* Construct bit table 
						from list of character 
						codes.)
	  L2  (CQ L)
	      (STE (QUOTE LISTT))
	      (JRST OUT)
	      (CQ (VAG (LOGAND (OR (NUMBERP (CAR L))
				   (CHCON1 (CAR L)))
			       177Q)))
	      (MOVE 2 , 1)
	      (IDIVI 2 , 44Q)
	      (VAR (HRRZ 4 , A))
	      (ADDI 4 , 2 (2))
	      (MOVE 1 , 0 (4))
	      (ROT 1 , 0 (3))
	      (TLO 1 , 400000Q)
	      (NREF (TSC 1 , 0))
	      (MOVN 3 , 3)
	      (ROT 1 , 0 (3))
	      (MOVEM 1 , 0 (4))
	      (CQ (SETQ L (CDR L)))
	      (JRST L2)
	  OUT (POPNN 1)
	      (CQ A)                            (* E (RADIX 10))
	  ])

(SUB1
  [LAMBDA (X)
    (IPLUS X -1])

(SYNTAXP
  [LAMBDA (CHARCODE CLASS TABLE)
    (COND
      [(FMEMB CLASS (QUOTE (CHARDELETE DELETECHAR LINEDELETE DELETELINE 
				       RETYPE CNTRLV CTRLV EOL)))
	(EQ (VAG (LOGAND CHARCODE 177Q))
	    (CAR (VAG (IPLUS (LOC (GETTERMTABLE TABLE))
			     (SELECTQ CLASS
				      ((CHARDELETE DELETECHAR)
					2)
				      ((DELETELINE LINEDELETE)
					3)
				      (RETYPE 4)
				      ((CNTRLV CTRLV)
					5)
				      (EOL 6)
				      (HELP]
      ((EQ CLASS (QUOTE NONE))
	(SETQ TABLE (GETTERMTABLE TABLE))
	(SETQ CHARCODE (VAG (LOGAND CHARCODE 177Q)))
	(PROG (I)
	      (SETQ I 2)
	  LP  (COND
		((IGREATERP I 6)
		  (RETURN T)))
	      (AND (EQ (OPENR (IPLUS (LOC TABLE)
				     I))
		       (LOC CHARCODE))
		   (RETURN NIL))
	      (SETQ I (ADD1 I))
	      (GO LP)))
      (T [SETQ CHARCODE (CDR (VAG (IPLUS (LOC (GETREADTABLE TABLE))
					 (LOGAND CHARCODE 177Q)
					 2]
	 (SELECTQ CLASS
		  [(BREAK SEPR)
		    (NEQ 0 (LOGAND (LOC CHARCODE)
				   (SELECTQ CLASS
					    (BREAK 200Q)
					    (SEPR 100Q)
					    (HELP]
		  [(LEFTPAREN RIGHTPAREN LEFTBRACKET RIGHTBRACKET 
			      BREAKCHAR SEPRCHAR ESCAPE STRINGDELIM 
			      OTHER)
		    (EQ (LOC CHARCODE)
			(SELECTQ CLASS
				 (LEFTPAREN 243Q)
				 (RIGHTPAREN 244Q)
				 (LEFTBRACKET 242Q)
				 (RIGHTBRACKET 241Q)
				 (STRINGDELIM 260Q)
				 (ESCAPE 50Q)
				 (BREAKCHAR 240Q)
				 (SEPRCHAR 140Q)
				 (OTHER 0)
				 (HELP]
		  [(MACRO SPLICE INFIX)
		    (EQ (LOGAND (LOC CHARCODE)
				7)
			(SELECTQ CLASS
				 (MACRO 5)
				 (SPLICE 6)
				 (INFIX 7)
				 (HELP]
		  [(ALONE ALWAYS FIRST IMMED IMMEDIATE ESC ESCQUOTE 
			  NONIMMED NONIMMEDIATE NOESC NOESCQUOTE)
		    (AND (IGREATERP (LOGAND (LOC CHARCODE)
					    7)
				    4))
		    (SELECTQ CLASS
			     [(NOESC NOESCQUOTE NONIMMED NONIMMEDIATE)
			       (EQ 0 (LOGAND (LOC CHARCODE)
					     (SELECTQ CLASS
						      ((NOESC 
							 NOESCQUOTE)
							40Q)
						      2000Q]
			     (NEQ 0 (LOGAND (LOC CHARCODE)
					    (SELECTQ CLASS
						     (ALONE 1000Q)
						     (ALWAYS 200Q)
						     (FIRST 400Q)
						     ((ESC ESCQUOTE)
						       40Q)
						     2000Q]
		  (ERROR "Illegal syntax class" CLASS])

(TYPEP
  [LAMBDA (DATUM N)
    (EQ (NTYP DATUM)
	N])

(ZEROP
  [LAMBDA (X)
    (EQ X 0])

(DOCOLLECT
  [LAMBDA (ITEM LST)                            (* lmm: 
						"30-SEP-76 13:03:33")
    (COND
      ((NLISTP LST)
	(FRPLACD (SETQ LST (LIST ITEM))
		 LST))
      (T (CDR (FRPLACD LST (CONS ITEM (CDR LST])

(ENDCOLLECT
  [LAMBDA (LST TAIL)
    (COND
      ((NULL LST)
	TAIL)
      (T (PROG1 (CDR LST)
		(FRPLACD LST TAIL])
)
(COND ((EQ (GETTOPVAL (QUOTE BINCOMPFLG))
	   (QUOTE NOBIND))
       [MAPC (QUOTE ((DECLARE . QUOTE)
		     (MAKEPDQ)
		     (SETCV)))
	     (FUNCTION (LAMBDA (X)
			       (PUTD (CAR X)
				     (GETD (CDR X]
       [COND ((EXPRP (GETD (QUOTE LAPRD)))
	      [PUTDQ STRPOS (LAMBDA (X Y START SKIP ANCHOR TAIL)
				    [COND [(LITATOM X)
					   (SETQ X (CDR (VAG (IPLUS (LOC X)
								    2]
					  ((NULL (STRINGP X))
					   (SETQ X (MKSTRING X]
				    [COND ((STRINGP Y))
					  [(LITATOM Y)
					   (SETQ Y (CDR (VAG (IPLUS (LOC Y)
								    2]
					  (T (SETQ Y (MKSTRING Y]
				    [COND (SKIP (SETQ SKIP (NTHCHAR SKIP 1]
				    (COND [START (COND ((MINUSP START)
							(SETQ START (IPLUS START (NCHARS Y)
									   1]
					  (T (SETQ START 1)))
				    (SETQ Y (SUBSTRING Y START))
				    (PROG ((N START)
					   W X1 Y1)
					  L2
					  (SETQ X1 (SUBSTRING X 1))
					  (SETQ Y1 (SUBSTRING Y 1))
					  LP
					  (COND [(SETQ W (GNC X1))
						 (COND ((EQ W (GNC Y1))
							(GO LP))
						       ((EQ W SKIP)
							(GO LP))
						       (T (GO NX]
						(TAIL (RETURN (IPLUS (NCHARS X)
								     N)))
						(T (RETURN N)))
					  NX
					  (COND (ANCHOR (RETURN)))
					  (COND ((GNC Y)
						 (SETQ N (ADD1 N))
						 (GO L2))
						(T (RETURN]
	      [PUTDQ STRPOSL (LAMBDA (L STR)
				     (PROG (TEM)
					   (SETQ STR (MKSTRING STR))
					   [SOME L (FUNCTION (LAMBDA (X)
								     (SETQ TEM (STRPOS X STR]
					   (RETURN TEM]
	      (PUTDQ MAKEBITTABLE (LAMBDA (X)
					  X]
       (RPAQQ NOLINKMESS T)
       (RPAQQ BINCOMPFLG T)
       (RPAQQ BINFIXFLG T)
       (SETQ STRPOSLARRAY (ARRAY 4 4))
       (RPAQQ OCOREVALS NOBIND)
       (RPAQQ SCOREVALS NOBIND)))
(RELSTK (SETQ BOUNDPDUMMY (STKNTH -1)))
(DECLARE: DOEVAL@COMPILE DONTCOPY

(ADDTOVAR GLOBALVARS STRPOSLARRAY)
)
(DECLARE: DOEVAL@COMPILE DONTCOPY

(LOCALVARS . T)
)
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
(BLOCK: SYNTAXP SYNTAXP (NOLINKFNS . T))
(BLOCK: GETSYNTAX GETSYNTAX GETSYNREADTABLE GETSYNTERMTABLE GETSYNTAXP (NOLINKFNS . T))
]
(DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML FUNCTION)

(ADDTOVAR LAMA NILL)
)
(PUTPROPS BASIC COPYRIGHT ("Xerox Corporation" 1983 1984))
(DECLARE: DONTCOPY
  (FILEMAP (NIL (3521 5354 (ALLOCSTRING 3533 . 4067) (CAAR 4071 . 4110) (CADR 4114 . 4153) (CDAR 4157 . 
4196) (CDDR 4200 . 4239) (CAAAR 4243 . 4284) (CAADR 4288 . 4329) (CADAR 4333 . 4374) (CADDR 4378 . 
4419) (CDAAR 4423 . 4464) (CDADR 4468 . 4509) (CDDAR 4513 . 4554) (CDDDR 4558 . 4599) (CAAAAR 4603 . 
4646) (CAAADR 4650 . 4693) (CAADAR 4697 . 4740) (CAADDR 4744 . 4787) (CADAAR 4791 . 4834) (CADADR 4838
 . 4881) (CADDAR 4885 . 4928) (CADDDR 4932 . 4975) (CDAAAR 4979 . 5022) (CDAADR 5026 . 5069) (CDADAR 
5073 . 5116) (CDADDR 5120 . 5163) (CDDAAR 5167 . 5210) (CDDADR 5214 . 5257) (CDDDAR 5261 . 5304) (
CDDDDR 5308 . 5351)) (5356 37994 (ABS 5368 . 5448) (ADD1 5452 . 5490) (ARRAY 5494 . 6930) (ARRAYSIZE 
6934 . 7469) (ARRAYORIG 7473 . 7569) (HARRAYSIZE 7573 . 7876) (BOUNDP 7880 . 8109) (DELETECONTROL 8113
 . 9925) (DIFFERENCE 9929 . 9981) (DRIBBLE 9985 . 10351) (ECHOCONTROL 10355 . 11642) (EVQ 11646 . 
11674) (FASSOC 11678 . 12134) (FGETD 12138 . 12557) (FLAST 12561 . 12964) (FLENGTH 12968 . 13417) (
FMEMB 13421 . 13833) (FNTH 13837 . 14323) (FDIFFERENCE 14327 . 14381) (FIX 14385 . 14454) (FIXP 14458 
. 14527) (FMINUS 14531 . 14576) (FLOAT 14580 . 14653) (FUNCTION 14657 . 14904) (GETPROPLIST 14908 . 
15016) (GETSYNTAX 15020 . 19392) (GETSYNREADTABLE 19396 . 19617) (GETSYNTERMTABLE 19621 . 19842) (
GETSYNTAXP 19846 . 21433) (IDIFFERENCE 21437 . 21492) (ILESSP 21496 . 21542) (IMINUS 21546 . 21589) (
LESSP 21593 . 21637) (LRSH 21641 . 21688) (NEQ 21692 . 21733) (NILL 21737 . 21849) (NLISTP 21853 . 
21897) (RELSTKP 21901 . 22030) (RPLACA 22034 . 22201) (RPLACD 22205 . 22372) (RSH 22376 . 22421) (SETA
 22425 . 23494) (SETD 23498 . 24575) (SETSYNTAX 24579 . 29019) (SETPROPLIST 29023 . 29204) (SMALLP 
29208 . 29277) (STRPOS 29281 . 31489) (STRPOSL 31493 . 34144) (MAKEBITTABLE 34148 . 35250) (SUB1 35254
 . 35293) (SYNTAXP 35297 . 37540) (TYPEP 37544 . 37599) (ZEROP 37603 . 37639) (DOCOLLECT 37643 . 37866
) (ENDCOLLECT 37870 . 37991)))))
STOP
