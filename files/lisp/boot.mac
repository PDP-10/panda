;<LISP>BOOT.MAC.16    13-Oct-77 16:19:00    EDIT BY HARTLEY
;FIXED PMAP AT BURNB1 SO AC3 IS 0
;<LEWIS>BOOT.MAC.1     3-Oct-77 14:17:55    EDIT BY LEWIS
; REMOVED SET NAME STUFF BECAUSE IT USED "BEING DELETED" JSYS'S
;<LEWIS>BOOT.MAC.1     7-Jun-77 23:40:38    EDIT BY LEWIS
; GET AROUND RESET/STIW BUG.
;<JWILSON>BOOT.MAC;19    14-Feb-77 16:08:32    EDIT BY JWILSON
;Fix UNJUMP ptr in 777001 for LSPGET.MAC to use, see comment at end.
;<JWILSON>BOOT.MAC;17    14-Feb-77 15:46:15    EDIT BY JWILSON
;Installed dynamic check for KL20, and use right value for THAW bit
;in OPENF, see comment at end. /jwg
;<HARTLEY>BOOT.MAC.4     7-Feb-77 22:38:15    EDIT BY HARTLEY
;<HARTLEY>BOOT.MAC.3     7-Feb-77 21:53:13    EDIT BY HARTLEY
;<HARTLEY>BOOT.MAC;1     7-Feb-77 20:20:34    EDIT BY HARTLEY
;FOR KL20
;<LISP>BOOT.MAC;10    22-OCT-74 04:14:05    EDIT BY LEWIS
; CHECK DATE AFTER ACCEPTING NEW MAKESYS NAME
;<LISP>BOOT.MAC;7     5-JUL-74 22:57:46    EDIT BY LEWIS
; FIXED SETNM

;BOOTSTRAP PROGRAM FOR STARTING LISP.
;GOTTEN INTO PAGE 777, CALLED JRST 777000 WITH AC1 CONTAINING
;JFN OF FILE BEING RUN (MAKESYS OR SYSOUT).
	TITLE	BOOT
	SEARCH	STENEX


;BEGIN WITH LITTLE BLIT TO MOVE THE STUFF UP TO RIGHT PLACE.
BLAST:	HRRZI	1,BOOTSIZE
	CAILE	1,777
	 JRST	NOJOY
	HRLI	1,TOP
	HRRI	1,777000
	BLT	1,777000+BOOTSIZE
	HRRZI	1,400000
	SKIPA	2,.+1
	XWD	1,777000
	SEVEC
BLAST1:	HRROI	1,[ASCIZ /SAVE TO FILE: /]
	PSOUT
	HRLZI	1,400003
	SKIPA	2,.+1
	XWD	100,101
	GTJFN
	 JRST	BLAST1
	HRLI	1,400000
	MOVE	2,[XWD -1,520777]	;1 PAGE @ 777 R X CW
	SETZ	3,
	SSAVE
	HALTF

NOJOY:	HRROI	1,[ASCIZ /BOOTSTRAP TOO BIG./]
	PSOUT
	HALTF

	LIT

TOP:
	PHASE	777000


START:	SKIPA	2,(1)
	XWD	0,UNJUMP	;This addr must be at 777001 for LSPGET
				;the program to GET (but not start) a
				;multi fork lisp. see LSPGET.MAC
	HRRZI	2,(1)
	HRROI	1,SYSNAM
	MOVE	3,[XWD 11110,1]		;Req. dir. thru version, & punct
	JFNS
	MOVE	1,[112,,11]	;THIS IS THE APPROVED SOFTWARE CHECK FOR
	CALLI	1,41		;TOPS-20/TENEX OS (AS AGAINST THE 1-WORD
	 HALTF			;BLT CHECK FOR PDP-10/DEC-20 HARDWARE)
	MOVE	2,[440000,,242000]  ;WE USE IT ONLY TO SET OPNFBS, OPENF
	AND	1,[100000,,770000]  ;BITS FOR AC2, WHICH MUST HAVE THAWB
	CAIN	1,40000		;OFF FOR TOPS-20, ON FOR TENEX, BECAUSE
	 TRZ	2,2000		;THEIR RESPECTIVE	TRZ	2,2000		;THE GET JSYS'S DO IT THAT WAY.
	MOVEM	2,OPNFBS	;36-BIT READ, XCT, + THAWB IF ON TOPS20

	HRROI	2,SYSNAM
	HRLZI	1,100001	;OLD FILE, SHORT CALL, STR IN 2
	GTJFN
	 JSR	TRAP
	MOVE	2,OPNFBS
	OPENF
	 JSR	TRAP
	HRRZI	3,3
	RIN
	MOVEM	2,DATEWD		;SAVE ID WRD
	BIN
	EXCH	2,DATEWD		;PUT DATE AWAY, GET ID BACK
	CAMN	2,[SIXBIT /MAKSYS/]
	 JRST	S2
	CAME	2,[SIXBIT /SYSOUT/]
	POPJ	17,
	HRRZM	1,SYSJFN
	MOVE	2,[XWD 444400,MAKNAM]
	MOVNI	3,36
	SIN	;READ IN MAKESYS-NAME BLOCK IN FILE HEADER
	HRROI	2,MAKNAM
	HRLZI	1,100001
	GTJFN
	 JRST	NOTFND
	MOVE	2,OPNFBS
	HRRZI	4,(1)
	OPENF
	 JRST	WNTOPN
	HRRZI	3,4
	RIN
	CAME	2,DATEWD
	 JRST	RONGDA

S2:	HRRZM	1,MAKJFN
;WRITE OUT NAMES OF  BOTH SINCE WE MUST RE-GTJFN LATER (AFTER RESET)
;I wonder if this double gtjfn can be avoided.

;It's hard. RESET must be done and clobbers all jfns completely except
;those with pages mapped. Those are partially clobbered. And after
;a GET has been done on a JFN, which is unavoidable in the EXEC's case
;but avoidable in SYSIN's case, a jfn is in weird mode and not good for
;much at all except PMAP's & JFNS.
	SKIPN	2,SYSJFN
	 JRST	S3
	HRROI	1,SYSNAM
	MOVE	3,[XWD 11110,1]		;Req. dir. thru version, & punct
	JFNS
S3:	HRROI	1,MAKNAM
	HRRZ	2,MAKJFN
	MOVE	3,[XWD 11110,1]		;Req. dir. thru version, & punct
	JFNS

;OK, BURN THE BRIDGES

BURNBR:	HRRZI	1,400000
	DIR			;SHUT OFF INTERRUPTS (SYSIN CASE)
	HRRZI	4,776
BURNB1:	SETO	1,
	HRLI	2,400000
	HRRI	2,(4)
	SETZ 3,	;TOPS-20 RESET TREATS AC3 AS THE DEFERRED INTERRUPT WORD
	PMAP
	SOJGE	4,BURNB1		;CLEAR MEMORY EXCEPT US (TOP PGE)
	RESET	;BLOW THE LOWER FORKS, & KILL ALL JFNS.
	HRROI	2,MAKNAM	;GET OUR JFNS AGAIN
	JSR	OPNF
	MOVEM	2,MAKFPN
	HRRZM	1,MAKJFN
	SKIPN	1,SYSJFN		;DID WE HAVE A SYSOUT (OR JUST MAKESYS)
	 JRST	STAR
	HRROI	2,SYSNAM
	JSR	OPNF
	MOVEM	2,SYSFPN
	HRRZM	1,SYSJFN
STAR:	HRL	1,MAKJFN
	MOVEM	1,MYJFNS
	JSR	LOADIT		;MAP IN ALL THE PAGES
	HRLZI	1,400000
	HRLZI	2,120400		;IF NO SYSOUT, MAKESYS MADE 1ST
	SPACS				;PAGE R,E ONLY.
	HLRZ	1,MYJFNS
	HRLI	1,400000
	CLOSF
	 JFCL
	HRRZ	1,MYJFNS
	HRLI	1,400000
	CLOSF
	 JFCL
	MOVE	1,[XWD TMPDAT,1000-DATSIZ]	;MOVE MAKNAM, DATWRD ETC
	BLT	1,777		;TO PAGE 0, SO SYSOUT CAN FIND.
	MOVE	7,[XWD	WINGIT,1]
	BLT	7,5
	JRST	4
WINGIT:	-1
	XWD	400000,777
	0
	PMAP	;THIS KILLS BOOT
UNJUMP:	JRST	141	;AND STARTS THE WORLD RUNNING.
			;This is the JRST which is overwritten by a
			;HALTF by LSPGET.MAC 

GETDIR:	0
	HRRZI	1,1
	STDIR
	 JFCL
	 SETO	1,
	JRST	@GETDIR

OPNF:	0
	HRLZI	1,100001	;OLD FILE, SHORT CALL
	GTJFN
	 JSR	TRAP
	MOVE	2,OPNFBS
	OPENF
	 JSR	TRAP
	HRRZI	3,^D35	;GET 1STFPN
	RIN
	JRST	@OPNF


TRAP:	0
	HRROI	1,[ASCIZ /
TRAP IN LISP BOOT AT PC /]
	PSOUT
	MOVE	2,TRAP
	HRRZI	3,10
	HRRZI	1,101
	NOUT
	 JFCL
	HRROI	1,[ASCIZ /
TENEX SAYS:
/]
	MOVEI 2,-1
	JSR ERRSTR
	HRRZI	1,400000
	SKPIR	;WILL SKIP IF CALLED FROM SYSIN AND BRIDGES
	 HALTF	;NOT BURNED.
	POPJ	17,

RONGDA:	RLJFN
	 JFCL
	HRROI	1,[ASCIZ /
THE DATE ON YOUR SYSOUT DOESN'T MATCH THE DATE ON YOUR
MAKESYS. YOUR MAKESYS WAS NAMED /]
	PSOUT
	HRROI	1,MAKNAM
	PSOUT
	JRST	TRYAGN
WNTOPN:	EXCH	1,4
	RLJFN
	 JFCL
	HRROI	1,[XWD -1,[ASCIZ /
I CANNOT OPEN /]]
	JRST	PUNT

NOTFND:	HRRZI	4,(1)
	HRROI	1,[ASCIZ /
I CANNOT FIND /]
PUNT:	PSOUT
	HRROI	1,MAKNAM
	PSOUT
	HRROI	1,[ASCIZ /
BECAUSE /]
	HRRI	2,(4)
	JSR ERRSTR
TRYAGN:	HRROI	1,[ASCIZ /
NEW MAKESYS NAME: /]
	PSOUT
	HRLZI	1,3
	MOVE	2,[XWD	100,101]
	GTJFN
	 JRST	TRYAGN
	HRRZI	2,(1)
	HRROI	1,MAKNAM
	MOVE	3,[XWD 11110,1]		;Req. dir. thru version, & punct
	JFNS
	HRRZI	1,(2)
	MOVE	2,OPNFBS
	HRRZI	4,(1)
	OPENF
	 JRST	WNTOPN
	HRRZM	1,MAKJFN
	MOVEI 3,4		;CHECK THE DATE AGAIN
	RIN
	CAME 2,DATEWD
	 JRST RONGDA

;NOW TRY TO WRITE THE CORRECT NAME ONTO THE SYSOUT SO THIS CHARADE
;DOESN'T HAPPEN NEXT TIME.
	HRROI	2,SYSNAM
	HRLZI	1,100001
	GTJFN
	 JRST	BURNBR	;OH WELL. PROBABLY NEVER HAPPENS
	HRRZI	4,(1)
	MOVE	2,OPNFBS
	TRO	2,100000	;ADD WRITE BIT --> R,E,W, MAYBE THAWED
	OPENF
	 JRST	CNTOPN
	HRRZI	2,5	;ADDR MAKESYS NAME IN SYSOUT HDR
	SFPTR
	 JRST	CNTWRT
	MOVE	2,[XWD 444400,MAKNAM]
	MOVNI	3,^D30
	SOUT
CNTWRT:	HRRZI	1,(4)
	CLOSF
	 JFCL
	JRST	BURNBR

CNTOPN:	HRRZI	1,(4)
	RLJFN
	 JFCL
	JRST	BURNBR

;WRITE A MESSAGE AND AN ERROR MESSAGE
;MESSAGE IN 1, ERROR # IN 2

ERRSTR:	0
	PSOUT
	HRRZI	1,101
	HRLI	2,400000
	SETZ	3,
	ERSTR
	 JFCL
	 JFCL
	JRST @ERRSTR

;MAKMWD & SYSMWD READ ONE MAPWRD AND ZERO MAKJFN OR SYSJFN
;IF EXHAUSTED. OTHERWISE SETUP MFRKPN &  SFRKPN FROM FORK PAGE NUM
;FIELD OF MAPWORD, & MAKCNT OR SYSCNT FROM COUNT FIELD.
;MAKBLK MAPS IN PAGES UNTIL THE NEXT PAGE IT WOULD MAP
;IS THE NEXT ONE SYSBLK WILL DO (I.E. MFRKPN=SFRKPN)
;SYSBLK MAPS IN ITS WHOLE BLOCK, AND THEN FLUSHES PAGES FROM
;THE MAKESYS UNTIL THE MAKESYS IS PAST THE LAST PAGE SYSOUT BROUGHT
;IN. THEN SYSBLK GETS ITS NEXT BLOCK WORD IN, AND YOU LOOP.
LOADIT:	0
	SKIPE	SYSJFN
	 JSR	SYSMWD
	JSR	MAKMWD
LP:	JSR	MAKBLK
	JSR	SYSBLK
	SKIPN	SYSJFN
	SKIPE	MAKJFN
	 JRST	LP
	JRST	@LOADIT



;SYSBLK IS CALLED WITH ONE BLOCK (1 MAPWD) FROM SYSOUT. ALL OF IT
;IS TO BE BROUGHT IN, THEN THE MAKESYS STREAM UPDATED TO SKIP OVER
;THE STUFF WE FOUND IN THE SYSOUT.
SYSBLK:	0
	SKIPN	SYSJFN
	 JRST	@SYSBLK		;RUNNING A MAKESYS OR SYSOUT EXHAUSTED
	HRL	1,SYSJFN
	HRR	1,SYSFPN
	HRRZ	2,SFRKPN
	HRRZI	3,(2)
	ANDI	2,777
	LSH	3,-11
	SKIPN	4,FRKTAB(3)
	 JSR	MAKFRK
	HRLI	2,(4)
	HRLZI	3,120400	;SYSOUT PP ALWAYS R,E,CW
	JSR	MAPPAG
	SOSG	SYSCNT
	 JRST	FLUMKP
	AOS	SYSFPN
	AOS	SFRKPN
	JRST	SYSBLK+1

;NOW FLUSH MAKESYS TO CURRENT POINT
FLUMKP:	SKIPN	MAKJFN
	 JRST	NXSYBL		;MAKESYS DONE ANYWAY.
	HRRZ	1,MFRKPN
	CAMLE	1,SFRKPN
	 JRST	NXSYBL		;NOTHING (NO MORE) TO FLUSH
	ADD	1,MAKCNT	;COMPUTE HIGHEST PAGE SPECIFIED IN
	SUBI	1,1		;THIS MAKESYS BLOCK
	CAMLE	1,SFRKPN	;WHOLE MAKESYS BLOCK FLUSHABLE?
	 JRST	COUNTM		;NO
	HRRZ	1,MAKCNT
	ADDM	1,MAKFPN
	JSR	MAKMWD		;GET A MAKESYS MAPWORD
	JRST	FLUMKP

COUNTM:	SUB	1,SFRKPN	;COMPUTE #PP THIS MAKSYS BLOCK WHICH
				;SHOULDN'T BE FLUSHED & PUT
	EXCH	1,MAKCNT	;INTO REMAINING COUNT. COMPUTE # SKIPPED
	SUB	1,MAKCNT	;& UPDATE CURRENT FILE PAGE #.
	ADDM	1,MAKFPN
	ADDB	1,MFRKPN	;AND FORK PAGE NUMBER, AND CHECK LATTER.
	SUBI	1,1
	CAMN	1,SFRKPN
	 JRST	NXSYBL
	HRROI	1,[ASCIZ /COUNT SCREWED./]
	PSOUT
	HALTF

NXSYBL:	JSR	SYSMWD
	AOS	SYSFPN
	JRST	@SYSBLK


MAKMWD:	0	;GET A MAKESYS MAP WORD, SPREAD PIECES AROUND
	HRRZ	1,MAKJFN
	BIN
	JUMPN	2,GMWD1
	SETZM	MAKJFN		;FLAG SEZ IT'S FINISHED
	JRST	@MAKMWD
GMWD1:	HLRZM	2,MAKCNT
	;HERE MUST TEST FOR VALUES OTHER THAN FORK&PAGE#
	HRRZM	2,MFRKPN
	JRST	@MAKMWD
;DITTO SYSOUT
SYSMWD:	0
	HRRZ	1,SYSJFN
	BIN
	JUMPN	2,SMWD1
	SETZM	SYSJFN
	JRST	@SYSMWD
SMWD1:	HLRZM	2,SYSCNT
	HRRZM	2,SFRKPN
	JRST	@SYSMWD

;HERE TO MAP IN BLOCKS FROM MAKESYS. MUST STOP WHEN REACH THE
;NEXT PAGE SPECIFIED IN SYSOUT, IF ANY.
MAKBLK:	0
	SKIPN	MAKJFN
	 JRST	@MAKBLK		;MAKESYS EXHAUSTED
	HRRZ	2,MFRKPN
	SKIPN	SYSJFN
	 JRST	MKB1		;SYSOUT EXHAUSTED OR NONE
	CAML	2,SFRKPN
	 JRST	@MAKBLK		;SYSOUT HAS NXT PAGE, LET HIM
MKB1:	HRRZI	3,(2)		;GOOD PAGE FROM MAKESYS
	ANDI	2,777
	LSH	3,-11
	SKIPN	4,FRKTAB(3)
	 JSR	MAKFRK
	HRLI	2,(4)
	HRLZI	3,120000	;MAKESYS PP ALL R,E
	HRL	1,MAKJFN
	HRR	1,MAKFPN
	JSR	MAPPAG
	AOS	MAKFPN
	AOS	MFRKPN
	SOSLE	MAKCNT
	 JRST	MAKBLK+1
	JSR	MAKMWD
	SKIPN	MAKJFN
	 JRST	@MAKBLK		;MAKESYS EXHAUSTED
	JRST	MAKBLK+1

MAPPAG:	0
	MOVE	4,2
	RPACS
	TLNN	2,10000
	 JSR	TRAP
	MOVE	2,4
	PMAP
	JRST	@MAPPAG

MAKFRK:	0
	MOVE	5,1
	SETZ	1,
	CFORK
	 JSR	TRAP
	MOVEM	1,FRKTAB(3)
	HRRZI	4,(1)
	MOVE	1,5
	JRST	@MAKFRK

TMPDAT:	;BEGINNING OF DATA AREA THAT GOES INTO PAGE 0 WHEN DONE
	;TO PROVIDE SYSOUT WITH NECESSARY INFORMATION.
MYJFNS:	0
FRKTAB:	400000	;CROCK TO AVOID SUBI 1. 1ST ENTRY IS MAINFORK
	BLOCK 17
MAKNAM:	BLOCK	^D30
DATEWD:	0		;SYSDAT IN PAGE 0
DATSIZ==.-TMPDAT
;END AREA FOR PAGE 0
SYSNAM:	BLOCK	^D28
MAKJFN:	0
SYSJFN:	0
MAKCNT:	0
SYSCNT:	0
MFRKPN:	0
SFRKPN:	0
MAKFPN:	0
SYSFPN:	0
OPNFBS:	0	;WORD TO HOLD AC2 FOR OPENF'S
		;36BIT R,E, THAWED AS PER LOCAL MACHINE

	LIT
BOOTSIZE==.-START-1
	DEPHASE
	END	BLAST

;There is a rather devious Tenex bug/feature behind the READ bit in
;the OPENF in the code below TRYAGN, where the SYSOUT file is being
;written to update its daddy name. The jfn opened there is never
;read, but without the read  bit on, the CLOSF will have two
;bad effects: it sets the EOF pointer to be the place where
;the last byte of the SOUT (to write the daddy name) was
;done, and it ZERO'S THE REST OF THE FUCKING PAGE!
;Why, you ask, as well you might. Duh, well, for 10-50, as it happens.
;Might have known. Anyway, if a file is open for writing and at the
;time of closing the current file pointer is = the dynamic EOF, the
;static EOF is reset to that value and the rest of the page is zero'd.
;The static EOF is what you see in QFD  I guess; it stays around
;when the file is not in use. The dynamic EOF is (my name for) the
;maximum address written so far. Now, when a file is opened for write
;only and not in append mode, the dynamic EOF is initialized to zero.
;Otherwise it is initialized to the static EOF. Thereafter, it can only
;be increased. It is checked after write operations and if the last
;write was > then it is increased to that value. This explains a mild
;problem we had that BOOT's update daddyname code was causing the EOF
;to get reset to 35. What I didn't know was that it was also zeroing
;the rest ff the page! To my mind, this should have been done in PA10-50
;rather than JSYS's, since its purpose was stated to be to rescue 10-50
;programs which assume that words past the EOF are always zero.
;Such is life. By opening for reading also, the OPENF causes the dynamic
;eof to get initialized to the value of the static EOF when opening
;(instead of to zero). Thus, when it is closed, the static EOF does not
;get reset and the page does not get zeroed, because the current file
;pointer at time of closing is 35 and the dynamic EOF is some
;large value.
;Yea, Tenex.


;jwg around 1975

When converting to DEC-20 it was discovered that various errors arose,
particularly w.r.t. running multiple users at once, whether in the same
job or directory, or not. Our final analysis: the GET jsys, which of
course does internal calls to other jsys's and especially to OPENF,
uses the THAW bit = 1 on TENEX, but = 0 on TOPS-20. Both systems
require that all attempts to open a file have thaw bit in agreement
with any outstanding opens at the time a new open is attempted.
Thus all calls to OPENF in the BOOT program absolutely must use the
THAW bit the same way as the GET jsys on the local system. True, one
could get rid of the jfn which had been GET'd and then reopen the thing
any way you pleased -- but then as long as you were running it would be
impossible for you or anyone else to start lisp normally, because a new
GET would fail. Hence OPNFBS (OPENF Bits) has been implemented as a 
dynamically computed correct OPENF mask for R,E access, with thawed bit
set correctly for the local system. Where write access is needed (in the
code to update daddy name) this mask is also used, and the write bit
turned on. 

	A further comment on the above long comment about EOF's: on
TOPS-20 there is a bit in CLOSF which suppresses update of the eof. That
is exactly what is needed here, but it does not appear in the TENEX jsys
manual. I predict someday we lose because failure to set the bit in 
CLOSF will lead to TOPS-20 updating the EOF despite the read bit being
on.
	Comment on comments: at various points I have corrected comments
saying ON/OFF instead of OFF/ON w.r.t. the thaw bit on TENEX/TOPS-20.
So as far as parity of the damn thing goes, believe the code.
/jwg feb 1977

The separate program LSPGET.MAC really should be part of this one but
space does not permit. Accordingly word 777001 has been defined as a
pointer to UNJUMP, which is the place where the JRST 141 is stored which
will finally start the GET'd lisp running. (However the JRST is moved to
ac's before it is atually executed.) LSPGET modifies the JRS to be a 
HALTF so that BOOT will GET the lisp, and wipe itself out, but then
halt, leaving no traces of funny business except junk in the regs.
  