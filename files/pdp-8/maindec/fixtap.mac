	TITLE FIXTAP Read a PDP-8 format binary tape into a PDP-10 file
	SUBTTL Mark Crispin, 8/86

	SEARCH MACSYM,MONSYM
	STDAC.
	.REQUIRE SYS:MACREL

FIXTAP:	RESET%			; init I/O
	MOVE P,[IOWD PDLLEN,PDL] ; load PDP
	DO.
	  TMSG <Input file: >	; get input file, allow wildcards
	  MOVX T1,GJ%OLD!GJ%IFG!GJ%CFM!GJ%FNS!GJ%SHT
	  MOVE T2,[.PRIIN,,.PRIOU]
	  GTJFN%
	  IFNSK.		; not IFJER. so can run on Tenex
	    JSERR		; output message and loop on error
	    LOOP.
	  ENDIF.
	ENDDO.
	MOVEM T1,INJFN		; save input JFN
	DO.			; for each file in the spec...
	  MOVX T1,.PRIOU	; output name of the file we're doing
	  HRRZ T2,INJFN
	  MOVX T3,JS%SPC
	  JFNS%
	  HRRZ T1,INJFN		; open in 8-bit image (for PTR) mode
	  MOVX T2,<<FLD 8,OF%BSZ>!<FLD .GSIMG,OF%MOD>!OF%RD>
	  OPENF%
	  IFNSK.
	    JSERR		; output message on error
	    MOVE T1,INJFN	; and try next file in series
	    GNJFN%
	     EXIT.		; none left to do
	    LOOP.		; found another one, try it
	  ENDIF.
	  HRROI T1,STRBUF	; build a string with the input filename
	  HRRZ T2,INJFN
	  MOVX T3,<FLD .JSAOF,JS%NAM> ; but without the extension
	  JFNS%
	  HRROI T2,[ASCIZ/.OBJ/] ; use "OBJ" as the extension
	  SETZ T3,
	  SOUT%
	  MOVX T1,GJ%SHT!GJ%FOU	; get a JFN on the resulting name
	  HRROI T2,STRBUF
	  GTJFN%
	   JSHLT
	  MOVEM T1,OUTJFN	; save output JFN
	  MOVX T2,<<FLD 8,OF%BSZ>!OF%WR> ; open for write
	  OPENF%
	   JSHLT
	  DO.			; locate header (series of 200 bytes)
	    HRRZ T1,INJFN
	    BIN%
	     EJSHLT
	    CAIE T2,200
	     LOOP.
	  ENDDO.
	  TMSG <...header>
	  HRRZ T1,OUTJFN	; found header, output its first byte
	  BOUT%
	  DO.			; locate data (first non-200 byte)
	    HRRZ T1,INJFN
	    BIN%
	     EJSHLT
	    HRRZ T1,OUTJFN
	    BOUT%
	    CAIN T2,200
	     LOOP.
	  ENDDO.
	  DO.			; for each data byte...
	    TMSG <...data>
	    SETZ P3,		; init checksum
	    DO.
	      ADD P3,T2		; add byte in checksum
	      MOVE P2,P1	; save old previous byte
	      MOVE P1,T2	; and make this byte the "previous"
	      HRRZ T1,INJFN	; get next data byte
	      BIN%
	       EJSHLT
	      HRRZ T1,OUTJFN	; copy it to the output file
	      BOUT%
	      CAIE T2,200	; found trailer?
	       LOOP.		; not yet
	    ENDDO.
	    LSH P1,1		; checksum is in the last two bytes, which were
	    SUB P3,P1		;  added to the checksum we computed.  After
	    SUB P3,P2		;  subtracting them out, we assemble a checksum
	    LSH P2,6		;  from the last two bytes (P1 + P2*2^6) and
	    SUB P3,P2		;  subtract that.  The result should be zero.
	    ANDI P3,7777	;  Actual formula is P3 - 2*P1 - P2 - P2*2^6
	    IFN. P3		; barf if bad checksum
	      TMSG <!!!BAD CHECKSUM!!!>
	    ENDIF.
	    TMSG <...trailer>
	    DO.			; process trailer, look for EOF or more data
	      HRRZ T1,INJFN
	      BIN%
	      IFE. T2		; if a null, may be EOF (this way so we can
		GDSTS%		;  run under Tenex)
	      TXNN T2,GS%EOF	; really an EOF?
	       TDZA T2,T2	; no, a legitimate null
	      ANNSK.
		TMSG <...EOF>
		SETZ T2,	; zero byte as flag to get out
	        EXIT.		; leave this loop
	      ENDIF.
	      CAIE T2,200	; another header byte?
	       EXIT.		; no, exit loop
	      HRRZ T1,OUTJFN	; yes, copy it
	      BOUT%
	      LOOP.
	    ENDDO.
	    HRRZ T1,OUTJFN	; close output file
	    CLOSF%
	     JSHLT
	    TMSG < [OK]
>				; indicate this file is closed ok
	    JUMPE T2,ENDLP.	; if EOF (null can't be first byte), done
	    PUSH P,T2		; save first data byte of next segment
	    DO.
	      TMSG <Next segment file: > ; get next segment name from user
	      MOVX T1,GJ%FOU!GJ%CFM!GJ%FNS!GJ%SHT
	      MOVE T2,[.PRIIN,,.PRIOU]
	      GTJFN%
	      IFNSK.
		JSERR		; message and loop on error
		LOOP.
	      ENDIF.
	    ENDDO.
	    MOVEM T1,OUTJFN	; save new output JFN
	    MOVX T2,<<FLD 8,OF%BSZ>!OF%WR> ; open it for write
	    OPENF%
	     JSHLT
	    TMSG <...header>
	    MOVE T1,OUTJFN	; prepare to output a header
	    MOVX T2,200
	    MOVX T3,^D20	; output 20 bytes of header
	    DO.
	      BOUT%
	      SOJGE T3,TOP.
	    ENDDO.
	    POP P,T2		; get that first data byte back
	    BOUT%		; output it
	    LOOP.		; continue with rest of file
	  ENDDO.
	  HRRZ T1,INJFN		; end of input file, close it
	  TXO T1,CO%NRJ		; but leave the JFN in case wildcard
	  CLOSF%
	   JSHLT
	  MOVE T1,INJFN		; get next file in spec
	  GNJFN%
	  IFSKP. <LOOP.>	; got one, go do it
	ENDDO.
	TMSG <Done!
>
	HALTF%			; finis
	JRST .-1

STRBUF:
PDL:	BLOCK <PDLLEN==100>
INJFN:	BLOCK 1
OUTJFN:	BLOCK 1

	END FIXTAP
