usage: SHARE <new file name> <program to be run>
================================================================================

SHARE constructs compact, sharable programs from other sharable programs that
have been "suspended".  It was originally intended for subsystems such as
Maclisp, but it can be used with any program that has a suspend feature.  An
example will make this clear.  Lisps have a suspend function that halts the
Lisp and allows its core image (with all the user functions and data intact)
to be saved as a .EXE file.  When the suspended .EXE file is run, it will resume
from where it suspended, giving the appearance of never having left the
interpreter.  Thus the user can create "real" programs from Lisp.  The
disadvantage is that the user must save in his .EXE file a copy of the whole
interpreter, not just his functions and data.  Not only does this produce large
.EXE files, but it also reduces the amount of execution time sharing of the
Lisp.  Normally, if 10 people are all running the same Lisp, there will be
only one actual copy of the Lisp .EXE file in memory.  But when a user creates
his own suspended version of Lisp, he is no longer sharing the original copy
when he runs his program.  Since Lisps tend to be large, this can put quite
a drain on the operating system.  Some Lisps allow the user to save only the
parts of his program that are "private" to him;  when he runs his program,
the original sharable part of the Lisp is loaded in.  Maclisp does not yet
provide this facility, though TLisp does.

SHARE provides a good approximation to "sharable suspension".  To create a
special version of Lisp that shared the original Lisp, one would give the
following commands:

    @SHARE MYPROG SYS:LISP
    *(load 'myfunctions)
    *(suspend)

This runs the original Lisp, loads in some user functions, and then suspends.
At that point SHARE saves in MYPROG.EXE only that part of the core image that
is not shared with SYS:LISP.EXE, plus some state information.  When MYPROG.EXE
is started, it will first restore the shared part of SYS:LISP.EXE, and then
return from the (suspend).

Note that SHARE is completely language independent and can be used with any
program that can be STARTed after it has halted.  For instance, a Bliss program
that calls the Bliss Runtime library SUSPEND can be made sharable with SHARE.
Note also that unlike TLisp or TOPS-20 Maclisp, several layers of shared
programs can be constructed;  for example, suppose that with SHARE we built
program C from program B, and B was built from program A.  Then both programs
C and B will share the same parts of A, and program C will share parts of B.

Implementation notes:  it's all magic.
