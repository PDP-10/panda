	Title WHelp - Ascii text for Help commands

Comment \


Written by ...	Tad Marshall, American Express Co., March - November 1981


			Table of Contents	      Page(s)

\


; Internal data symbols (for Help texts) ...

	Intern HlpAcc, HlpBel, HlpCon, HlpDef, HlpDis, HlpExi, HlpSta
	Intern HlpKee, HlpKil, HlpLog, HlpPsh, HlpRed, HlpRef, HlpRPs
	Intern HlpTer, HlpSnd, HlpSil, HlpTak, HlpWht, HlpPrg, HlpBac
	Intern HlpOne, HlpMlt, HlpKey, HlpPF1, HlpPF2, HlpPF3, HlpPF4
	Intern HlpEnt, HlpCnL, HlpHlp, HlpBla, HlpCmd, HlpOrd, HlpRen
	Intern HlpSho, HlpWin, HlpRWi, HlpInf, HlpPau, HlpZer, HlpTra
	Intern HlpUpa, HlpDna, HlpLfa, HlpRta, HlpPer, HlpSex, HlpRex
	Intern HlpRdi, HlpDf,  HlpWai, HlpMrg, HlpPad, HlpDet


HlpAcc:	Asciz/
The Accept command tells Window to display non-Discarded output for any or all
subjobs.  The format of the Accept command is:

	Accept (output from subjobs) xxx

where "xxx" is either a subjob name or "All".  The default is "All".

The opposite of Accept is Refuse, or No Accept.

/


HlpBac:	AsciZ/
Window was written as a replacement for PTYCON.  It uses the same
general technique for controlling subjobs that PTYCON uses ... Window
assigns a PTY (pseudo-terminal) to itself, and "types on" and "reads
from" the PTY as if it were a person sitting at a real terminal.

The major departure that Window makes from PTYCON's scheme is that
Window simulates (to the subjob) not just a "dumb" terminal, but a
somewhat "smart" terminal, the VT100.  Window can handle any VT100
addressing sequence, line and screen clears, and will even provide an
answerback ("What kind of terminal are you?", or "Where is the cursor
now?") to a program which requests one.

Window internally stores all subjob output as line images, with all
renditions (bold, blinking, underscored and inverted) and graphics
supported.  Window is then free to display this stored output in any
way and at any time ...  including as a "window" on the real
terminal's screen.  Also, since the subjob output has already been
interpreted as VT100 output before being stored, Window can display
the stored output on a different type of terminal.  At the moment,
Window can display its output on a VT100, VT52 or IBM 3101 terminal.
A qualified hacker could add support for other terminals.

Some Window "features" which may not have been well advertised ...
  1)  Window strives to send its output to the terminal in the most efficient
	possible way.  This means that Window will use somewhat bizarre
	combinations of characters to move around on the screen,  such as:
	a bare linefeed, tab-backspace, linefeed-backspace, etc.  Window will
	also skip over unchanging characters (most of the time) rather than
	rewriting them, even if the subjob rewrote them.  Thus, control-R,
	control-U and control-W are handled very differently when a subjob is
	run under Window.
  2)  Window is fully reentrant, and is written to have a small working set.
	This may not make Window run fast all the time, but it should help.
  3)  Window was written with smooth scrolling in mind, although there is
	no requirement.  The "sliding" windows when using PF4 to move from
	one window to the next in Multi-Window-Mode are particularly designed
	to work with smooth scrolling ... the effect should be quite pleasing.
  4)  Window is heavily interrupt driven.  PTY output is obtained at level 1
	(the highest interrupt level), screen output is displayed at level 2
	while a timer runs at level 3.  This should help Window to run in
	one of the "high" interactive queues while it is active, thus
	assuring relatively fast response time.
  5)  Great care has been taken to prevent screen glitches ... display errors
	due to programming errors in Window.  Type a control-L (or use the
	Redisplay command) to see what should be on the screen if you have
	any doubts about what you see.
  6)  Any key which is "stolen" by Window can still be sent to the subjob
	if it preceded by Break.  Thus, to send a control-L to a subjob,
	you would type Break then Control-L (while connected).  This assumes
	that the subjob is defined as Opaque (the default) ... the subjob
	may be set Transparent (with "Window xxx (is) Transparent"), in which
	case these are reversed:  the control-L (or whatever) would ordinarily
	be sent directly, and must be preceded by a Break in order to act as
	a redisplay command.
  7)  Window will schedule an interrupt for itself after it finishes doing
	something at interrupt level.  These self-inflicted interrupts come
	every second at first (right after an event), then every two seconds,
	then every four seconds, etc.  In this way, Window is assured of
	catching "lost" interrupts, yet it will go "quiescent" in fairly
	short order, and will not waste too much CPU time while there is
	nothing to do.  Window will interrupt itself every ten seconds
	while pushed in Bell mode while there is undisplayed subjob
	output (so it can ding the bell as required).
  8) Since you can specify which EXEC to run when you push out of Window, you
	are free to push to a multi-forking EXEC, if you have one available.
	If you like to use a multi-forking EXEC, this is the prefered way of
	using one, since Window can continue to collect subjob output while
	you are pushed.  Note also, the keypad Zero key, which will perform an
	"instant Push" from any state ... very handy for getting back to a
	"local" job while connected to (controlling) a "distant" job.

Window was designed and written by Tad Marshall at American Express
Co. in New York.  Many improvements have been made at Bankers Trust
Co.  Bug reports, comments and complaints are invited ...

/


HlpBel:	AsciZ/
The Bell command is obsolete.  Is exists only for compatability with
PTYCON.

/


HlpBla:	AsciZ/
The Blank command tells Window to blank (erase) its Command Level
window.  This might be desired if you wanted to clear unwanted
commands from the screen.  Blanked lines may be recalled to the screen
with the usual tracing keys.  The format of the Blank command is:

	Blank (Command Level window)

/


HlpCmd:	AsciZ\
The commands available in Window are:  ("xxx" may be a subjob name or "All")

Accept (output from subjobs) xxx
	Output from subjob "xxx" may be typed or displayed, if not Discarded

Blank (Command Level window)
	Clears the Command Level window

Connect (to subjob) xxx
	Characters typed after giving this command will be directed to subjob
	"xxx" until you reconnect to command level (e.g. via control-X)

Define (subjob) xxx (alias) yyy
	Creates a new subjob and gives it the two names "xxx" and "yyy"

Df (define fork) xxx (running program) yyy (with rescan text) zzz
	Creates a new subfork named "xxx" running program "yyy"

Discard (output from subjobs) xxx
	Output from subjob "xxx" may be disposed of without being displayed

Exit (from Window)
	Return to EXEC (stop running Window)

Help (with) aaa
	Provides help in using Window ... "aaa" may be a feature, command or
	other item of interest

Information (about global parameters)
	Types the current settings of several global (non-subjob-specific)
	parameters, e.g. terminal type, Bell mode

Keep (output from subjobs) xxx
	Opposite of Discard command

Kill (subjob) xxx
	Logs out and un-Defines subjob "xxx"

Log (output to file) file.ext
	Tells Window to log all typeout (from itself and all subjobs) to
	the specified file ... this file will be a valid record of all
	activity, regardless of what happens on the screen

No Accept (output from subjobs) xxx
	Opposite of Accept command

No Discard (output from subjobs) xxx
	Opposite of Discard command

No Keep (output from subjobs) xxx
	Same as Discard command

No Log (output to file)
	Stops logging to file specified in previous Log command

No Refuse (output from subjobs) xxx
	Same as Accept command

No Silence (all output to terminal)
	Opposite of Silence command

Order (of subjobs is) xxx yyy zzz ...
	Specifies a new order of defined subjobs ... unspecified subjobs will
	follow those specified, in order

Push (to lower EXEC) file.ext
	Push to a lower EXEC ... will use the one specified, if any, or the
	default EXEC (normally SYSTEM:EXEC.EXE) ... will reuse an existing
	lower EXEC, if any, in which case a file name must NOT be specified

Redefine (Window escape character to be) x
	Changes the Window escape character (used to reconnect to command level
	from a subjob) to any control alphabetic (^A to ^Z) except ^C, ^F, ^J,
	^L, ^M, ^O, ^Q, and ^S ... the escape character at startup is ^X

Redisplay (screen)
	Blank the physical screen and redisplay it

Refuse (output from subjobs) xxx
	Tells Window to hold all output from subjob "xxx" until further notice

Rename (subjob) zzz (to be) xxx (alias) yyy
	Changes the name of subjob "zzz" ... new name(s) will be "xxx" and
	(optionally) "yyy" ... if there is an alias to "zzz", then that name 
	will be dropped also ...

Reset EMACS-fork
	Kill the EMACS fork, if any

Reset EXEC-filename
	Change the default EXEC back to SYSTEM:EXEC.EXE ... if a lower EXEC
	exists, you must reset it first

Reset Pushed-EXEC
	Kill the lower EXEC, if any

Reset Window xxx (parameters)
	Reset subjob "xxx" to default parameters (floating size, banner,
	visible and opaque)

Set EXEC-filename (to be) file.ext
	Change the default EXEC to be "file.ext"

Set Multi-Window-Mode
	Multiple windows may be displayed on Vt100 screen, same as PF2 key

Set No Pause-on-Command (mode)
	Opposite of Set Pause-on-Command (mode)

Set One-Window-Mode
	Only one window may be displayed on Vt100 screen, same as PF1 key

Set Padding xxx
	Sets VT100 padding, used to prevent buffer overflow in the terminal

Set Pause-on-Command (mode)
	Same as "Terminal Pause (on) Command" to the EXEC

Set Screen-Banner
	Turn on the screen banner, which is a system-wide banner at the
	top of the screen which shows the system name, load averages and
	the current time and date

Show (parameters for subjob) xxx
	Types current settings of parameters for subjob "xxx"

Take (commands from file) file.ext
	Same as Get command, except default extension is .CMD (more standard)

Terminal (is) term
	Tells Window what kind of terminal you are on ... Window asks the
	Monitor at startup, so this command may not be needed ... as a side
	effect

What (is state of subjob) xxx
	Types information about the running status of subjob "xxx"

Window xxx (is) param
	Changes a parameter for subjob "xxx" ... parameters are Banner, Size n,
	No Banner, No Size, Visible, Invisible, Transparent and Opaque

See the help messages for the individual commands for more information.

\


HlpCon:	AsciZ/
The Connect command is used to connect your terminal to a subjob.
While connected, any keys which you strike (other than "action" keys
such as the Window escape character or control-L) are transmitted
directly to the subjob, and any output from the subjob will be
displayed.  Either the Window escape character (control-X by default)
or the PF3 key may be used to return to command level.  The format of
the Connect command is:

	Connect (to subjob) xxx

where "xxx" is a subjob name.  The default (if "xxx" is omitted) is
the most recently connected or defined subjob, if that subjob has not
been killed.

The PF4 key may also be used to connect to a subjob ... from command
level, it will connect you to the most recently connected or defined
subjob, or to the first subjob, if the most recently connected subjob
has been killed.  When you are already connected to a subjob, PF4 will
connect you to the next subjob (in order), returning to the first
subjob after completing the list.

/


HlpDef:	AsciZ/
The Define command is used to define (create) a new subjob.  The
subjob will be a separate job (distinct from your controlling job)
which you communicate with as if from a terminal.  This command
creates the subjob definition, and must be used before a subjob can
be connected to, or sent any input.  The format of the Define command
is:

	Define (subjob) xxx (alias) yyy

where "xxx" and "yyy" are subjob names to be used in refering to the
subjob.  (There is no difference in significance between the two
names.)  These must not be existing subjob names.  If "yyy" is not
entered, then only one name will be defined for the subjob.  If "xxx"
is not entered, Window will create a default name, which will be the
lowest number (starting at zero) not yet used as a name.  For example,
"Define <CR>" at startup would create a subjob named "0".

/


HlpDet:	AsciZ/
The Detach command is used to detach Window from your terminal.
It is functionally identical to <keypad comma> <keypad six>.  The
format of the Detach command is:

	Detach (Window from this terminal)

/


HlpDf:	AsciZ/
The Df (define fork) command is used to define (create) a new subfork.

   (A subfork differs from a subjob in that it is a component of YOUR
   JOB, not a distinct job, hence it will share its job number and
   user-ID with you, the person running Window.  It differs from a
   pushed EXEC in that its output will be tracked by Window, and may
   be redisplayed ... a pushed EXEC, on the other hand, talks
   directly to your terminal.)

This command creates the subfork definition, and must be used before a
subfork can be connected to, or sent any input.  The format of the Df
command is:

   Df (define fork) xxx (running program) yyy (with rescan text) zzz

where "xxx" is a name to be used in refering to the subfork, "yyy" is
an optional specification for a program name, and "zzz" is text which
you would like passed to the fork in your job's rescan buffer.

The intent is that a Window command of:

                       Df Ms Sys:Ms Headers All

would start MS in a lower fork with rescan text, much as the EXEC
command

                            Ms Headers All

would start the fork.  In both cases, MS will see "MS Headers All" in
its rescan buffer, which would cause it to start up and execute a
"Headers All" command.

"xxx" must not be an existing window name.  The default program is the
EXEC which has been selected with the Set EXEC-filename command.  The
default rescan text is just a linefeed.

/


HlpDis:	AsciZ/
The Discard command tells Window that output is to be discarded
(neither held nor displayed) for any or all subjobs.  The format of
the Discard command is:

	Discard (output from subjobs) xxx

where "xxx" is either a subjob name or "All".  If "xxx" is omitted,
the default is "All".  Discard overrides Accept and Refuse, though the
settings are remembered even while output is being discarded.

The opposite of Discard is Keep or No Discard.

/


HlpDna:	AsciZ/
		Down-arrow key -- Trace forward a page

The Down-arrow key is used to cause the next page of subjob output to
be displayed.  It will actually scroll forwards by n-2 lines, where n
is the number of lines currently allocated to the window for the
connected subjob.  The Up-arrow key moves back a page, and the keypad
Period key resets (halts) the trace.  Type "Help Tracing" for an
overview of the trace feature.

/


HlpExi:	AsciZ/
The Exit command is used to exit from Window and return to EXEC.
Window will give you a warning and ask for confirmation if you give an
Exit command while you have subjobs active.  The Exit command may be
aborted at that point by typing an Escape.  The format of the Exit
command is:

	Exit (from Window)

Window may be continued after an Exit (if not clobbered by running
another program) with any of Start, Reenter, or Continue, and all
subjobs will remain active.  However, all logged-in subjobs will
become detached if Window is Reset or otherwise clobbered.

/


HlpHlp:	AsciZ/
You are running Window, a screen-oriented multiple subjob controller.

To find out what Window is, type "Help Program".  To get help with a
Window command or feature, type "Help" followed by the name of the
command or feature.  Type "Help ?" to get a list of commands and
features for which help is available.

/


HlpInf:	AsciZ/
The Information command tells Window to type out the current settings
of several global (not subjob-specific) parameters.  The format of the
Information command is:

	Information (about global parameters)

The parameters listed include the current Get file (if any), Log file
(if any), terminal type, Pause-on-Command mode, lower EXEC existence
and name, One-Window-Mode and Bell mode.

/


HlpKee:	AsciZ/
The Keep command is used to tell Window not to discard output from any
or all subjobs.  The format of the Keep command is:

	Keep (output from subjobs) xxx

where "xxx" is either a subjob name or "All".  The default is "All".

The opposite of Keep is Discard or No Keep.

/


HlpCnL: AsciZ/
		Control-L ----- Redisplay (screen)

The control-L key (typed by holding down the control key while
striking the L key) clears the display and redraws the entire screen.
It is useful whenever the screen becomes messed up due to line noise,
system messages or program display errors.  Control-L works both at
command level and when connected to a subjob.

/


HlpEnt:	AsciZ/
   Enter key ----- Toggle the banner for the currently connected subjob

The Enter key "toggles" the banner ... if a banner is being displayed
for the currently connected subjob, then hitting the Enter key will
make it vanish (e.g. "Window 0 No Banner").  If no banner is being
displayed for the subjob, then hitting the Enter key will make it
appear.

/


HlpPF1:	AsciZ/
		 PF1 key ------- Set One-Window-Mode

PF1 is identical in effect to the indicated command, although you need
not be at command level to use the key.

/


HlpPF2:	AsciZ/
		PF2 key ------- Set Multi-Window-Mode

PF2 is identical in effect to the indicated command, although you need
not be at command level to use the key.

/


HlpPF3:	AsciZ/
	   PF3 key ------- {current Window escape character}

PF3 will return you to command level, just as if you had typed a
control-X, or other Window escape character.

/


HlpPF4:	AsciZ/
    PF4 key ------- Connect {to the default, or next, or first, subjob}

PF4 behaves differently when you are at command level than it does
when you are connected to a subjob.  When at command level, it
connects you to the most recently connected (or defined) subjob, if
any ... otherwise, it connects you to the first subjob.  When you are
already connected to a subjob, it will connect you to the next subjob,
cyclically, if there is more than one subjob defined.

Thus, a series of PF4's will cycle you through all of the defined
subjobs, regardless of where you start.

The Connect command may also be used to connect to a subjob.  Type
"Help (with) Connect" for more information.

/


HlpZer:	AsciZ/
		Zero ------- Push out of Window

The zero key on the Vt100 keypad (PF5 on an IBM 3101) causes a "Push"
out of Window.  It may be used at Window Command Level or while
connected to a subjob ... in either case, you must "Pop" from the EXEC
to reenter Window.  You will return to the same state you were in when
you hit the zero, eg. if you pushed out of Window while connected to
subjob XXX, you will pop back to the same place, ie. still connected.

/


HlpKey:	AsciZ\
Several "action" keys and key combinations may be used on a video
terminal which has them.  Several keys work "directly" (as a single
keystroke), while other actions required prefacing with a "prefix" key,
the keypad comma-key.  Thus a "direct one-key" is the single keystroke
of the <keypad one-key>, while a "prefix one-key" is typed as <keypad
comma-key> followed by <keypad one-key>.

Most of these keys are more-or-less equivalent to a Window command, as
follows:

Control-X (or other trap character) -- Connect to Command Level
		    with prefix, same

Control-L------ Redisplay (screen)
		    with prefix, same

PF1 key ------- Set One-Window-Mode
		    with prefix, undefined

PF2 key ------- Set Multi-Window-Mode
		    with prefix, undefned

PF3 key ------- {current Window escape character}
		    with prefix, undefined

PF4 key ------- Connect {to the default, or next, or first, subjob}
		    with prefix, undefined

Zero key ------ Push (to lower EXEC)
		    with prefix, undefined

One key ------- Undefined
		    with prefix, STARTs connected fork

Two key ------- Undefined
		    with prefix, REENTERs connected fork

Three key ----- Undefined
		    with prefix, CONTINUEs connected fork

Four key ------ Undefined
		    with prefix, HALTs connected fork

Five key ------ Undefined
		    with prefix, FREEZEs connected fork

Six key ------- Undefined
		    with prefix, DETACHs Window from your terminal

Seven key ----- Undefined
		    with prefix, RESUMEs connected fork

Eight key ----- Undefined
		    with prefix, undefined

Nine key ------ Invokes, or reconnects to, an EMACS fork (runs "Emacs:Emacs")
		    with prefix, undefined

Enter key ----- Window xxx {Banner} / {No Banner} ... (toggle the banner
		for the currently connected subjob)
		    with prefix, toggles the "screen banner" which is displayed
		    as the highest line on a VT100 screen, if selected

Dash key ------ Undefined
		    with prefix, undefined also


The following keys are used to "trace" a subjob ... to look at subjob
output which has scrolled off the top of the screen.  Type "Help
Tracing" for more information.

Up arrow ------ Trace back one window-full
		    with prefix, undefined

Down arrow ---- Trace forward one window-full
		    with prefix, undefined

Left arrow ---- Trace back one line
		    with prefix, undefined

Right arrow --- Trace forward one line
		    with prefix, undefined

Period key ---- {Stop tracing (reset to "current" screen)}, or {exit EMACS}
		    with prefix, undefined


All undefined actions will "beep" at you if invoked.  Many of these
keys will have assigned functions in future versions of Window.

See the detailed help messages for more information about the
individual functions.

\


HlpKil:	AsciZ/
The Kill command is used to kill (log out and un-define) any or all
subjobs.  The format of the Kill command is:

	Kill (subjob) xxx

where "xxx" is either a subjob name or "All".  There is no default.

/


HlpLfa:	AsciZ/
		Left-arrow key -- Trace back one line

The Left-arrow key is used to trace the connected subjob back by one
line.  The Up and Down arrows move back and forward a page,
respectively, the Right arrow moves forward a line, while the keypad
Period key resets (halts) the trace.  Type "Help Tracing" for an
overview of the trace feature.

/


HlpLog:	AsciZ/
The Log command tells Window to log all output to a file.  A Window
log file will always be a valid record of all subjob output which was
processed, regardless of what happens on the screen.  If logging is
already in effect, the current log file will be closed and a new one
opened (in append mode).  The format of the Log command is:

	Log (output to file) file.ext

where "file" and "ext" are the file name and extension, respectively.
If "ext" is omitted, the default is "LOG".  If both the "file" and
"ext" are omitted, the default is "WINDOW.LOG".

To stop logging without starting a new log file, the "No Log" command
may be used.

/


HlpOrd:	AsciZ/

The Order command tells Window to change the order of the defined
subjobs.  The format of the Order command is:

	Order (of subjobs is) xxx yyy zzz ...

where "xxx", "yyy" and "zzz" are the names of different defined
subjobs.  Any subjobs not explicitly mentioned in the list will follow
those specified, in their relative order.

For example, if you had defined (in order) subjobs 1, 2, 3 and 4, the
command "Order (of subjobs is) 3 2" would put the subjobs in the order
3 2 1 4.

/


HlpPer:	AsciZ/
		     Keypad Period key -- Stop tracing

The Period key on the VT100 keypad (alias PF6 on the IBM 3101) is used
to halt tracing.  It will undo the effect of any number of Up or Left
arrow keys.  If you hit the Period when you are not tracing, Window
will beep and otherwise ignore it.  Type "Help Tracing" for an
overview of the trace feature.

/


HlpPrg:	AsciZ\
Window is a multi-feature program.  Essentially, Window is a control
program for managing more than one job from the same terminal at the
same time.  On top of this ability, there are screen handling
functions and I/O control functions which can give a user greater
power over each controlled job than he would have over a single job at
his terminal.

The basic task which Window performs is to read your terminal typein
and pass it to one of your subjobs, while also handling any output
generated by the subjobs.

In this respect, Window is similar to an older program, PTYCON.  The
command structure of Window is almost identical to PTYCON, and most
command sequences which work for PTYCON should work without change in
Window.

Some differences between Window and PTYCON commands are ...
  1)  The command parser accepts ESC (for recognition) and question-mark
	(for help).
  2)  Commands are accepted in mixed case.
  3)  Subjob numbers are not used, although a number may be used as a name.
	All references to subjobs are via the Defined subjob name.
  4)  You can't connect to a subjob until it is defined.
  5)  Subjob names may be up to 39 characters long, and may be
	abbreviated or recognized (with escape).  Subjob names must
	not contain dashes.
  6)  The pushed EXEC is retained when you Pop back into Window.
  7)  Several keys are used as action keys ... PF4 may be used to switch
	from one subjob to another, for example.

\


HlpPsh:	AsciZ/
The Push command tells Window to push down to a new EXEC ... it lets
you issue EXEC level commands without interfering with your subjob
statuses.  The format of the Push command is:

	Push (to lower EXEC) filename

where "filename" is the name of the EXEC to run.  The default is the
normal EXEC, SYSTEM:EXEC.EXE, or any other EXEC which you have
specified with either a previous Push command or with the Set
EXEC-filename command.

The Pushed EXEC will be retained to be run again the next time you
Push, enabling you to maintain a Pushed environment.  To erase this
Pushed EXEC, use the "Reset Pushed-EXEC" command.

To return from EXEC to Window, type "Pop" to the EXEC.

/


HlpRed:	AsciZ/
The Redefine command tells Window that you want to use a new escape
character.  By default, the Window escape character (which will take
you from being connected to a subjob back to Window) is control-X.  By
using the Redefine command, you can change the escape character to any
other alphabetic control character EXCEPT ^C, ^F, ^J, ^L, ^M, ^O, ^S
or ^Q.  The format of the Redefine command is:

	Redefine (Window escape character to be) ^x

where "^x" is any control character other than the ones mentioned
above.

/


HlpRdi:	AsciZ/
The Redisplay command tells Window to erase the terminal's screen and
to redisplay it.  This command has the same effect as typing a
control-L, and is provided to allow command level access to the
feature (as from a command file).  The format of the Redisplay command
is:

	Redisplay (screen)

/


HlpRef:	AsciZ/
The Refuse command tells Window that you would like to hold the output
from any or all subjobs.  The format of the Refuse command is:

	Refuse (output from subjobs) xxx

where "xxx" is either a subjob name, or "All".  The default is "All".

The opposite of Refuse is Accept or No Refuse.

/


HlpRen:	AsciZ/
The Rename command is used to change the name(s) of a subjob.  The
format of the Rename command is:

	Rename (subjob) zzz (to be) xxx (alias) yyy

where "zzz" is an existing name and both "xxx" and "yyy" (if used) are
new names.  Both the name "zzz" and any alias for the same subjob will
be dropped as names, and "xxx" and (optionally) "yyy" will be the new
name(s).

/


HlpRex:	AsciZ/
The Reset EXEC-filename command is used to set Window's default EXEC
filename to the system default (standard) EXEC.  It would only be used
when you have set a non-standard EXEC as the EXEC to use, and wish to
revert to the standard EXEC.

The Reset EXEC-filename command may not be used when a lower EXEC
already exists ... in this case, you must reset the EXEC before you
can use this command.

/


HlpRPs:	AsciZ/
The Reset Pushed-EXEC command tells Window to kill the lower EXEC
fork.

A subsequent Push command will accept an argument indicating which
EXEC to run.  Whichever EXEC is run will start in an empty address
space.

/


HlpRWi:	AsciZ/
The Reset Window command resets the parameters for all subjobs or for
a single subjob.  the format of the Reset Window command is:

	Reset Window xxx (parameters)

where "xxx" is a subjob name, or "All".  The parameters which will be
in effect after execution of this command are floating size, banner,
visible and opaque.

/


HlpRta:	AsciZ/
		Right-arrow key -- Trace forward one line

The Right-arrow key is used to trace the connected subjob forward by
one line.  The Up and Down arrows move back and forward a page,
respectively, the Left arrow moves back a line, while the keypad
Period key resets (halts) the trace.  Type "Help Tracing" for an
overview of the trace feature.

/


HlpSex:	AsciZ/
The Set EXEC-filename command tells Window that when you later issue a
Push command (or hit keypad Zero), you wish to push to a non-standard
EXEC.  The command is for convenience only, since you can also specify
the EXEC in the Push command.  A typical use for this command would be
in a startup file which would tailor Window to the needs of a particular
user, ie. one who prefers a non-standard EXEC.  The format of the
command is:

	Set EXEC-filename (to be) file-spec

where "file-spec" identifies the EXEC you want.

The Set EXEC-filename command may not be used when a lower EXEC
already exists ... in this case, you must reset the EXEC before you
can use this command.

Also see the Reset EXEC-filename command.

/


HlpMrg:	AsciZ/
The Set Margin command changes the column to which a carriage return
takes you.  Its only practical use is to slide text to the right for
display on a video monitor with excessive overscan.  The format of the
command is:

	Set Margin (to) nnn (columns)

where "nnn" is a decimal number between 0 and 40.

/


HlpMlt:	AsciZ/
The Set Multi-Window-Mode command tells Window to display more than
one window on a VT100 screen at the same time.  This is the default
setting, in effect when you start the program.  Window will limit the
number of subjobs simultaneously displayed on the screen, depending on
the defined sizes of the associated windows.  Also, an invisible
subjob will be displayed only while you are connected to it.  The
format of the Set Multi-Window-Mode command is:

	Set Multi-Window-Mode

The opposite of Set Multi-Window-Mode is Set One-Window-Mode.

The PF2 key may be used as a shorthand way to set Multi-Window-Mode,
while the PF1 key will set One-Window-Mode.

/


HlpOne:	AsciZ/
The Set One-Window-Mode command tells Window to display only the
connected subjob.  All other subjobs will run silently (no output will
be seen or heard until you connect to the subjob).  The format of the
Set One-Window-Mode command is:

	Set One-Window-Mode

The opposite of Set One-Window-Mode is Set Multi-Window-Mode, which is
the default setting.

The PF1 key may be used as a shorthand way to set One-Window-Mode,
while the PF2 key will set Multi-Window-Mode.

/


HlpPad:	AsciZ/
The Set Padding command sets the factor by which the DEC-specified
padding for a VT100 should be adjusted.

("Padding" is a sequence of ASCII NUL characters which are sent
following an escape sequence to provide time for the terminal to
perform the requested function.  The number of NULs sent is dependent
on the baud rate at which you are running.)

The format of the command is:

	Set Padding (amount to) xxx

where "xxx" is either "Double", "Full", "Half", "None" or "Quarter".

With the Set Padding command, you can specify that your terminal is
faster or slower than the DEC specifications ... specify "Half" or
"Quarter" is you think you need less padding, or "Double" if you think
you need more padding than DEC recommends.  (DEC's numbers are largely
irrelevant on a non-VT100 terminal which emulates the VT100, anyway.)
You may try "None" if you think that you don't need padding at all.

The startup default is "Full" padding.

/


HlpPau:	AsciZ/
The Set Pause-on-Command command enables front-end handling of the
XON-XOFF flow-control protocol ... that is, control-Q and control-S.
The command is identical in effect to the EXEC command

		"Terminal (mode is) Pause (on) Command".

The format of the command is:

	Set Pause-on-Command (mode)

The opposite of Set Pause-on-Command is Set No Pause-on-Command.

/


HlpSnd:	AsciZ/
You may send one or more lines to a defined subjob directly from
Window command level.  To do this, type the name of the subjob (or a
unique abbreviation), optionally followed by a dash (-), followed by
the line which you would like to send to the subjob.  Spaces between
the subjob name and the line to be sent (whether before or after the
optional dash) are stripped (not sent).

An example of sending a line to subjob Xyz is:

	Xyz-NO		or		Xyz - NO

These would send N-O-return to subjob Xyz ... which could also have
been accomplished with:

	X NO

This abbreviates the subjob name and omits the dash.

Three characters have special effects when included in the typed line:

  1)  Backslash (\) - Converted to a Carriage Return before being sent.
  2)  Vertical bar (|) - Converted to an Escape before being sent.
  3)  Dollar sign ($) - If the line ends with this, the Carriage Return
	normally appended to the line is suppressed.

Each of these characters may be sent literally (without conversion) by
preceding the character with a control-V.  The characters semicolon
(;), exclamation (!), question-mark (?) and control-V also require a
quoting control-V in order to be sent literally.

To send a line to all subjobs, type "All" instead of a subjob name at
the beginning of the line.

/


HlpSho:	AsciZ\
The Show command tells Window to type the current parameters for all
subjobs or for a single subjob.  The format of the Show command is:

	Show (parameters for subjob) xxx

where "xxx" is either a subjob name or All.  The parameters which are
displayed are size/floating size, banner/no banner, visible/invisible,
and transparent/opaque.

\


HlpSil:	AsciZ/
The Silence command tells Window not to type on the terminal any
output generated while a Get is in progress.  The output is still
logged to a file if logging is in effect.  The format of the Silence
command is:

	Silence (all output to terminal)

The opposite of Silence is No Silence.

/


HlpSta:	AsciZ\
Window will look in your logged-in directory (PS:<username>) at startup
time for a file named Window.Starting.  If it finds the file, Window
will begin execution with an implied "Take" of that file.

This effect may be suppressed with a "/NoAutoStart" switch on the
command which invokes Window, for example "Window /NoAutoStart" or just
"Window/N".

\


HlpTak:	AsciZ/
The Take command is used to tell Window that it should now read its
input from a file instead of from the terminal.  It is similar to the
Take command of the EXEC.  The format of the Take command is:

	Take (commands from file) file.ext

where "file" and "ext" are the file name and extension, respectively,
of the file which you wish to read from.  If "ext" is omitted, the
default is "CMD".  If both "file" and "ext" are omitted, the default
is "WINDOW.CMD".

"Get" is an outmoded synonym for Take, but defaults to the extension
".ATO" instead.

A Take command is illegal within a file, ie. it is illegal to have a
Take within a Take or a Get.

/


HlpTer:	AsciZ/
The Terminal command tells Window what type of terminal you are
running on.  It is required if the Monitor doesn't know what kind of
terminal you are really on.  It has the side-effect of setting
Pause-on-Command mode ...  this can be overridden by using Window's
"Set No Pause-on-Command (mode)" command.  The format of the Terminal
command is:

	Terminal (is) xxx

where "xxx" is the terminal type.

Type "Terminal (is) ?" for a list of terminal types.

/


HlpTra:	AsciZ/
"Tracing" is a unique Window feature which enables you to review
subjob output which is no longer on the screen.  The intent is to
permit a video terminal running Window to take the place of a
hard-copy terminal.

To "trace" a subjob, simply use the arrow keys.  Up takes you back a
page, down take you forward a page.  (A "page" is your current window
size minus two lines of deliberate overlap.)  Left and right arrows
take you back and forward one line at a time.  When you "run into a
wall" going backwards or forwards, Window will first stop, then beep
at you if you try to go further.  When you hit your current position,
Window will halt the trace for you.  To abort a trace in the middle,
use the period key on the VT100 keypad (PF6 on an IBM 3101 ... VT52
users must return to the current position via the arrow keys.)

Traced lines live in "core" (not disk), and accumulate until Window
needs the space for something else (like more lines).  When Window
runs out of space, it will throw away up to 100 lines from each
subjob, then will continue without interruption.  Approximately 6000
lines of output will fit in core.

While a subjob is "traced" ...

 ... The subjob's banner is forced on.

 ... The banner will say "[Trace n]" in its rightmost positions.  "n"
	is a count of how many lines back you are looking.

 ... No new output for that subjob will be displayed (though the output
	is captured and buffered as usual).

 ... Input to the subjob may be typed, but the echo will not be seen until
	the trace is halted.  This may be helpful if you want to type in
	information which has scrolled off the top of the screen in the
	current window.  (Trace back to the output you want, and type in
	what you see.)

 ... You are free to leave the subjob (to connect to another subjob, command
	level, or even to Push or Exit) ... the subjob will remain traced.

 ... You may even kill the subjob ... it will be removed from the screen as
	usual.

/


HlpUpa:	AsciZ/
		Up-arrow key -- Trace back a page

The Up-arrow key is used to cause the previous page of subjob output
to be displayed.  It will actually scroll backwards by n-2 lines,
where n is the number of lines currently allocated to the window for
the connected subjob.  The Down-arrow key moves forward a page, and
the keypad Period key resets (halts) the trace.  Type "Help Tracing"
for an overview of the trace feature.

/


HlpWai:	AsciZ/
The Wait command tells Window to pause in ALL of it's actions for a
period of between 1 and 60 seconds.  This includes reading keystrokes
from the terminal, so you won't be able to do anything while Window is
waiting.  This command might be used in a command file to allow time
for an action to be completed.  The format of the command is:

	Wait (for) nnn (seconds)

where "nnn" is a decimal number between 1 and 60.

/


HlpWht:	AsciZ/
The What command tells Window to type a Systat of any or all subjobs.
The format of the What command is:

	What (is state of subjob) xxx

where "xxx" is either a subjob name or "All".  The default is "All".

/


HlpWin:	AsciZ/
The Window command is used to change a parameter for a subjob.  The
format of the Window command is:

	Window xxx parameter

where "xxx" is a subjob name and "parameter" is one of the following
...  (The first item of each pair is the startup default.)

Banner       -- To give the subjob a banner
No Banner    -- To remove the banner from the subjob

No Size      -- To let the subjob have floating size
Size nn      -- To lock the subjob's window size at nn lines

Visible      -- To display the subjob on the screen even when not connected
Invisible    -- To display the subjob only when it is the connected one

Opaque       -- To let action characters invoke their actions ... they must be
		preceded by Break to be sent directly
Transparent  -- To allow action characters through to the subjob directly ...
		they must be preceded by Break to invoke their actions

/

LitHlp:				; A label for the literal pool

	End
 