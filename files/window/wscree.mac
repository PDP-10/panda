	Title WScree - Screen handling subroutines for the Window program

	SubTtl Table of Contents

Comment \

Written by ...	Tad Marshall, American Express Co., March - November 1981

		Table of Contents	      Page(s)

Entrys, Externs and some Definitions ........... 2
Macro definitions .............................. 3

MVList & RlOldV (Make a new visible list) ...... 46-48

Alloc (Allocate the screen) .................... 49-51

EscDly (Wait for esc seq) ...................... 53

Named constants ................................ 68-70
\

	SubTtl Entrys, Externs and some Definitions

; Entry points in WScree.Mac ...

	Entry EscDly, MVList, Alloc,  DspRes, Home,   DoCeos
	Entry DspPau

; Internal symbols in WScree.Mac ...

	Intern Normal

; External symbols of subroutines called from WScree ...

	Extern ConLop, GetSpc, GivSpc, ClrBit, TypErr, PiOff,  PiOn
	Extern GoTo,   DoCeol, PadCes, DmpBfr

	Search WSym, MonSym, MacSym ; The symbols we need
	Sall			; Suppress macro expansions

	SubTtl Home -- Go to home position (upper left corner)

Home:	MoveI t1, 1		; Get a one
	MoveM t1, ScrRow	; We will be in row 1
	MoveM t1, ScrCol	;  ... likewise for column

	Move t1, VtType		; Get terminal type

	CaiN t1, VT100		; Is it VT100?
	 Jrst [	Escape		; Escape
		Char "["	; Left square bracket
		Char "H"	; Capital H
		Ret ]		; Type it, ret from there

	CaiN t1, Im3101		; Is it an IBM 3101?
	 MoveI t1, VT52		;  Yes, pretend it is VT52 (same seq)

	CaiN t1, VT52		; Is it a VT52?
	 Jrst [	Escape		; Escape
		Char "H"	; Capital H
		Ret ]

	Ret			; Else, just return

	SubTtl DoCeos -- Clear to end-of-screen

DoCeos:	Move t1, VtType		; Get terminal type
	CaiN t1, VT100		; Is it VT100?
	 Jrst [	MoveI t1, .ChEsc ; Escape
		Char		; Type it
		MoveI t1, "["	; Left square bracket
		Char		; Type it
		MoveI t1, "J"	; Capital J
		Char		; Type it
		Jrst PadCes ]	; Add padding, ret from there

	CaiN t1, Im3101		; Is it an IBM 3101?
	 MoveI t1, VT52		;  Yes, pretend it is VT52 (same seq)

	CaiN t1, VT52		; Is it a VT52?
	 Jrst [	MoveI t1, .ChEsc ; Escape
		Char		; Type it
		MoveI t1, "J"	; Capital J
		Char		; Type it
		Jrst PadCes ]	; Add padding, ret from there

	Ret			; Else, just return

	SubTtl DspPau -- Pause the display for an instant ...

DspPau:	MoveI t1, .PriOu	; The terminal
	DOBE%			; Wait until quiet ...

	MoveI t1, ^d200		; This many milliseconds ...
	DISMS%			; Wait that long

	Ret			; Done here ...

	SubTtl DspRes -- Reset the display to normal

DspRes:	SkipN t1, VtType	; Get terminal type, is it a CRT?
	 Ret			;  No, just return

	SetZM ScrRow		; Forget where we are
	SetZM ScrCol		;  ...

	CaiN t1, VT100		; Is it VT100?
	 Jrst [	Move t1, ObfPtr	; Get ptr to buffer
		HrrOI t2, [AsciZ/[r[m[?1l>/]
				; Exit graphics charset,
				;  reset region and rendition,
				;  reset cursor keys mode,
				;  and normal keypad mode.
		SetZ t3,	; Stop on a null
		SOUT%		; Type it in memory		
		MoveM t1, ObfPtr ; Store the updated ptr
		MoveI t1, ^d17	; This many chars
		AddM t1, ObfCnt	; Add to the count
		SetZM ScrReg	; Forget that we set a region
		SetZM ScrAtr	; or rendition
		MoveI t1, 1	; Get a 1 in t1
		MoveM t1, ScrRow ; Say we are in row 1
		MoveM t1, ScrCol ;  and in column 1 too ...
		Jrst DrsEnd ]	;  and return

	CaiN t1, VT52		; Is it VT52?
	 Jrst [	Escape		; Send an escape
		MoveI t1, ">"	; Get a greater-than sign
		Char		; Type it (this sets normal keypad mode)
		Jrst DrsEnd ]	;  and return

DrsEnd:	MoveI t1, .PriOu	; The terminal
	MovX t2, .MoXoF		; Set pause-on-end-of-page mode ...
	Move t3, PauEnd		; Get back saved setting
	MTOPR%			; Set it
	 JEcBug (HLT,<Can't reset original pause-on-end-of-page mode>)

	Ret			; Just return

	SubTtl MVList -- Make a new visible list

MVList:	Call RlOldV		; Release old visible list now ...

	Push p, SjbNum		; Save this in case someone is using it ...
	SetO i,			; Flag for 'all' subjobs
	MovX t2, PtOnsF		; Get on-screen flag
	AndCam t2, PtySts(WCL)	; Clear bit for WCL ...
	Call ClrBit		; Clear the bit for all subjobs
	 Trn			;  We always return skip ...
	Pop p, SjbNum		; Restore this word ...

	MoveI p1, NewVis	; Addr of ptr to new visible list
	Move p2, SjList		; Get ptr to subjob list

	Move i, ConSjb		; Get connected id
	CamN i, Editor		; Is it the editor?
	 Jrst MvOne		;  Yes, treat as if one-window-mode

	TestOn Vt100F		; Are we a Vt100?  If not, pretend one window
	 SkipE OneWin		; Are we in one-window mode?
	  Jrst MvOne		;  Yes, handle differently ...

	MoveI p3, TrmLen+1	; Number of lines on a screen plus one
				;  (since we are subtracting 1 for a divider
				;  that we won't display ...)

	SetZ q1,		; Clear flag saying we have included connected

MkvLop:	Move i, 1(p2)		; Get subjob number
	JumpE i, MkvBot		; If WCL, skip to bottom of loop
	SkpfOf PtInvF		; Is it invisible?
	 Jrst [	CamE i, ConSjb	;  It is invisible, are we connected to it?
		 Jrst MkvBot	;  No, so don't include it
		Jrst .+1 ]	;  We are connected to it, so include it

	Soj p3,			; Subtract 1 for the assumed divider

; We want it ... but will it fit on the screen?
	SkipG p4, PtySiz(i)	; Get its size in p4, is it negative?
	 MoveI p4, 4		;  Floating size, use minimum allowed size
	CaiGE p3, 0(p4)		; Is there enough room?
	 Jrst MkvEnd		;  No, all done
	CamN i, ConSjb		; Is this the connected subjob?
	 SetO q1,		;  Yes, set the flag saying we have it

	SubI p3, 0(p4)		; Subtract this window's size

	;continued on next page
	;continued from previous page

	MoveI t2, 2		; We need 2 words per node
	Call GetSpc		; Try to get the space
	SkipN t2		; Did we get the space?
	 Bug(HLT,<Failed to get space for visible node>)

	HrrM t1, 0(p1)		; Set forward ptr from previous node
	SetZM 0(t1)		; Clear fwd ptr from this node
	MoveM i, 1(t1)		; Save the subjob number
	MovX t2, PtOnsF		; Get on-screen flag
	IOrM t2, PtySts(i)	; Set the on-screen bit for this subjob
	MoveI p5, 0(p1)		; Save the ptr to prev node
	MoveI p1, 0(t1)		; Advance the ptr

MkvBot:	HrrZ t1, 0(p2)		; Get forward ptr, if any
	JumpN t1, [ MoveI p2, 0(t1) ; There is one, so advance the ptr ...
		    Jrst MkvLop ] ;  ... and loop

MkvEnd:	JumpN q1, R		; If we included connected already, just return

	Move i, ConSjb		; Get connected number
	Soj p3,			; Subtract 1 for the assumed divider

; We want it ... but will it fit on the screen?

	SkipG p4, PtySiz(i)	; Get its size in p4, is it negative?
	 MoveI p4, 4		;  Floating size, use minimum size

	CaiGE p3, 0(p4)		; Is there enough room?
	 Jrst [	MoveI t1, 0(p1)	;  No, get addr of the latest block in t1
		Move p1, 1(t1)	; Pick up subjob number from this node (in p1)
		MovX t2, PtOnsF ; Get on-screen flag
		AndCaM t2, PtySts(p1) ; Clear the on-screen bit for this subjob
		Call GivSpc	; Release its space
		MoveI p1, 0(p5) ; Back up the ptr into the visible list
		Jrst .+1 ]	; continue

	MoveI t2, 2		; We need 2 words per node
	Call GetSpc		; Try to get the space
	SkipN t2		; Did we get the space?
	 Bug(HLT,<Failed to get space for visible node>)

	HrrM t1, 0(p1)		; Set forward ptr from previous node
	SetZM 0(t1)		; Clear fwd ptr from this node
	MoveM i, 1(t1)		; Store the subjob ID

	MovX t2, PtOnsF	; Get on-screen flag
	IOrM t2, PtySts(i)	; Set the on-screen bit for this subjob

	Ret			; All done, so return


; Visible list when in one window mode, or pretending that we are

MvOne:	MoveI t2, 2		; Want two words
	Call GetSpc		; Get the usual 2 words

	SkipN t2		; Did we get the space?
	 Bug(HLT,<Failed to get space for single visible node>)

	HrrM t1, 0(p1)		; Store fwd ptr from prev node
	SetZM 0(t1)		; Clear fwd ptr from this node

	Move i, ConSjb		; Get connected subjob number
	MoveM i, 1(t1)		; Store it as the subjob number

	MovX t2, PtOnsF		; Get on-screen flag
	IOrM t2, PtySts(i)	; Set the on-screen bit for this subjob

	Ret			; All done, just return

	;continued on next page
	;continued from previous page

RlOldV:	Move t1, NewVis		; Get ptr to visible list
	JumpE t1, R		; Return if no ptr

RovLop:	HrrZ p1, 0(t1)		; Grab the forward ptr now
	Call GivSpc		; Release this block
	MoveI t1, 0(p1)		; Copy the ptr into t1
	JumpN t1, RovLop	; If there are more blocks on the list, loop

	Ret			; No more to release, so return


	SubTtl Alloc -- Allocate space to the On-Screen windows

Alloc:

; Count number of floating size windows, allocate banners and dividers
;	(size only) for all subjobs, and allocate sizes for all fixed
;	size windows.  When done, p1 is number of floaters, and p2 is
;	the amount of space left for the floaters.

	SetZ p1,		; Zero the count of subjobs seen so far
	Move t1, NewVis		; Get ptr to head of new visible list
	MoveI p2, TrmLen	; Set up the number of lines to allocate

	Move i, ConSjb		; Get number of the connected window
	CamN i, Editor		; Is it the editor?
	 Jrst AlcLp2		;  Yes, don't think about the screen banner

	SkipE ScrBnF		; Screen banner enabled?
	 Soj p2,		;  Yes, one less line to give away ...

AlcLp2:	JumpE t1, AlcEn2	; If no subjob, then done with this part
	Aoj p1,			; Found a subjob, so add to the count
	Soj p2,			; Subtract 1 line for the divider
	Move i, 1(t1)		; Get the subjob number

	SetZ t3,		; Zero the number of lines allocated
	SkipL PtySiz(i)		; Is there a size parameter?
	 Jrst [	Sub p2, PtySiz(i) ; Yes, subtract from space remaining
		Move t3, PtySiz(i) ; Allocate him what he wants
		SojA p1, .+1 ]	; Uncount subjob as a floater, return to stream

	HrlZM t3, PtyNsl(i)	; Store initial allocation (no location)

	HrrZ t1, 0(t1)		; Get ptr to next visible subjob
	Jrst AlcLp2		;  then go handle it

	;continued on next page
	;continued from previous page

; If there is any space to give to the floaters (and at least 1 floater
;	to get it), then assign the remaining space "evenly" between the
;	floaters.  The remainder (after the division) is assigned to the
;	floaters in order, 1 line each, as long as it lasts.

AlcEn2:	Aoj p2,			; Num of dividers is 1 less than num of subjobs
	JumpLE p2, AlcEn6	; If no lines left, then done with this part
	JumpE p1, AlcEn6	; If no floating sizes, then also done
	Idiv p2, p1		; Get number to give to each floater
	JumpE p2, AlcEn3	; If only remainder, then skip this

	Move t1, NewVis		; Get ptr to head of visible list again
AlcLp3:	Move i, 1(t1)		; Get subjob number
	SkipGE PtySiz(i)	; Is this a floater?
	 Jrst [	HlrZ t2, PtyNsl(i) ; Yes, get size allocated so far
		Add t2, p2	; Add in this extra bit of space
		HrlM t2, PtyNsl(i) ; Put back the number
		Jrst .+1 ]	;  then return to stream

	HrrZ t1, 0(t1)		; Get ptr to next node
	JumpN t1, AlcLp3	; If more, go handle them

AlcEn3:	JumpE p3, AlcEn4	; If no unallocated lines left, then skip this

	Move t1, NewVis		; Get ptr again
AlcLp4:	Move i, 1(t1)		; Get subjob number
	SkipGE PtySiz(i)	; Is this a floater?
	 Jrst [	HlrZ t2, PtyNsl(i) ; Yes, get size allocated so far
		Aoj t2,		; Add in 1 line
		Soj p3,		; Subtract from excess
		HrlM t2, PtyNsl(i) ; Put back the number
		Jrst .+1 ]	;  then return to stream

	HrrZ t1, 0(t1)		; Get ptr to next node
	SkipE p3		; If no more excess, then don't loop
	 JumpN t1, AlcLp4	; If more, go handle them

	;continued on next page
	;continued from previous page

; If the connected subjob is a floater, try to give it some more
;	lines, and take the space away from the other floaters, again
;	in order.  No subjob may have less than a minimum number of lines.

AlcEn4:	Move i, ConSjb		; Get the subjob number of the connected subjob
	SkipL PtySiz(i)		; Is the connected subjob a floater?
	 Jrst AlcEn6		;  No, so skip this part
	CaiN p1, 1		; Is there exactly 1 floater?
	 Jrst AlcEn6		;  Yes, so this is it (nothing to do here)
	HlrZ p2, PtyNsl(i)	; Get the amount we gave it so far
	CaiLE p2, 2		; Would we be giving it more than this many
				;  bonus lines if we gave it this many again?
	 MoveI p2, 2		; Yes, so just give it the maximum

AlcLp6:	Move t1, NewVis		; Get the ptr one more time ...
	SetZ p1,		; Set flag to say we did nothing
AlcLp5:	Move i, 1(t1)		; Get subjob number
	CamN i, ConSjb		; Is this the connected subjob?
	 Jrst AlcBt5		;  Yes, so don't take away from him
	SkipGE PtySiz(i)	; Is this a floater?
	 Jrst [	HlrZ t2, PtyNsl(i) ; Yes, get size allocated so far
		CaiG t2, 4	; Does it have more than the minumum?
		 Jrst .+1	;  No, don't steal from it
		Soj t2,		; Ok to steal from him
		HrlM t2, PtyNsl(i) ; Put back the number
		Move i, ConSjb	; Get the connected subjob number again
		HlrZ t2, PtyNsl(i) ; Get the amount it has so far
		Aoj t2,		; Add in this one
		HrlM t2, PtyNsl(i) ; Put the number back
		Soj p2,		; Subtract 1 from amount to be moved
		SetO p1,	; Set flag to say we did something
		Jrst .+1 ]	;  then return to stream

AlcBt5:	JumpE p2, AlcEn6	; If no more to move, then done with this
	HrrZ t1, 0(t1)		; Get ptr to next node
	JumpN t1, AlcLp5	; If more, go handle them

	JumpL p1, AlcLp6	; If we managed to do something, try to do more

; We have (finally!) finished allocating the space ... now set the locations

AlcEn6:	Move t1, NewVis		; The same old ptr ...
	MoveI t2, 1		; The initial location
	SkipE ScrBnF		; Is there a screen banner?
	 Aoj t2,		;  Yes, start on line 2

AlcLp7:	Move i, 1(t1)		; Get the subjob number
	HrrM t2, PtyNsl(i)	; Set the location for this subjob
	HlrZ t3, PtyNsl(i)	; Get the size of this window
	AddI t2, 1(t3)		; Add the size (and 1 for the divider)
	HrrZ t1, 0(t1)		; Get ptr to next node
	JumpN t1, AlcLp7	; If there is another node, go handle it

	Ret			; Done here ...

	SubTtl EscDly -- If not enough chars in input buffer, wait for some

EscDly:	MoveI t1, .PriIn	; Controlling terminal
	SIBE%			; Get number of char in input buffer
	 Trn			;  We will just look at t2

	MoveI t3, 1		; A key on most terminals would be just
				;  ESC-A or something

	Move t1, VtType		; What type of terminal are we on?
	CaiN t1, VT100		; Is it Vt100?
	 MoveI t3, 2		;  Yes, we need 2 more chars, not just 1

	CaiL t2, 0(t3)		; Are there at least this many in the buffer?
	 Ret			;  Yes, we can just return ...

	Move t1, EscTim		; We will wait a little to see if we get them
	DISMS%			;  ...

	Ret			;  and return

	SubTtl Named constants ...

;
; Normal jfn mode word ...
;
; Includes ...
;
;	Mechanical form feed
;	Mechanical tabs
;	Lowercase exists
;	Terminal length is TrmLen
;	Terminal width is TrmWid
;	Ignore wakeup bits
;	Echos on
;	Data mode is Ascii
;

Normal:	Tt%Mff ! Tt%Tab ! Tt%Lca ! Fld(TrmLen,Tt%Len) ! Fld(TrmWid,Tt%Wid) ! 
		Tt%Ign ! Tt%Eco ! Fld(.TtAsc,Tt%Dam)

LitScr:				; A label for the literal pool

	End
  