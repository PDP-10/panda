;<WINDOW>WINDOW.MAC.457, 29-Mar-87 17:32:08, Edit by MRC
; Add new DEC VT100/VT52 lookalike terminals
; Add PANDA terminals (under PANDAsw)

	Title Window -- Program to run PTYCON-type subjobs in windows

	SubTtl Table of contents

Comment \


Written by ...	Tad Marshall, American Express Co., March - November 1981


		Table of Contents	      Page(s)

\

	SubTtl Definitions

; Entry points ...
	Entry Window, SpdChk, PtyIni, EntVec

; External subroutines required ...

	Extern PiOn,   PiOff,  ConLop, ChnTab, LevTab, GetPtF, OnChns
	Extern ComLvl, WinIni, GetSp2, TrmImg, Normal, GetXjf, BldSbn
	Extern HashLn, GetPty, NewSjb, IniFdb

	Search WSym, MonSym, MacSym ; The symbols we need
	Sall			; Suppress macro expansions

ifndef PANDAsw,PANDAsw==:0	; Non-zero if PANDA terminal types

; Program entry vector

Entvec:	Jrst Start		; Starting location
	Jrst Start		; Reenter location, same thing
Vmajor==3			; Major version of Window
Vminor==0			; Minor version number
Vedit==1321			; Edit number
Vwho==4*PANDAsw			; Group who last edited (0=DEC development)
	%Version Vmajor, Vedit, Vminor, Vwho ; Version word
EvLen==.-EntVec			; Length of the entry vector

	SubTtl Initialization Section, once through only

Start:	SkipE PtyNam(WCL)	; A simple test ... is this the first time in?
	 Jrst Window		;  We have been here before, don't reset ...

ReStrt:	RESET%			; Reset the environment

	SetZ f,			; Clear first word of registers
	Move p, [f,, t1]	; Addrs for BLT
	Blt p, p-1		; Clear the whole mess

	Move p, [IoWd Pdlen, Pdl] ; Set up a fresh stack

	SetZM VarBeg		; Clear first word of variable area
	Move t1, [VarBeg,, VarBeg+1] ; Addrs for BLT
	Blt t1, VarEnd		; Clear the whole mess

	GTAD%			; Get the current time
	MoveM t1, TimNow	; Store the "current" time

	GJINF%			; Get some job info

	JumpL t4, [ HALTF%	; Running detached, stop cold
		    Jrst ReStrt ] ; Give it another go if continued

	MoveM t1, UserID	; Save our user ID, won't ever change
	MoveM t3, ThisJb	; Save our job number, won't ever change
	MoveM t4, OldTty	; Save TTY number for later ...

	MoveI t1, Blanks	; Addr of a blank line
	Call HashLn		; Compute a hash value for it

	MoveI t1, Dividr	; Addr of a divider
	Call HashLn		; Compute a hash value for it

	SetOM OldCon		; For the first time ...

	SetOM Editor		; There is no editor, for now

	Move t1, [AsciZ/unr*!/]	; The magic code
	MoveM t1, BacDor	; Store it away

	MoveI t1, SjbLen	; t1/ 0,, maximum number of entries
	MoveM t1, SjbTab	; Set initial count for subjob table

	MoveI t1, NamStk	; Addr of name stack
	MoveM t1, NstPtr	; Set pointer to it

	MoveI t1, NstLen	; Length of name stack
	SubI t1, 2		; Subtract length of header
	MoveM t1, NamStk + 1	; Save as size of first block

	MoveI t1, NamStk/1000	; Get page number of start of name stack
	MoveM t1, HiCore	; Save as page number of highest legit page

	SetOM NewHsh+TrmLen	; Make the last words of OldHsh and NewHsh
				;  always differ ...

	MoveI t1, OptBuf	; Address of the output buffer
	HrlI t1, (Point 7,0)	; Make it a byte ptr
	MoveM t1, ObfPtr	; Store the byte ptr

	Call GetXjf		; Go get a starting jfn (and name) for the EXEC

	SkipE t1, ExcJfn	; EXEC's jfn we just got
	 RLJFN%			;  Release it if we had it ...
	  ErJmp .+1		;   Ignore error ...
	SetZM ExcJfn		; Forget the jfn

	Move t1, [SixBit/PtyPar/] ; Get # of ptys in system
	SYSGT%			; ...

	HrrZM t1, FirPty	; Store tty correspondence for pty's
	HlrZS t1		; Get number of Pty's in system
	MoveM t1, SysPty	; Remember the number of Pty's on system
	CaiLE t1, MaxPty	; Too high?
	 MoveI t1, MaxPty	; Yes
	MoveM t1, NumPty	; Remember # of ptys

	MoveI t1, StdEch	; Get standard escape character
	MoveM t1, TrpChr	; Set it up

	SysGet (TtyJob)		; Get table # of GETAB% entries
	SysGet (JobPnm)
	SysGet (SNames)
	SysGet (JobRt)

	HrrOI t1, .SysVe	; GETAB word for SysVer string
	GETAB%			; Get the number of words
	 JEcBug (HLT,<Can't get size of system version string>)

	HrlZ t2, t1		; Set up aobjn ptr

VerLop:	HrrI t1, .SysVe		; The table number
	Hrl t1, t2		; Which word we want
	GETAB%			; Get it
	 JEcBug (HLT,<Failed to get word of system version string>)

	MoveM t1, SysVsn(t2)	; Store this word
	AobjN t2, VerLop	; Go loop

	MoveI t1, SysVsn	; Addr of string
	HrlI t1, (Point 7, 0)	; Make it a byte ptr
	SetO t4,		; Clear count (to -1)

Clip:	Ildb t2, t1		; Get the next byte
	JumpE t2, ClpEnd	; If null, go clip the string

	Aoj t4,			; Bump the count
	CaiE t2, ","		; Hit a comma?
	 Jrst Clip		;  No, go loop ...

	Move t3, t1		; Got a comma, save this byte ptr for later ...
	Move q1, t4		; Save the count too ...
	Jrst Clip		; Go loop some more

ClpEnd:	Dpb t2, t3		; Drop NUL on top of the last comma seen, thus
				;  removing the unneccessary part of the
				;  system version message which says ...
				;  ", TOPS-20 Monitor v(eeee)"

	MoveI t1, ^d34		; A magic number, the number of characters in
				;  the screen banner which are preallocated ...
	Sub t1, q1		; Subtract the size of this string
	Lsh t1, -1		; Shift right (divides by two)
	AddI t1, 2		; Add two (these are part of the 34)
	MoveM t1, SBanSp	; Store count of spaces to leave between entrys

	Call BldSbn		; Build an initial screen banner

; Be a pig ... this really IS an interactive fork, I don't care what the
;  Monitor thinks!

;	MoveI t1, .FhSlf	; This fork
;	MovX t2, 1b29 ! 3b35	; Highest queue is 1, lowest is 2 (written
				;  as desired queue plus 1, see SJPRI% jsys)
;	SPRIW%			; Set the priority for this fork
;	 ErJmp .+1		;  Can't, must not be allowed ...

	MoveI t1, .RsIni	; Make chars available
	RSCAN%			; Make text available to the following SIN%
	 JEcBug (HLT,<Can't make rescan text available>)

	MoveI t1, .RsCnt	; Want the rescan count
	RSCAN%			; Get it
	 JEcBug (HLT,<Can't get rescan count>)

	JumpLE t1, Window	; If no chars, skip this

	Move t4, t1		; Copy count to t4
	MovN t3, t1		; Copy over the count, negated, into t3

	MoveI t1, .PriIn	; Primary input
	HrrOI t2, ResTxt	; Where to put the text
	SIN%			; Pick up all the chars from the rescan buffer
	 JEcBug (HLT,<Can't read rescan buffer>)

	SetZM CmdCsb+.CmFlg	; No flags or reparse address

	Move t1, [.NulIo,, .NulIo] ; No jfns
	MoveM t1, CmdCsb+.CmIoj	; Set the I/O jfns

	Move t1, [Point 7, <CmdAtm+<AtmChr/2>>] ; Ptr to this place
	SetZM <CmdAtm+<AtmChr/2>> ; Clear that location
	MoveM t1, CmdCsb+.CmRty ; Set no CTRL/R text

	Move t1, [Point 7, ResTxt] ; Ptr to rescan text we just picked up
	MoveM t1, CmdCsb+.CmBfp	;  as pointer to start of buffer ...
	MoveM t1, CmdCsb+.CmPtr	;  and as pointer to next input to be parsed

	MoveM t4, CmdCsb+.CmInc	; Store count of chars to be read
	MoveM t4, CmdCsb+.CmCnt	;  ... and as count of space left in the buffer

	HrrOI t1, CmdAtm	; Pointer to the atom buffer
	MoveM t1, CmdCsb+.CmAbp	;  as the same

	MoveI t1, AtmChr	; Count of char positions in the atom buffer
	MoveM t1, CmdCsb+.CmAbc	;  as the same

	MoveI t1, GjfBlk	; Addr of the GTJFN arg block
	MoveM t1, CmdCsb+.CmGjb	;  as the same

	HrlZI t1, .FhSlf	; This fork,,0
	RMAP%			; Get a handle on my first page ...
	 JEcBug (HLT,<Can't get a jfn on this .EXE file>)

	HlrZ t2, t1		; Get jfn in right half
	HrrOI t1, String	; Where to put the name
	MovX t3, Fld(.JsAof,Js%Nam) ; Want the name only
	SetZ t4,		; Clear reg
	JFNS%			; Get the name
	 JEcBug (HLT,<Can't get name of this program>)

	MoveI t1, CmdCsb	; Addr of command state block
	MoveI t2, [FldDb. (.CmKey,Cm%Sdh,NamTbl)] ; Just this one table
	COMND%			; Do the COMND jsys
	 .NpRp Window, Window	;  Move on ...

	MoveI t1, CmdCsb	; Addr of command state block
	MoveI t2, [FldDb. (.CmSwi,Cm%Sdh,StaTbl)] ; Just this one table
	COMND%			; Do the COMND jsys
	 .NpRp Window, Window	;  Move on ...

; Since the only entry so far is NoAutoStart, and since we hit one of them,
;  that must be it ...

	SetOM NoStrt		; Say we don't want to read Window.Starting
	Jrst Window		; Move on now ...

NamTbl:	%Table			; Start of table
	String,,1		; TBLUK% ptr to the program name we will save
	%TbEnd			; End of table

StaTbl:	%Table			; Start of table
	%Key <NoAutoStart>, 1	; Suppress auto take of Window.Starting
	%TbEnd			; End of table

	SubTtl Initial, and reentry, code

Window:	Move p, [IoWd Pdlen, Pdl] ; Set up a fresh stack
	Call PiOff		; If ints are on, turn them off now

	MoveI t1, .HpRnt	; Want runtime
	HPTIM%			; Get it for this fork
	 JEcBug (HLT,<Can't get initial HP runtime>)
	MoveM t1, OldTim	; Store the time for later

	Move t1, [IoWd ^d10, StStck] ; Stack for state timing
	MoveI t2, StOthr	; Flag for "other" state
	Push t1, t2		; Push it onto the state stack
	MoveM t1, StkPtr	; Store the stack ptr

	GTAD%			; Get the current time
	MoveM t1, TimNow	; Store the "current" time

	Move t1, [SixBit/Window/] ; Who we are
	Move t2, t1		; Here too
	SETSN%			; Set the system name to be this
	 ErJmp .+1		;  Not important, really ...

	SetZM Halted		; Not halted any more
	SetWOf Gone		; Assume that we are not detached, not pushed
	SetZM OnHold		; No longer on hold ...

	SetZM InScr		; Not in the screen update ...
	SetZM InChu		; Not in the chunk handler ...
	SetZM InTmr		; Not in the timer ...

	GJINF%			; Get job info
	JumpGE t4, [ MoveM t4, OldTty ; Save TTY number for later ...
		     Jrst WndTag ] ; Move on down ...

	SetWOn Detchd		; We are detached
	SetOM Halted		;  and now we do want to halt

WndTag:	MoveI t1, -5		; For entire job ...
	SetZ t2,		; Nothing is an int char any more ...
	STIW%			;  ... now

	MoveI t1, .PriOu	; The terminal
	RFMOD%			; Get the current mode
	MoveM t2, OriMod	; Save it here

	SetZM PauCom		; Assume not pause-on-command mode
	TxNE t2, Tt%Pgm		; Is it?
	 SetOM PauCom		;  Yup ...

	Move t2, Normal		; A nice mode to be in ...
	SkipE PauCom		; Pause-on-command?
	 TxO t2, Tt%Pgm		;  Yes, set it
	SFMOD%			; Set it here ...
	STPAR%			;  and here ...

	Call TrmImg		; Go into image mode immediately

	MoveI t1, .PriOu	; The terminal
	MovX t2, .MoRXo		; Read pause-on-end-of-page mode
	MTOPR%			; Read the setting
	 JEcBug (HLT,<Can't read current pause-on-end-of-page mode>)
	MoveM t3, PauEnd	; Save it for later

	MovX t2, .MoXoF		; Want to set it now ...
	SetZ t3,		;  off ...
	MTOPR%			; Set it
	 JEcBug (HLT,<Can't turn off pause-on-end-of-page mode>)

	Call SpdChk		; Set up terminal interrupts ...

	Call SetInt		; Set up for interrupts

	SkipN PtyNam(WCL)	; If we haven't set it yet, ...
	 Jrst [	Call WclIni	;  set up for Window Command Level ...
		Call AutoSt	; Take auto-start file, if any ...
		Jrst .+2 ]	; Skip the message ...
	 Jrst [ Tmsg < [Reentering Window]

>
		MoveI t1, .PriOu ; The terminal
		DOBE%		; Wait until quiet ...
		MoveI t1, ^d100	; This many milliseconds ...
		DISMS%		; Wait ... (really a "pause for effect")
		Jrst .+1 ]

	;continued on next page
	;continued from previous page

	SkipN VtType		; If we already have a terminal type, assume Ok
	 Call GetTyp		;  No, find out what kind of display we are on

	SetZB i, NoCnct		; Subjob is WCL, do the connection
	SetFOn <ClearF ! StrChg> ; Say we need to display all, new str too

	HrrZ t1, PtyFrk(WCL)	; Handle for WCL fork
	MoveI t2, ComLvl	; Where we want to start it
	SFORK%			; Start it going ...
	 JEcBug(HLT,<Can't start WCL fork>)

	SetZB i, ConSjb		; WCL is currently connected subjob

	Call NewSjb		; Say we switched subjobs

	Call PiOn		; Turn ints on now ...

	Update			; Update the screen
	Jrst ConLop		;  and go run the main I/O loop ...

	SubTtl SetInt -- Set up interrupt system

SetInt:	MoveI t1, .FhSlf	; This fork ...
	RPCAP%			; Get current capabilities

	TxNN t2, Sc%Ctc		; Can we enable control-C intercept?
	 Jrst [	Tmsg <
? Window -- Can't enable for control-C intercept ...
>
		Jrst .+1 ]	; Try to continue anyway ...

	MoveI t1, .FhSlf	; This fork ...
	TxO t3, Sc%Ctc ! Sc%Sct	; Set enabled bits for Control-C trapping and
				;  ability to change source of terminal
				;  interrupts for another process
	TxO t2, Sc%Sct		; Set it in t2 also ...
	EPCAP%			; Enable these capabilities

	MoveI t1, .FhSlf	; Now initialize the interrupt system
	DIR%			; First turn it off

	CIS%			; Clear interrupt system ...

	SetZM PiCnt		; Initialize level of PiOff's

	Move t2, [LevTab,, ChnTab] ; Set up pi system
	SIR%

	Move t1, [ .TicCc,, NonChn ] ; Assign control-C to this channel
	ATI%			;  ... so that we can disable it
	 ErJmp .+1		;  Ignore error ...

	MoveI t1, .FhSlf	; Now activate all desired channels
	Move t2, OnChns
	AIC%

	Ret			;  and return with ints disabled

	SubTtl SpdChk -- Determine speed-dependent variables

SpdChk:	MoveI t1, .PriOu	; Set terminal mode word
	GTTYP%			; Get terminal type ...

; Set the delay to use when waiting for escape sequence to finish

	MoveI t1, ^d500		; The default delay will be this
	MoveM t1, EscTim	; Set it

	MoveI t1, 1		; Default speed class is 1
	MoveM t1, SpdCls	; Set it

	MoveI t1, .PriOu	; Controlling terminal designator
	MoveI t2, .MorSp	; Want terminal line speed
	MTOPR%			; Get it

	JumpL t3, R		; If inapplicable, use defaults

	HlrZ t1, t3		; Isolate input speed

	CaiL t1, ^d9600		; Is it 9600 baud or greater?
	 Jrst [	MoveI t2, ^d100	;  Yes, set this delay
		MoveM t2, EscTim ; ...
		MoveI t2, 5	; Set this speed class ...
		MoveM t2, SpdCls ; Now ...
		Ret ]		;  and return

	CaiL t1, ^d4800		; Is it 4800 baud or greater?
	 Jrst [	MoveI t2, ^d125	;  Yes, set this delay
		MoveM t2, EscTim ; ...
		MoveI t2, 4	; Set this speed class ...
		MoveM t2, SpdCls ; Now ...
		Ret ]		;  and return

	CaiL t1, ^d2400		; Is it 2400 baud or greater?
	 Jrst [	MoveI t2, ^d200	;  Yes, set this delay
		MoveM t2, EscTim ; ...
		MoveI t2, 3	; Set this speed class ...
		MoveM t2, SpdCls ; Now ...
		Ret ]		;  and return

	CaiL t1, ^d1200		; Is it 1200 baud or greater?
	 Jrst [	MoveI t2, ^d300	;  Yes, set this delay
		MoveM t2, EscTim ; ...
		MoveI t2, 2	; Set this speed class ...
		MoveM t2, SpdCls ; Now ...
		Ret ]		;  and return

	Ret			; Else, use the default, and return

	SubTtl WCLIni -- Initialize for Window Command Level

WCLIni:	SetZB i, ConSjb		; Window command level is always subjob 0

	Call GetPtF		; Set up a pty for WCL
	 Bug (HLT,<No PTYs available>)

	Call PtyIni		; Do standard initialization stuff
	 Bug (HLT,<Can't initialize for WCL PTY>)

	MoveI t1, [AsciZ/Window Command Level/]	; The name
	MoveM t1, PtyNam(i)	; Set it as the subjob name

	Move t1, [TrmLen,,^d1]	; Size and location for WCL
	MoveM t1, PtyNSL(i)	;  as new size and location


; Set up an initial subjob list

	MoveI t2, 2		; Get two words
	Call GetSp2		; Get them
	SkipN t2		; Did we get the space?
	 Bug (HLT,<Failed to get space for initial subjob list>)

	MoveM t1, SjList	; This will be our initial subjob list
	SetZM 0(t1)		; No next or previous subjob
	SetZM 1(t1)		;  and the number is zero

	Call WinIni		; 24 blank lines, top, hi, low and recent ptrs

	MovX t1, PtInvF		; Get invisible flag
	IOrM t1, PtySts(i)	; Set it for this subjob

	Ret			; Done here

	SubTtl FrkOpn -- Re-open the PTY for a lower fork

FrkOpn:	Call GetPty		; Set up a pty for the fork
	 Bug (HLT,<No PTYs available>)

	Ret			; Done here

	SubTtl FrkClo -- Close out a PTY for a lower fork

FrkClo:	Move

	SubTtl PtyIni -- Initialize a pty line

PtyIni:	SetZM PtOCnt(i)		; Initialize data base for this pty

	MoveI t2, PtyBSz	; The size of the buffer we need
	Call GetSp2		; Go get a buffer

	SkipN t2		; Did we get the space?
	 Bug (HLT,<Can't get space for PTY buffer>) ; A problem ...

	HrlI t1, (Point 7, 0)	; Set up byte pointers to buffer
	MoveM t1, PtOIbp(i)
	MoveM t1, PtOGbp(i)
	MoveM t1, PtOPbp(i)

	AddI t1, PtyBSz-1	; Now get byte pointer to end of buffer
	HrlI t1, (Point 7, 0, 34)
	MoveM t1, PtOEbp(i)	; For end checking

	SetZM PtICnt(i)		; No chars in this buffer yet

	MoveI t2, PtyBSz	; The size of the buffer we need
	Call GetSp2		; Go get a buffer

	SkipN t2		; Did we get the space?
	 Bug (HLT,<Can't get space for PTY buffer>) ; A problem ...

	HrlI t1, (Point 7, 0)	; Set up byte pointers to buffer
	MoveM t1, PtIIbp(i)
	MoveM t1, PtIGbp(i)
	MoveM t1, PtIPbp(i)

	AddI t1, PtyBSz-1	; Now get byte pointer to end of buffer
	HrlI t1, (Point 7, 0, 34)
	MoveM t1, PtIEbp(i)	; For end checking

	SetZM PtECnt(i)		; No chars in this buffer

	MoveI t1, PtEBuf(i)	; Addr of escape buffer
	HrlI t1, (Point 7, 0)	; Set up byte pointers to buffer
	MoveM t1, PtEIbp(i)
	MoveM t1, PtEGbp(i)
	MoveM t1, PtEPbp(i)

	RetSkp			; Return good

	SubTtl AutoSt -- Take Window.Starting automagically

AutoSt:	SetZM RdJfn		; Not reading anything yet ...

	SetO t1,		; This job
	HrrOI t2, t4		; One word, which is t4
	MoveI t3, .JiLno	; Want logged-in directory number
	GETJI%			; Get it
	 JEcBug (HLT,<GETJI failed>)

	HrrOI t1, String	; Where to put the file name we are building
	Move t2, t4		; Copy over the directory number
	DIRST%			; Get the directory name into the string
	 JEcBug (HLT,<DIRST failed>)

	Move t2, t1		; Copy over the ptr
	HrrOI t1, [AsciZ/Window.Starting.0 /] ; Additional text
	SetZ t3,		; Stop on a null
	SIN%			; Copy the text
	 JEcBug (HLT,<SIN failed>)

	MovX t1, Gj%Sht ! Gj%Old ! Gj%Phy ; Short form, old file, use system
				;  logical names only ...
	HrrOI t2, String	; Where we saved the file name ...
	GTJFN%			; Get a jfn, if we can ...
	 ErJmp NoAuto		;  None ...

	HrrZS t1		; Drop left half ...
	MoveM t1, HldJfn	; Save jfn for a moment

	MovX t2, Fld(7, Of%Bsz) ! Of%Rd ; Seven bit bytes, read
	OPENF%			; Try to open the file
	 Jrst [	Move t1, HldJfn	; Get the jfn
		RLJFN%		; Release it
		 Trn		;  Ignore the error
		Jrst NoAuto ]	; That's it

	SkipE NoStrt		; Suppressing it?
	 Jrst [	Move t1, HldJfn	; Get the jfn
		RLJFN%		; Release it
		 Trn		;  Ignore the error
		Ret ]		; This makes us remark that we are suppressing

	Move t1, HldJfn		; Get the jfn
	MoveM t1, RdJfn		; Store it

	SetWOn HidFlg		; Start out hiding, unhide after first command
				;  if first command is not Hide

	Ret			; That's it

NoAuto:	SetZM NoStrt		; Forget that we are suppressing this
	Ret			; That's it

	SubTtl GetTyp -- Ask Monitor what kind of terminal this is

GetTyp:	SetFOf Vt100F		; Assume not a vt100 ...

	MoveI t1, .PriOu	; Controlling terminal
	GTTYP%			; Get terminal type

	CaiE T2, .Tt100		; Is it a VT100?
	 CaiN t2, .Tt102	; Is it a VT102?
	  Jrst Get100

	CaiE T2, .Tt125		; Is it a VT125?
	 CaiN t2, .Tt131	; Is it a VT131?
	  Jrst Get100

	CaiE T2, .Ttk10		; Is it a VK100?
	 CaiN t2, .Tt200	; Is it a VT200?
	  Jrst Get100

ifn PANDAsw,<
	CaiE T2, .Tt132		; Is it a VT132?
	 CaiN t2, .TtWic	; Is it a WICAT?
	  Jrst Get100

	CaiE T2, .TtANS		; Is it ANSI?
	 CaiN t2, .TtS1V	; Is it a Selanar VT100?
	  Jrst Get100

	CaiE T2, .TtR1V		; Is it a Retrographics V1?
	 CaiN t2, .TtR2V	; Is it a Retrographics V2?
	  Jrst Get100
>;ifn PANDAsw

	CaiE t2, .TtV52		; Is it a VT52?
	 CaiN t2, .TtH19	; Is it a H19?
	  Jrst Get52

	SetZM VtType		; Assume hardcopy if we can't prove otherwise

	Ret			;  and return

Get100:	SetFOn Vt100F		; Flag it's a VT100
	SkipA t1,[VT100]	; Code for VT100
Get52:	 MoveI t1, VT52		; Code for VT52
	MoveM t1, VtType	; Store the type
	Ret			;  and return

LitWin:				; A label for the literal pool ...

	End <EvLen,, EntVec>
