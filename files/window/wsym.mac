	Universal WSym - Static symbols for the Window program

Comment \


Written by ...	Tad Marshall, American Express Co., March - November 1981


			Table of Contents	      Page(s)

\


	Intern Blanks, Dividr

	Extern LftMrg, GenInt, AllTab, CmdTab, Confrm, RSkp,   R,      .Bmsg
	Extern Tp1Ret, Tp2Ret, Tp2Rsk, TypErr, .Lock,  .ULock, .Omsg,  Set80

	SubTtl Definitions

	Search MonSym, MacSym	; The normal universal files to search
	Sall			; Suppress macro expansions


; Register names ...

f=0				; Flag register

t1=1				; General temp and Jsys registers:
t2=2				;  never preserved
t3=3				;  ...
t4=4				;

q1=5				; First set of preserved regs
q2=6				;  (must be preserved by callee
q3=7				;   across a call)

p1=10				; Second set of preserved regs
p2=11				;  (ditto)
p3=12				;
p4=13				;
p5=14				;
p6=15				; NB: not useable with TrVar MacSym facility

i=16				; The subjob index

p=17				; Stack pointer

	;continued on next page
	;continued from previous page

	; Flags in register f (0)

ClearF==1b0			; Want to clear the screen
StrChg==1b1			; Flag to say some structure changed, says
				;  that MVList and Alloc need to be run
WntPsh==1b2			; We want to Push ...
WntDet==1b3			; We want to Detach ...
WntLgo==1b4			; We want to Logout ...

Litral==1b16			; Literal flag (says send the next keystroke
				;  directly to the subjob, translated)
Vt100F==1b17			; Flag to say this is a vt100 ...


	; Flags in WState word

Detchd==1b0			; Job is detached
PushF==1b1			; Pushed to lower EXEC
Gone==<Detchd ! PushF>		; A special name for these two together ...
ShoBel==1b2			; Show bells in subjob output (as inverted ^Gs)
HidFlg==1b3			; Hiding startup output
WntHid==1b4			; "Hide" was the first command in the file
NotFst==1b5			; Set on after the first command
ConFlg==1b6			; Continue halted forks


	; Flags in Restri word ... resticted functions

EscapR==1b18			; Escape with escape character, ^X or whatever
EnterR==1b19			; Enter key
CommaR==1b20			; Comma (prefix) key
	;PF1R==1b21
	;PF2R==1b22
PF3R==1b23			; PF3-key
PF4R==1b24			; PF4-key
ZeroR==1b25			; Keypad zero
NineR==1b26			; Keypad nine
	; ...
SavedR==1b35			; Restrictions have been saved in Restr2


	; Names of any special subjob IDs

WCL==0				; Name for subjob id of Window Command Level


; Channels for interrupts

OptChn==^d1			; Channel for "Pty has output"
NonChn==^d2			; A Channel we never use
UpdChn==^d3			; Pty update channel
TimChn==^d4			; Timer channel
ChuChn==^d5			; Chunk channel
WclChn==^d23			; WCL channel (WCL wakes up higher level)


	; Flags in PtySts for each subjob/subfork

PtDisF==1b18			; Discard output from this pty
PtRefF==1b19			; Refuse output from this pty
PtInvF==1b20			; Invisible
PtNoBF==1b21			; No Banner
PtOnsF==1b22			; On-screen
PtTraF==1b23			; Transparent
PtCurF==1b24			; "Cursor key mode set"
PtHldF==1b25			; Hold output from this pty
PtTrcF==1b26			; Subjob is traced
PtPadF==1b27			; VT100 keypad in application mode
PtEdiF==1b28			; This "subjob" is the editor fork
PtLzyF==1b29			; Permit "lazy updates"
PtHltF==1b30			; Subfork has been seen to be halted
PtFreF==1b31			; Subfork is "Freeze-when-offscreen"
PtDlFF==1b32			; Subfork is deliberately frozen

	; Codes for legal (video) terminal types

La36==0				; Code for a hardcopy terminal (La36)
Vt100==1			; Code for DEC VT100 terminal
Vt52==2				; Code for DEC VT52
IM3101==3			; Code for IBM 3101 terminal


; Terminal parameters

TrmWid=^d80			; Terminal width (number of columns on screen)
TrmLen=^d24			; Terminal length (number of lines on screen)
BotLin=TrmLen-1			; Last line on a screen

	;continued on next page
	;continued from previous page

; Byte attributes for screen characters

Bold=200			; Extra bright
UScore=400			; Underscored
Blink=1000			; Blinking
Invert=2000			; Inverted (white on black vs. black on white)
Graphi=4000			; Graphic character
				;  (ie. must be in graphic mode)


; Line attributes for screen lines

TopHlf==1			; Top half of double height line
BotHlf==2			; Bottom half of double height line
WidLin==4			; Double width line
WclLin==10			; Line belongs to Window Command Level
Banner==20			; Line is a banner
Chnged==40			; Line has changed ... (needs to be rehashed)
ScrBnr==100			; This is the screen banner (Banner set also)


; Displacements of items in a line node

.FwdPt==0			; Forward pointer word (next line)
.BkwPt==1			; Backward pointer word (previous line)
.Flags==2			; Flags for line (attributes, etc.)
.Time==3			; Timestamp for this line, time of last write
.Hash==4			; Computed hash value for this line
.Data==5			; Beginning of data portion, allocated as
				;  three 12-bit bytes per word


; Other line related items

ChrPer==3			; Number of chars per word (internal format)
LinSiz=.Data + < <TrmWid-1> / ChrPer > + 1 ; Number of words in a line node


; Other stuff

PtyBSz==1000			; Size of buffer for each pty
PtyMxC=PtyBSz*5			; Number of characters in a buffer

MaxPty=30			; Maximum number of jobs allowed

NamStk=140000			; Location of dynamic storage
NstLen=540000			; Size of dynamic storage, ie. name stack

TabSiz==15			; Width of a tab for the WHAT command

StdECh=="X"-100			; Standard escape character

	SubTtl OpDefs and Macro Definitions

; OpDef to get to the left margin

OpDef .LeftM [<Call LftMrg>]


; OpDef to cause an interrupt to update the screen

OpDef Update [<Call GenInt>]


; OpDef so WCL can lock his superior fork

OpDef Lock [<Call .Lock>]


; OpDef so WCL can unlock his superior fork

OpDef UnLock [<Call .ULock>]


; OpDef to confirm a COMND line

OpDef CmCfm [<Call Confrm>]


; Macros to test a condition in register f


Define TestOn (bits) <
	TxNE f, bits >


Define TestOf (bits) <
	TxNN f, bits >


; Macros to set flag bits in register f on and off

Define SetFOn (bits) <
	TxO f, bits >


Define SetFOf (bits) <
	TxZ f, bits >


; Macros to test a condition in the WState word

Define TstWOn (bits,word) <
IFB <word>,< Move t1, WState >
IFNB <word>,< Move t1, word >
	TxNE t1, bits >


Define TstWOf (bits,word) <
IFB <word>,< Move t1, WState >
IFNB <word>,< Move t1, word >
	TxNN t1, bits >


; Macros to set flag bits in the WState word on and off

Define SetWOn (bits,word) <
	MovX t1, bits
IFB <word>, < IOrM t1, WState >
IFNB <word>, < IOrM t1, word >
>

Define SetWOf (bits,word) <
	MovX t1, bits
IFB <word>, < AndCam t1, WState >
IFNB <word>, < AndCam t1, word >
>


; Macro to build banner from embedded text

Define Bmsg (text) <
	HrrOI t1, [AsciZ/text/]
	Call .Bmsg >


; Macro to build banner from a string

Define BmsgS (addr) <
	HrrOI t1, addr
	Call .Bmsg >


; Macro to add a char to the output buffer

Define Char (x) <
IfNB <x>, < MoveI t1, x >
	Idpb t1, ObfPtr
	Aos ObfCnt >

; Macro to add an escape to the output buffer

Define Escape <
	MoveI t1, .ChEsc
	Idpb t1, ObfPtr
	Aos ObfCnt >


; Macro to add a carriage return to the output buffer

Define Cr <
	MoveI t1, .ChCrt
	Idpb t1, ObfPtr
	Aos ObfCnt >


; Macro to add a linefeed to the output buffer

Define Lf <
	MoveI t1, .ChLfd
	Idpb t1, ObfPtr
	Aos ObfCnt >


; A common macro to load t1 with the status

Define GetSts <
	Move t1, PtySts(i) >	; Pick up subjob status


; Test a pty status bit for subjob i (clobbers t1)

Define SkpfOn (bitnam) <
	GetSts			; Get the status
	TxNN t1, bitnam >	; Test the bit


; Test a pty status bit for subjob i (clobbers t1)

Define SkpfOf (bitnam) <
	GetSts			; Get the status
	TxNE t1, bitnam >	; Test the bit


; Macro for entering a new state

Define EnterX (State) <
	MoveI t1, .HpRnt	; Want high-precision runtime for this fork
	HPTIM%			; Get the process runtime
	 JEcBug (HLT,<Can't get high-precision Window runtime>)
	Move t2, t1		; Copy it over
	Sub t2, OldTim		; Subtract the old time
	MoveM t1, OldTim	; Update the old time
	Move t1, StkPtr		; Pick up the stack ptr
	Move t3, 0(t1)		; Pick up the old state
	AddM t2, Times(t3)	; Update the proper time
	MoveI t2, State		; Get the new state
	Push t1, t2		; Save it on the stack
	MoveM t1, StkPtr	; Put back the updated stack ptr
>


; Macro for exiting a state

Define ExitX <
	MoveI t1, .HpRnt	; Want high-precision runtime for this fork
	HPTIM%			; Get the process runtime
	 JEcBug (HLT,<Can't get high-precision Window runtime>)
	Move t2, t1		; Copy it over
	Sub t2, OldTim		; Subtract the old time
	MoveM t1, OldTim	; Update the old time
	Move t1, StkPtr		; Pick up the stack ptr
	Move t3, 0(t1)		; Pick up the current state
	AddM t2, Times(t3)	; Update the proper time
	Pop t1, 0(t1)		; Pop the stack back by one
	MoveM t1, StkPtr	; Put back the updated stack ptr
>


; Start of a COMND% table

Define %Table <
	%%tbst== .		;; Plant start of table
	exp 0			;;  and leave a hole for %tbend to fill
>

; End of a COMND% table

Define %TbEnd <
	%%tbnd==.-1		;; Get address of last entry in table
	.org %%tbst		;; Move back to start
	xwd %%tbnd-%%tbst, %%tbnd-%%tbst;;  and build table header
	.org			;; Finally, get back to the way we were
>

; %Key
;
;    This macro takes three arguments: an (alphanumerics only!) name, the
; data to be associated with the name, and an (optional) flag value.  It
; creates either a flag-less keyword (the normal case), or, if flags are
; given, a keyword with flags in the first word (and cm%fw set).  Thus,
; the result is a TBLUK table entry, suitable for use by the .CMkey COMND%
; Jsys function.  Note that all %Key words in a table must be bracketted
; by %Table and %TbEnd macros (see above).

Define %Key (Name, Data, Flags) < ;; Flags are optional
   IfB <Flags>, <
	xwd [asciz\name\],data	;; No-flags case
   >
   IfNB<Flags>, <
	xwd [<flags>!cm%fw	;; Flags: first word holds them,
	     asciz\name\], data	;;  second is start of name
   >
>

; %Ptr
;
;    Build a standard ASCIZ pointer to a literal string.

define %ptr(str)
   <<point 7, [asciz\str\]>>

; %Version
;
;    This macro builds a standard DEC version word from its arguments.
; In order, its arguments are the major version, the edit number, the
; minor version, and the customer version.  Omitted fields default to
; zero.

define %version(ver<0>, edit<0>, minor<0>, cust<0>) <
	exp  byte (3) cust  (9) ver  (6) minor  (18) edit
>

	;continued on next page
	;continued from previous page

; Macro to type a message

Define Tmsg (msg) <
	HrrOI t1, [AsciZ\msg\]
	PSOUT% >


; Macro to type a message from a string

Define TmsgS (addr) <
	HrrOI t1, addr
	PSOUT% >


; Macro to output a string to the output buffer

Define Omsg (msg) <
	MoveI t1, [AsciZ\msg\]
	Call .Omsg >


; Macro to put out a compound error message, including a system part

Define .JerMs (msg) <

	Push p, t1		; Save the error code
	.LeftM			; Get to the left margin
	Tmsg <
? msg: >			; The start of the message
	Pop p, t1		; Get back the error code
	Call TypErr		; Type out the error message
	Call Tp2Ret >		; Type out two CrLf's


; Macro to put out COMND noise words

Define CmNoi (xxx) <
	HrrOI t1, [AsciZ\xxx\]
	Call Noise >

	;continued on next page
	;continued from previous page

; Macro to branch on No-Parse and Re-Parse errors, assumes that
;	t1 contains flags

Define .NpRp (NopLab, RepLab) <
	JEcBug (HLT,<COMND failed>) ; Check for JSYS errors
	TxNE t1, Cm%Rpt		; If 'reparse needed' ...
	 Jrst RepLab		; Go to reparse addr
	TxNE t1, Cm%Nop		; If 'no parse' ...
	 Jrst [	MoveM t2, CmdErr ; Save error code for later ...
		Jrst NopLab ] >	;  ... and go to the no-parse addr


; Macro to branch on No-Parse, Re-Parse and Other errors, does
;	not assume t1 holds flags

Define .NpRpO (NopTag, RepTag, OthTag) <
	Jrst [	MoveI t1, CmdCsb ; Get addr of Csb in right half of t1
		Hll t1, CmdCsb+.CmFlg ; Get parse flags in left half of t1
		TxNE t1, Cm%Rpt	; If 'reparse needed' ...
		 Jrst RepTag	;  ... go to reparse addr
		TxNE t1, Cm%Nop	; If 'no parse' ...
		 Jrst NopTag	;  ... go to no-parse addr
		Jrst OthTag ] >	; No, handle "other" error


; Macros to handle 'Bugs', unexpected errors

Define Bug (X, Y) <
	Call [	Push p, t1

		Tmsg <
? Window bug: Y
>
		Pop p, t1

IfIdn <X> <HLT>, < Push p, t1
		Tmsg <% Halting ...

>
		Pop p, t1
		HALTF% >	; Halt on serious error, continue if desired

IfDif <X> <HLT>, <Tmsg <
>
>
		Ret ] >


; Jsys oriented bug, using ErCal

Define JEcBug (X, Y) <
	ErCal [	Push p, t1
		Push p, t2
		Push p, t3

		Call Set80	; Set the width to 80 ...

		Tmsg <
? Window bug: Y -- >
		SetO t1,	; Want most recent error
		Call TypErr	; Type the error message
		Call Tp2Ret	; Type two crlfs

		Pop p, t3
		Pop p, t2
		Pop p, t1

IFIDN <X> <HLT>, < Push p, t1	; Save reg
		Tmsg <% Halting ...

>

		Pop p, t1	; Restore

		HALTF% >	; If a serious error, halt, but continue if
				;  desired

		Ret ] >

	;continued on next page
	;continued from previous page

; Another Jsys oriented bug, but uses Call instead of ErCal

Define JCBug (X, Y) <
	Call [	Push p, t1
		Push p, t2
		Push p, t3

		Tmsg <
? Window bug: Y -- >
		SetO t1,	; Want most recent error
		Call TypErr	; Type the error message
		Call Tp1Ret	; Type a crlf
		Call Tp1Ret	; Type a crlf

		Pop p, t3
		Pop p, t2
		Pop p, t1

IFIDN <X> <HLT>, < Push p, t1	; Save reg
		Tmsg <% Halting ...

>
		Pop p, t1	; Restore
		HALTF% >	; If a serious error, halt, but continue if
				;  desired
		Ret ] >


; Macro to write out an error message

Define ErrMes (MESSAGE)<
	Call [  MoveI t1, .PriIn ; Clear type ahead
		CFIBF%
		.LeftM		; Get to the left margin
		Tmsg <message

>
		Ret ] >


; Macro to get the table number of a GETAB table

Define SysGet(X)<
	Move t1, [SixBit/X/]
	SYSGT%
	HrrZM t2, X>

	SubTtl Storage area definitions

	Lc=60000		; The start of changable core
	Loc Lc			; Go there

; Some changable storage ...

CmdFdb:	FldDb. (.CmKey,,CmdTab,<Window command,>,, 777777)
				; 777777 will be patched ...

; Subjob, default will be inserted anew for each use (ie. 'last'
;	is a dummy default)

SboFdb:	FldBk. (.CmKey,,SjbTab,<name,>,<last>, 
		[BrMsk. (KeyB0.,KeyB1.,KeyB2.,KeyB3.,<_>,)] )


; Subjob name given in Define command, will be changed by routine

DefFdb:	FldBk. (.CmFld,Cm%Sdh,,<name for this window>,<0>, 
			[BrMsk. (KeyB0.,KeyB1.,KeyB2.,KeyB3.,<_>,)] )


; Alias given in define command ...

AltCfm:	FldDb. (.CmCfm,,,,, 
		[FldBk. (.CmFld,Cm%Sdh,,<alternate name for window>,, 
		  [BrMsk. (KeyB0.,KeyB1.,KeyB2.,KeyB3.,<_>,)] )] )


; Noise fdb ... noise word ptr inserted anew each time

NoiFdb:	FldDb. (.CmNoi,,<-1>)


; Fdb for parsing program name ...

PrgFdb:	FldDb. (.CmCfm,Cm%Sdh,,<-1>,, 
		[FldDb. (.CmFil,Cm%Sdh,,<filespec of program to run>)] )

	;continued on next page
	;continued from previous page

; Subjob table - maintained by TBADD and TBDEL

	SjbLen=2*MaxPty + 1	; Number of entries (max) in table

SjbTab:	0,, SjbLen		; Starts empty, can grow to SjbLen entries
	Block SjbLen		; The table itself


; A line of blanks

Blanks:	0			; No forward ptr
	0			; No back ptr
	0			; No special flags
	0			; No timestamp yet ...
BlnHsh:	0			; The hash value, computed on startup
	Repeat LinSiz-.Data, <
	Byte (12) " "," "," "
>

; The divider ...

Dividr:	0			; No forward ptr
	0			; No back ptr
	0			; No special flags
	0			; No timestamp yet ...
	0			; Hash value to be added later
	Byte (12) "<","-","-","-","-","-","-","-","-","-","-","-",
		  " "," "," "," "," "," "," "," "," "," "," "," ",
		  " "," "," "," "," "," "," "," "," "," ",
		  "-","-","-","-","-","-","-","-","-","-","-","-",
		  " "," "," "," "," "," "," "," "," "," "," "," ",
		  " "," "," "," "," "," "," "," "," "," ",
		  "-","-","-","-","-","-","-","-","-","-","-",">"

	;continued on next page
	;continued from previous page

; Raw storage

	Lc=.			; Raw storage starts here

Define Alc (Nam, Siz) <
	Nam=Lc
	Lc=Lc+Siz
>

VarBeg=Lc			; Name for beginning of variable storage

; Start with some of the most-used items ...

Alc Lev1Pc, 1			; Interrupt level 1 PC
Alc Lev2Pc, 1			; Level 2 PC
Alc Lev3Pc, 1			; Level 3 PC

Alc Wcl1Pc, 1			; Wcl interrupt level 1 PC
Alc Wcl2Pc, 1			; Level 2 PC
Alc Wcl3Pc, 1			; Level 3 PC


	; Some general flags

Alc Flags, 1			; Word to hold register f (0) flags being
				;  passed from WCL to his superior
Alc WState, 1			; Bits saying what state we are in
Alc Restri, 1			; Bits saying what functions are restricted
Alc Restr2, 1			; As above, "pushed" restrictions
Alc Last5, 1			; Last five characters seen ...
Alc BacDor, 1			; Word for magic back door code ...


; State times -- instrumentation to see where we spend our time

StOthr==0			; "Other", base state
StTimr==1			; Timer
StChun==2			; Chunk
StScrn==3			; Screen update
StUpd1==4			; Updating line, phase 1
StUpd2==5			; Updating line, phase 2
StGoTo==6			; Doing screen addressing
StSout==7			; String output (SOUT%, DmpBfr)
StPtyO==^d8			; PTY output
StBIN==^d9			; BINs in PTY output
HiStat==StBIN			; Highest existing state number

NTimes==HiStat+1		; Number of states
Alc StStck, NTimes		; State stack, used for instrumentation
Alc StkPtr, 1			; Stack ptr
Alc OldTim, 1			; Time we entered the current state

Alc NewTot, 1			; Timing total this time (for Dump command)
Alc Times, NTimes		; Times spent in the various states ...

Alc DmpTot, 1			; Timing total we last dumped
Alc DmpTms, NTimes		; Holds timing values we last dumped ...


; Flags

Alc OneWin, 1			; One window mode flag
Alc RedInt, 1			; Redisplay interval
Alc OnHold, 1			; WCL has put higher fork on hold ...
Alc Halted, 1			; Program wants to shut down
Alc NoFlag, 1			; Flag to say that "NO" was typed
Alc NoStrt, 1			; Flag to say don't take Window.Starting
Alc NoCnct, 1			; Flag to say "don't connect" to the screen
				;  updating routine
Alc NoScrl, 1			; Flag to say "don't use the scroller"
Alc LstBrk, 1			; Last char seen by ConLop was a break (null)
Alc SetPre, 1			; Flag to set prefix after processing this char
Alc Prefix, 1			; A prefix character was seen (keypad comma)
Alc ScrBnF, 1			; Flag to say we want a screen banner
Alc GoRead, 1			; Flag to say there is something to go read
Alc IniDon, 1			; Flag to say WCL initialization is done
Alc Blnked, 1			; Current line has been blanked, UpdLin tells
				;  the GetChr subroutine of GoTo
Alc DetMsg, 1			; Yell at user about stupid ATTACH stuff ...
Alc DidEsc, 1			; Flag to say we just did an escape sequence
Alc DiscaF, 1			; 'Discarding output from this line' flag
Alc SilncF, 1			; -1 = turn of echoing of Get commands
Alc RefAll, 1			; Refuse All was typed
Alc DisAll, 1			; Discard All was typed
Alc OnScrn, 1			; On-screen?
Alc EosFlg, 1			; Flag to say DoCeos may be used in place of
				;  DoCeol by UpdLin ...


	; Flags for communicating between WCL fork and top fork

Alc WantIt, 1			; WCL wants control of data structures ...
Alc WaitTm, 1			; Wait time ...
Alc DefWin, 1			; WCL wants a subjob or subfork created
Alc AFork, 1			; Flag to say WCL really wants a sub-fork
Alc SwiSjb, 1			; WCL says he is switching subjobs
Alc SendCh, 1			; WCL wants a char sent to a subjob
Alc KilFrk, 1			; WCL wants a subfork killed
Alc KilPsh, 1			; WCL wants pushed EXEC to be killed
Alc CloJfn, 1			; WCL wants this jfn closed
Alc NewTrm, 1			; WCL wants new terminal type
Alc NewPau, 1			; WCL wants new Pause-On-Command setting


	; Other stuff ...

Alc NstPtr, 1			; Pointer to name stack
Alc HiCore, 1			; Highest page used

Alc TimNow, 1			; The "current" time (so we don't do a zillion
				; GTAD% calls ...)

Alc PiCnt, 1			; # of PiOff's done

Alc PopCnt, 1			; Total number of PTY-output interrupts
Alc ScrCnt, 1			; Total number of screen update interrupts
Alc ChuCnt, 1			; Total number of chunk update calls
Alc DocCnt, 1			; Total number of chunk update interrupts
Alc TimCnt, 1			; Total number of timer interrupts
Alc BanCnt, 1			; Total number of window banner update calls
Alc SBnCnt, 1			; Total number of screen banner update calls
Alc WclCnt, 1			; Total number of WCL interrupts

Alc PopAbt, 1			; Number of aborted PTY-output interrupts
Alc ScrAbt, 1			; Number of aborted screen update interrupts
Alc DocAbt, 1			; Number of aborted chunk update interrupts
Alc TimAbt, 1			; Number of aborted timer interrupts

Alc UserID, 1			; Our user ID (me)
Alc ThisJb, 1			; Job number of the current job (me)
Alc OldTty, 1			; Most recently seen terminal number

Alc SjList, 1			; Ptr to full subjob list

Alc ConSjb, 1			; Currently connected subjob

Alc Editor, 1			; Subjob number of editor (EMACS) fork
Alc EdiFrm, 1			; Subjob from which we invoked the editor
Alc EdiPau, 1			; Pause-on-command mode before invoking EMACS

Alc SjCnt, 1			; Subjob/fork count, number of DEF'ed or DF'ed
				; windows (not including WCL or EMACS)

Alc InScr, 1			; Flag to say we are in the screen update
Alc InTmr, 1			; Flag to say we are in the timer
Alc InChu, 1			; Flag to say we are in the chunk handler


Alc Flash, 1			; Do we flash the screen when beeping?
				;  0 = no, -1 = white then black, 1 = black
				; then white ...

Alc Comand, 1			; Address of COMND entry which we are parsing
Alc Comnd2, 1			; Address of COMND entry for word 2
Alc Comnd3, 1			; Address of COMND entry for word 3
Alc CmdErr, 1			; Error code returned by COMND in reg t2

Alc NopCnt, 1			; Number of times the timer ran but found
				;  nothing to do, incremented by .Timer,
				;  cleared by UpdLin when it does something

Alc LogTim, 1			; Time we last updated the log file
Alc LstTim, 1			; Last time we left the timer routine (used to
				;  prevent unneccessary timer cycles)
Alc OnhTim, 1			; Time we went on hold, to watch for lockups
Alc RedTim, 1			; Time we last did a screen refresh

	;continued on next page
	;continued from previous page

Alc VtType, 1			; Terminal type code, 0=Hardcopy
				;  1=Vt100, 2=Vt52, 3=IBM3101, ...

Alc LstChr, 1			; Last character seen (used by escape handler)
Alc UnpChr, 1			; Unpulled char ... (see above)


	; Some global display parameters

Alc NewVis, 1			; Ptr to new visible list

Alc LstSnt, 1			; Last char sent to a subjob

Alc SavMod, 1			; Mode TrmImg found, restored by TrmAsc
Alc ScrReg, 1			; Last region we set
Alc ScrRow, 1			; Row number (1-24) of where we think we are
				;  on the physical screen
Alc ScrCol, 1			; Column number (1-80)
Alc ScrAtr, 1			; Attributes set for physical screen (eg.
				;  Blink, Bold, Graphic, etc.)

Alc TrpChr, 1			; Trap character to get back to ComLvl
Alc Margin, 1			; Current margin

	;continued on next page
	;continued from previous page

Alc EscTim, 1			; Number of milliseconds to wait when we
				;  hit an escape when connected, prior to
				;  testing for escape sequence ... based on
				;  the line speed, set by SpdChk

Alc SpdCls, 1			; Speed class ... 1 is  300 baud,
				;                 2 is 1200 baud,
				;                 3 is 2400 baud,
				;                 4 is 4800 baud,
				;                 5 is 9600 baud

Alc PadAmt, 1			; Padding amount, amount to shift

Alc LineId, 1			; Monotonically increasing line ID number (only
				;  the right half is used)

Alc SjbNum, 1			; Where we are in subjob list
Alc FirPty, 1			; Tty number of first Pty
Alc NumPty, 1			; # of Pty lines available for Window
Alc SysPty, 1			; Number of Pty's in system
Alc TtyJob, 1			; Table # of TtyJob for GETAB%
Alc JobPnm, 1			; GETAB% table # of jobnam
Alc SNames, 1			; GETAB% table # of snames
Alc JobRT, 1			; GETAB% table # of jobrt
Alc OptChr, 1			; A char we are sending to one or all subjobs

Alc OriMod, 1			; Mode on first time thru (or a reenter)
Alc PauCom, 1			; Pause-on-command mode (-1 if Tt%Pgm on)
Alc PauEnd, 1			; Pause-on-end-of-page mode (-1 if on)

	;continued on next page
	;continued from previous page

Alc LstHdr, 1			; Index of last job a header was typed
Alc LstCon, 1			; Last job connected to (for reconnection)
Alc OldCon, 1			; Similar concept, but for the NewSjb routine

Alc TheJfn, 1			; The jfn to be typed
Alc HldJfn, 1			; Place to hold jfn for a moment
Alc ExcJfn, 1			; Jfn of EXEC we want (didn't get it yet)
Alc EdiJfn, 1			; Jfn of the editor (Emacs)
Alc RdJfn, 1			; Jfn of auto command file
Alc LogJfn, 1			; Jfn of logging file

Alc ExecFk, 1			; Handle for EXEC fork, or zero

Alc ExecNm, ^d10		; The name of the EXEC

Alc ExcStr, 3			; Structure name for EXEC
Alc ExcDir, 8			; Directory name
Alc ExcNam, 8			; File name
Alc ExcExt, 8			; Extension

Alc Names, 2			; Program names

Alc DevNam, 2			; AsciZ device name of PTY

	JiTbLn==.JiLno+1	; Room for up to .Jilno
Alc JiTab, JiTbLn		; GETJI info for jobs during "What"

Alc ForkSt, ^d30		; Table to hold fork statuses

Alc Keys, ^d8			; Ptrs to non-window-specific user-defined keys

Alc Nums, 20			; Numbers found in an escape sequence
Alc NumCnt, 1			; Count of numbers found
Alc NumPtr, 1			; Where we are in reading the list of numbers

Alc NewRow, 1			; Temp storage for new row number
Alc NewCol, 1			; Temp storage for new column number

	;continued on next page
	;continued from previous page

	; Place to store rescan text

	ResSiz=^d40		; This many words long
Alc ResTxt, ResSiz		; Text to be set up in rescan buffer for a fork

Alc ScrBan, LinSiz		; Place to hold the screen banner

Alc SysVsn, ^d16		; The system version string

Alc SBanSp, 1			; The number of spaces to leave between entrys
Alc SBanPt, 1			; Saved pointer into screen banner
Alc SBanCt, 1			; Saved count into screen banner
Alc SBanTm, 1			; Time of last update to the screen banner

	;  These guys are vectors (one word per line)

Alc OldHsh, <TrmLen+1>		; Old map hash-value vector
Alc NewHsh, <TrmLen+1>		; New map hash-value vector

Alc NewMap, <TrmLen+1>		; New map pointer vector
Alc MovMap, <TrmLen+1>		; Move map vector


	;  This one is an array (each line is LinSiz words)

Alc OldAry, < <TrmLen+1> * LinSiz > ; Old map array


	StrngL==100
Alc String, StrngL		; Temp string for What command

	ChuChr==^d2560		; The maximum number of chars in a chunk ...
	ChuLen==ChuChr/^d5	; The number of words needed
Alc ChuBuf, ChuLen		; Chunk buffer ...

Alc LoWork, 2			; Low level work area, very clobberable

Alc BStrng, ^d10		; Temp string for making banner

	ErrStL==20
Alc ErrStr, ErrStL		; Block for ERSTR strings

	ObfChr=^d2559		; Room for lots of chars
	ObfWds=<ObfChr+1>/5	; Convert to number of words
Alc OptBuf, ObfWds		; A buffer to hold an output string, used
				;  only by DoScrn and things he calls
Alc ObfCnt, 1			; Count of characters in buffer
Alc ObfPtr, 1			; Byte ptr for adding next character to buffer

Alc CmdCsb, .CmGjb+1		; Command state block for COMND

	BufLen==100		; Number of words in COMND buffer
	BufChr==BufLen*5-1	; Number of chars in COMND buffer
Alc CmdBuf, BufLen		; COMND buffer (for reading input)

	AtmLen==100		; Number of words in atom buffer
	AtmChr==AtmLen*5-1	; Number of chars in atom buffer
Alc CmdAtm, AtmLen		; Atom buffer for COMND

Alc GjfBlk, .GjAtr+1		; GTJFN arg block for COMND

Alc CfmCsb, .CmGjb+1		; Command state block for confirm-only COMND
Alc CfmBuf, BufLen		; COMND buffer (for reading input)
Alc CfmAtm, AtmLen		; Atom buffer for COMND

	PdLen==200
Alc Pdl, PdLen			; Stack for I/O fork
Alc WCLPdl, PdLen		; Stack for WCL fork


; ***** Pty (subjob) values

Alc PtyTab, 0			; Pty storage area, must be last space assigned

Alc PtyNam, 1			; Primary name pointer
Alc PtyNm2, 1			; Secondary name pointer, or zero
Alc PtyPnm, 1			; Current program name, in SIXBIT

Alc PtyJfn, 1			; Jfn of pty
Alc PtyTtd, 1			; Tty designator
Alc PtyNod, 1			; Node name of remote node, if remote ...
Alc PtyFrk, 1			; Fork handle if a lower fork ...
Alc PtyPjf, 1			; Jfn of program to run in the lower fork

Alc PtySts, 1			; Status of subjob
Alc PtyBtm, 1			; Banner time (time of last banner update)

Alc PtySiz, 1			; Size parameter
Alc PtyNSL, 1			; New size and location

Alc PtyHiL, 1			; Ptr to highest line on (simulated) screen
Alc PtyLoL, 1			; Ptr to lowest line on (simulated) screen
Alc PtyRcL, 1			; Ptr to most recent line, contains cursor
Alc PtyTop, 1			; Highest line in core

Alc PtyLCt, 1			; In-core line count
Alc PtyTCt, 1			; Trace count ... how many lines back are we?

Alc PtyPos, 1			; Position in virtual screen (lh is row
				;  displacement from top of screen (plus is
				;  down), rh is column displacement (plus is
				;  to the right), 0 means upper left corner)

Alc PtyOfs, 1			; Screen offset, set by Alloc,
				;  -1 means you subtract 1 to get from a
				;  virtual row number to a physical row
				;  number, offset is physical minus virtual

Alc PtySet, 1			; Number of selected charset, 0 or 1
Alc PtyG0S, 1			; Charset zero, Graphi or zero
Alc PtyG1S, 1			; Charset one, Graphi or zero

Alc PtyAtr, 1			; Attributes most recently set in virtual
				;  terminal ... (eg. Bold, Blink ...)

Alc PtyReg, 1			; Region set for virtual terminal

Alc PtySPs, 1			; Saved cursor position (from ESC-7 code)
Alc PtySGS, 1			; Saved G0 and G1 sets (left & right halves)
Alc PtySAt, 1			; Saved charset number in left half, saved
				;  attribute in right half

	;continued on next page
	;continued from previous page

	; We save things here while we are tracing ...
Alc PtySPT, 1			; Saved cursor position while tracing
Alc PtySRc, 1			; Saved PtyRcl (right half)
Alc PtySHL, 1			; Saved PtyHil and PtyLol (left & right halves)

	; Output buffer parameters (data output from a pty)
Alc PtOCnt, 1			; Count of characters in buffer
Alc PtOIbp, 1			; Initial buffer pointer
Alc PtOEbp, 1			; End of buffer pointer
Alc PtOPbp, 1			; Putter pointer
Alc PtOGbp, 1			; Getter pointer

	; Input buffer parameters (data which will be input to a pty)
Alc PtICnt, 1			; Count of characters in buffer
Alc PtIIbp, 1			; Initial buffer pointer
Alc PtIEbp, 1			; End of buffer pointer
Alc PtIPbp, 1			; Putter pointer
Alc PtIGbp, 1			; Getter pointer

	; Escape buffer parameters (partially read escape sequences)
Alc PtECnt, 1			; Count of characters in buffer
Alc PtEIbp, 1			; Initial buffer pointer
Alc PtEPbp, 1			; Putter pointer
Alc PtEGbp, 1			; Getter pointer

	EBufSz==20		; Number of words for escape buffer
	EBufMx==EBufSz*5	; Number of chars that will fit in it
Alc PtEBuf, EBufSz		; The escape buffer ...

Alc PtyKey, ^d8			; Ptrs to window-specific user-defined keys

Alc PtyBan, LinSiz		; Banner for subjob, 12-bit bytes

Alc PtyEnd, 0			; Name of end of pty parameters

PtyLen=PtyEnd-PtyTab+1		; Length of each pty block

VarEnd=Lc+<PtyLen*<1+MaxPty>>-1	; Last word in variable area

Lc=VarEnd+1			; Get Lc out of the way of the symbol table

	Loc Lc			; Move past this stuff ...

	Block 1			; This puts the symbol table out of my way

LitSym:				; A label for the literal pool

	End
    