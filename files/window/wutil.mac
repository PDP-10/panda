	Title WUtil - Utility subroutines for the Window program

Comment \


Tad Marshall, American Express Co., March - November 1981


		Table of Contents	       Page(s)

Entrys & Externs ............................... 2

EscChk (Look for key when connected) ........... 4-6
AdvWin (Advance to next window) ................ 7

WinIni (Initialize a window) ................... 12

LogCls (Close and reopen log file) ............. 16

GetPtJ (Assign a pty) .......................... 18

CmdRes (Reset the COMND state block) ........... 19

GjfRes (Reset most of GTJFN block) ............. 21

PrsSjb (Parse for a subjob name) ............... 22


Some typing routines ........................... 28-29
Miscellaneous routines ......................... 30-32
SetInt (Set up interrupt system) ............... 33

WCLIni (Initialize WCL) ........................ 35

\

	SubTtl Entrys & Externs

; Entry points of subroutines found in WUtil ...

	Entry WinIni, GetPtF, LftMrg, PanicR, Eof,    DoDefi, TrmImg
	Entry GetPtJ, GjfRes, GetXjf, SetGjf, Purge,  DoResp, DoKilF, DoNewT
	Entry DoNewP, DoPush, TrmAsc, LogCls, GetPty, DoSend, DoCloJ, BadMem
	Entry SetRes, Detach

; External symbols required

	Extern ACSave, ACLoad, GetSp2, GivSp2, PtyIni, DspRes, PtyOut, AscSix
	Extern BldBan, PiOff,  PiOn,   Normal, ClrLin, DspPau, SpdChk, HashLn
	Extern Home,   DoCeos, DmpBfr, GoTo,   Beep,   ChkDet

	SubTtl Definitions

	Search WSym, MonSym, MacSym ; The symbols we need
	Sall			; Suppress macro expansions

	SubTtl WinIni -- Initialize for empty window (set all lines empty)

WinIni:	GTAD%			; Get the current time
	MoveM t1, TimNow	; Store the "current" time

	MoveI p1, PtyHiL(i)	; Point back to top pointer
	MoveI p2, TrmLen+1	; The number of lines (including an extra one)
	SetZ p3,		; Start count at zero

WinLop:	Aoj p3,			; Bump the count

	MoveI t2, LinSiz	; We need this many words
	Call GetSp2		; Try to get some space
	SkipN t2		; Did we get the space?
	 Bug (HLT,<Failed to get space to initialize window>)

	SetZM .FwdPt(t1)	; Clobber any forward ptr

	SetZM .BkwPt(t1)	; Clear back pointer
	CaiE p1, PtyHil(i)	; Is the "previous node" the start ptr?
	 MoveM p1, .BkwPt(t1)	;  No, so set the back pointer

	Aos t2, LineID		; Get incremented line id
	HrlZS t2		; Put ID in left half, zero right half
	SkipN i			; WCL?
	 TxO t2, WclLin		;  Yes, flag it
	MoveM t2, .Flags(t1)	; Store the flag word

	Call ClrLin		; Clear out the data portion

	MoveM t1, .FwdPt(p1)	; Store forward pointer in previous node
	Move p1, t1		; Advance the trailing ptr
	SojG p2, WinLop		; If more lines to do, then loop some more

	MoveM t1, PtyLoL(i)	; This last line is the bottom line

	Move t1, PtyHiL(i)	; The top line ...
	MoveM t1, PtyTop(i)	;  ... is the highest line ever

	Move t1, .FwdPt(t1)	; But the line which follows it ...
	MoveM t1, PtyRcL(i)	;  ... is the most recent
	MoveM t1, PtyHiL(i)	;  ... and the highest which is on-screen

	Move t1, PtyTop(i)	; Get back ptr to top-most line
	MoveI p1, .Data(t1)	; Address of the data portion
	HrlI p1, (Point 12,0)	; Make it a 12-bit byte ptr
	SetZ p2,		; We have written no chars yet
	Call WriHdr		; Call the routine to write the header
	Move t1, PtyTop(i)	; Get back ptr to top-most line
	Call ClrLin		; Clear out what we just wrote
	MoveI p1, TrmWid	; Number of chars on a line
	Sub p1, p2		; Get number remaining after writing the line
	Lsh p1, -1		; Shift right by one, divides by two ...
	MoveI p2, 0(p1)		; Copy into "number written"
	Move t2, PtyTop(i)	; Get back ptr to top-most line
	MoveI t1, .Data(t2)	; Address of the data portion
	HrlI t1, (Point 12,0)	; Make it a 12-bit byte ptr
	Adjbp p1, t1		; Adjust it forward the number we are skipping
	Call WriHdr		; Call the rtn again, to get it centered

	Move t1, PtyTop(i)	; Ptr to the line we just wrote
	Call HashLn		; Hash it ...

	Move t1, [ 1,, TrmLen ]	; First line to last line ...
	MoveM t1, PtyReg(i)	;  as the initial region for the subjob ...

	SetZM PtyPos(i)		; Initial position is upper left corner

	SetOM PtySiz(i)		; For now, set floating size

	MovS t1, i		; Get subjob number in left half of flag word
	TxO t1, Banner		; Force on the banner bit in the banner line
	MoveM t1, PtyBan+.Flags(i) ; Store the flag word for the banner

	Jrst BldBan		; Go build an initial banner, ret from there


; Routine to write a header for this window, called twice ...

WriHdr:	MoveI p3, UScore	; Make this text underscored
	Move t1, PtyNam(i)	; Ptr to this guy's name
	Call .Bmsg		; Write the underscored name into the line
	HrrOI t1, [AsciZ/ job/] ; Assume it's a job
	SkipE PtyFrk(i)		; Is it a fork?
	 HrrOI t1, [AsciZ/ fork/] ;  Yes, say so
	Call .Bmsg		; Complete the word
	Bmsg < -- created at >	; More text
	HrrOI t1, BStrng	; Ptr to string area
	SetO t2,		; Current date and time
	MovX t3, Ot%Nda ! Ot%Scl ; Time only, no columnation ...
	ODTIM%			; Get the time
	BmsgS (BStrng)		; Type this part
	Bmsg < on >		; More text
	HrrOI t1, BStrng	; Ptr to string area
	SetO t2,		; Current date and time
	MovX t3, Ot%Ntm ! Ot%Day ! Ot%Fdy ! Ot%Scl ; No time, include the day,
				;  day as a full word, no columnation ...
	ODTIM%			; Get the date
	BmsgS (BStrng)		; Type this part, that's it
	Ret			; Return to caller ...

	SubTtl DoDefi -- Do a define as requested by WCL

DoDefi:	Call PiOff		; Ints off

	HrrZ i, DefWin		; Pick up number of the sj

	SkipE AFork		; Is it a fork?
	 Jrst [	Call GetPtF	;  Yes, use other routine
		 Trn		;  Ignore error ...
		Jrst DodTag ]	; Move on ...

	Call GetPtJ		; First get a PTY
	 Trn			;  Ignore error

DodTag:	Call PtyIni		; Initialize the pty
	 Trn			;  Ignore error

	SetZM DefWin		; Did it ...

	SkipN AFork		; Is it a fork?
	 Jrst DodEnd		;  No, go exit this routine

	Move t1, PtyPjf(i)	; Pick up the jfn of the program we will be
				;  running ...
	Hrl t1, PtyFrk(i)	; Get fork handle in left half
	GET%			; First get the program into our fork
	 JEcBug (HLT,<Can't GET file into lower fork>)

	HrrOI t1, ResTxt	; Ptr to the saved rescan text
	RSCAN%			; Set it as the rescan text for this job
	 ErJmp .+1		;  Oh well ...

	Move t1, PtyFrk(i)	; Fork handle
	SetZ t2,		; Entry vector position zero
	SFRKV%			; Start fork
	 JEcBug (HLT,<Can't start lower fork>)

DodEnd:	Aos SjCnt		; Bump subjob count

	Jrst PiOn		; Ints on again, ret from there

	SubTtl DoSend -- Send a char to a subjob

DoSend:	HlrZ i, SendCh		; Pick up the subjob id
	HrrZ t2, SendCh		; Pick up the char to be sent
	Call PtyOut		; Send out the character

	SetZM SendCh		; Don't do this again ...
	Ret			; That's it here

	SubTtl DoResP -- Do a Reset Pushed-EXEC for WCL

DoResP:	Move t1, ExecFk		; Get handle of the fork
	KFORK%			; Kill the fork
	 JEcBug (HLT,<Can't kill pushed EXEC>)

	SetZM ExecFk		; Clear the handle
	SetZM KilPsh		; Clear the flag

	Ret			; Done here

	SubTtl DoKilF -- Do a kill on a fork

DoKilF:	Move t1, PtyFrk(i)	; Pick up the fork handle of the fork
	KFORK%			; Kill the fork
	 JEcBug (HLT,<Can't kill subfork>)
	SetZM PtyFrk(i)		; Drop fork handle

	Move t1, PtyTtd(i)	; Get tty desig for the fork
	RELD%			; Release the device
	 JEcBug (HLT,<Can't deassign TTY from subfork>)
	SetZM PtyTtd(i)		; Drop tty desig

	SetZM KilFrk		; Clear the flag for next time
	Ret			; Done here

	SubTtl DoCloJ -- Close a jfn

DoCloJ:	CLOSF%			; Close the jfn
	 JEcBug (HLT,<Can't close PTY from subfork or subjob>)

	SetZM CloJfn		; Don't close it twice

	Ret			; Done here

	SubTtl DoNewT -- Set up a new terminal for WCL

DoNewT:	Call PiOff		; Ints off for now

	SetFOf Vt100F		; Assume not Vt100

	MoveI t1, .PriOu	; Controlling terminal
	MoveI t2, .TtL36	; Code for La36 (default)

	Move p1, VtType		; Get the new type
	CaiN p1, La36		; Is it La36?
	 Jrst [	STTYP%		; Yes, set the type
		Jrst .+1 ]	; Return to stream

	CaiN p1, Vt100		; Is it Vt100?
	 Jrst [	MoveI t2, .Tt100 ; Code for Vt100
		STTYP%		; Set the type
		SetFOn Vt100F	; It is a Vt100
		Jrst .+1 ]	; Return to stream

	CaiE p1, Vt52		; Is it Vt52?
	 CaiN p1, Im3101	;  ... or IBM 3101?
	  Jrst [MoveI t2, .TtV52 ; Code for Vt52 (close enough if IBM terminal)
		STTYP%		; Set the type
		Jrst .+1 ]	; Return to stream

	SetFOn <ClearF ! StrChg> ; Set clear and "structure changed" flags

	SetZM NewTrm		; Clear the flag

	Jrst PiOn		; Ints back on, ret from there



	SubTtl DoNewP -- Do a new Pause-on-Command for WCL

DoNewP:	MoveI t1, .PriOu	; The terminal
	RFMOD%			; Get the current mode
	TxO t2, Tt%Pgm		; Set the bit
	SkipN PauCom		; Should it be off instead?
	 TxZ t2, Tt%Pgm		;  Yes, set it that way
	STPAR%			; Tell the monitor

	SetZM NewPau		; Clear the flag

	Ret			; Done here

	SubTtl DoPush -- Do a Push

DoPush:	Call ChkXec		; Is there an EXEC, or can we get one?
	 SkipA			;  Yes ...
	  Jrst Beep		;  No, that's it then, just beep ...

	SetWOn PushF		; Say we are now pushed ...

	Call DspRes		; Reset display to initial condition
	MoveI q1, TrmLen	; Bottom row
	MoveI q2, 1		; Leftmost column
	Call GoTo		; Get there
	Call DmpBfr		; Dump the buffer now ...

	Call TrmAsc		; Restore Ascii mode

	Tmsg <
 [Pushing...]

>				; Say we are Pushing ...
	Call DspPau		; Pause the display

	MoveI t1, .FhJob	; All processes in this job
	SetO t2,		; Everything is possible ...
	STIW%			; Do it

	SetO t1,		; Remember our name to restore it later
	Move t2, [-2,, Names]	; Get both names
	MoveI t3, .JiSnm	;  ... subsystem name and program name
	GETJI%			; Do it
	 Trn			; Ignore the error

	HrrOI t2, ExcNam	; Name of the EXEC
	Call AscSix		; Convert to sixbit
	SETNM%			; Set the PUSHed name

	MoveI t1, .PriOu	; The terminal
	RFCOC%			; Get the present CCOC words
	Push p, t2		; Save one word
	Push p, t3		; Save the other

	; continued on next page
	; continued from previous page

	Move t1, ExecFk		; Get the fork handle
	RPCAP%			; Get its present capabilities
	Move t3, t2		; Copy potential capabilities to enabled caps
	EPCAP%			; Now set whatever we can ...

; Help this fork to not be such a pig ... declare him to float freely among the
;  queues ...

;	SetZ t2,		; Clear this word
;	SPRIW%			; Set the priority for this fork
;	 ErJmp .+1		;  Can't, must not be allowed ...

; Lord help me, what a hack ...  It seems that you need a small delay after
;  the above SPRIW% jsys before the following SFORK% will work ...  A truly
;  shoddy workaround to a highly obscure monitor bug ...

	MoveI t1, ^d100		; This many milliseconds ...
	DISMS%			; Pause to help the stupid monitor work right

	Move t1, ExecFk		; Get the fork handle
	TxO t1, Sf%Con		; Set this flag
	SFORK%			; Try to continue the fork
	 ErJmp DopSta		;  Can't continue, try to start him

	Jrst DopWai		; It worked, go wait ...

DopSta:	Move t1, ExecFk		; Get the fork handle (again)
	SetZ t2,		; Start at 'start' location in entry vector
	SFRKV%			; Start the EXEC

DopWai:	WFORK%			; Wait for it to halt ...

	Call ChkDet		; Go see if we are detached ...

	MoveI t1, .PriOu	; The terminal
	Pop p, t3		; Restore one word
	Pop p, t2		; Restore the other
	SFCOC%			; Restore the old CCOC words

	RFMOD%			; Get the current mode

	SetZM PauCom		; Assume not pause-on-command mode
	TxNE t2, Tt%Pgm		; Is it?
	 SetOM PauCom		;  Yup ...

	DMove t1, Names		; Restore names
	SETSN%			; Do it
	 Trn			; Ignore the error, if any

	MoveI t1, .FhJob	; For entire job ...
	SetZ t2,		; No int chars
	STIW%			;  ... now

	; continued on next page
	; continued from previous page

	Call SpdChk		; Set speed-dependent stuff

	Tmsg < [Popping...]

>
	Call DspPau		; Pause the display

	SetFOn ClearF		; Say we need to display all
	SetZM NoCnct		; Do the connection
	SetWOf PushF		; Out of EXEC

	Update			; Update the screen

	MoveI t1, .FhSlf	; This fork
	MovX t2, 1b<OptChn>	; This channel
	IIC%			; Initiate an int to check pty buffers

	Ret			; Done with the push

	SubTtl Detach -- Detach ourselves from the terminal, with a message

Detach:	Call PiOff		; Ints off for now

	Call DspRes		; Put terminal back into a nice state

	Call Home		; Go home
	Call DoCeos		; Clear the screen

	Omsg <>		; Beep at the user

	MoveI t2, ^d80		; Get a bunch of words ...
	Call GetSp2		; Get them

	SkipN t2		; Did we get the space?
	 Bug (HLT,<Can't get space for detach output buffer>) ; A problem ...

	HrrOI t1, 0(t1)		; Set up ptr to buffer
	Push p, t1		; Push the buffer ptr

	HrrOI t2, [AsciZ/Detached job /] ; Start of text
	SetZ t3,		; Stop on null
	SOUT%			; Type the string
	 JEcBug (HLT,<Can't type string in core>)

	Move t2, ThisJb		; This job
	MoveI t3, ^d10		; Decimal
	NOUT%			; Type the number
	 JEcBug (HLT,<Can't type number>)

	HrrOI t2, [AsciZ/ (/]
	SetZ t3,		; Stop on null
	SOUT%			; Type the string
	 JEcBug (HLT,<Can't type string in core>)

	Move t2, UserID		; Our user ID
	DIRST%			; Type out logged in name
	 JEcBug (HLT,<Can't type user name>)

	HrrOI t2, [AsciZ/) from TTY/]
	SOUT%			; Type more
	 JEcBug (HLT,<Can't type string in core>)

	Move t2, OldTty		; This terminal
	MoveI t3, ^d8		; Octal
	NOUT%			; Type the number
	 JEcBug (HLT,<Can't type number>)

	HrrOI t2, [AsciZ/: on /]
	SetZ t3,
	SOUT%			; Type it
	 JEcBug (HLT,<Can't type string in core>)

	HrrOI t2, SysVsn	; Ptr to system version string
	SOUT%			; Type it
	 JEcBug (HLT,<Can't type string in core>)

	Move t1, 0(p)		; Get back ptr to string
	HrlI t1, (Point 7,0)	; Make it a byte ptr
DetLop:	Ildb t2, t1		; Get a byte
	SkipE t2		; Skip if null
	 AojA t3, DetLop	;  Else, loop more

	MoveI q2, TrmWid	; Start with full width
	Sub q2, t3		; Subtract the size of the message
	Lsh q2, -1		; Divide by two, that's the column

	MoveI q1, ^d11		; The row
	Call GoTo		; Get to where we want to be

	Move t1, 0(p)		; Get back the ptr to the buffer
	Call .Omsg		; Zip out the string we built

	Move t1, 0(p)		; Get back the buffer addr again
	HrrOI t2, [AsciZ/at /]	; The string
	SetZ t3,		; Stop on a null
	SOUT%
	 JEcBug (HLT,<Can't type string in core>)

	Move t2, TimNow		; Get current time
	MovX t3, Ot%NDa ! Ot%Scl ; Flags
	ODTIM%			; Type the time
	 JEcBug (HLT,<Can't type time>)

	HrrOI t2, [AsciZ/ on /]	; More text
	SetZ t3,		; Stop on null
	SOUT%			; Type it
	 JEcBug (HLT,<Can't type string in core>)

	Move t2, TimNow		; Get current time
	MovX t3, Ot%NTm ! Ot%Day ! Ot%FDy ! Ot%FMn ! Ot%4Yr ! Ot%Spa  ! Ot%Scl
	ODTIM%			; Type the time
	 JEcBug (HLT,<Can't type date>)

	Move t1, 0(p)		; Get back ptr to string
	HrlI t1, (Point 7,0)	; Make it a byte ptr
	SetZ t3,		; Start with empty counter
DetLp2:	Ildb t2, t1		; Get a byte
	SkipE t2		; Skip if null
	 AojA t3, DetLp2	;  Else, loop more

	MoveI q2, TrmWid	; Start with full width
	Sub q2, t3		; Subtract the size of the message
	Lsh q2, -1		; Divide by two, that's the column

	MoveI q1, ^d12		; The row
	Call GoTo		; Get to where we want to be

	Move t1, 0(p)		; Get back the ptr to the buffer
	Call .Omsg		; Zip out the string we built

	Move t1, 0(p)		; Get back the buffer addr again
	HrrOI t2, [AsciZ/Loads/]
	SetZ t3,
	SOUT%
	 JEcBug (HLT,<Can't type string in core>)

	MoveI t2, 14		; For one minute load
	Call DetLoa		; Type it out

	MoveI t2, 15		; For five minute load
	Call DetLoa		; Type it out

	MoveI t2, 16		; For ten minute load
	Call DetLoa		; Type it out

	Move t1, 0(p)		; Get back ptr to string
	HrlI t1, (Point 7,0)	; Make it a byte ptr
	SetZ t3,		; Start with empty counter
DetLp3:	Ildb t2, t1		; Get a byte
	SkipE t2		; Skip if null
	 AojA t3, DetLp3	;  Else, loop more

	MoveI q2, TrmWid	; Start with full width
	Sub q2, t3		; Subtract the size of the message
	Lsh q2, -1		; Divide by two, that's the column

	MoveI q1, ^d14		; The row
	Call GoTo		; Get to where we want to be

	Pop p, t1		; Fix up stack
	Call .Omsg		; Zip out the string we built

	MoveI q1, TrmLen	; Bottom line
	MoveI q2, 1		; Leftmost column
	Call GoTo		; Get there

	Call DmpBfr		; Dump the buffer

	MoveI t1, .PriOu	; Primary output
	DOBE%			; Let this be typed

	MoveI t1, ^d1000	; This many milliseconds
	DISMS%			; Let it be typed

	DTACH%			; Detach ourselves from the terminal

	MoveI t1, ^d1000	; This many milliseconds
	DISMS%			; Hang out until free of the terminal ...

	SetZM GoRead		; Flag that no one has typed anything ...
	SetWOn Detchd		; Flag that we are now detached ...

	Jrst PiOn		; Ints back on now, ret from there

; Type a load average (one, five, or fifteen minutes ...), item code in t2

DetLoa:	Push p, t1		; Save the reg

	MoveI t1, .Systa	; SYSTAT table
	Hrl t1, t2		; Copy the code into the left half
	GETAB%			; Get the info
	 JEcBug (HLT,<GETAB failed>)

	Move t2, t1		; Move the load into t2
	Pop p, t1		; Get back the byte ptr

	MovX t3, Fl%Pnt ! Fld(3,Fl%Rnd) ! Fld(3,Fl%Fst) ! Fld(2,Fl%Snd)
	FLOUT%			; Type it in core
	 JEcBug (HLT,<Can't type a floating pt number>)

	Ret			; Done here

	SubTtl GetPty -- Get jfn on a PTY

GetPty:	MovN t4, SysPty		; Get # of ptys in system
	HrlZS t4		; Set up for AobJN

GptLop:	MovSI t1, .DvDes+.DvPty	; Get pty designator
	HrrI t1, 0(t4)		; Try to get next pty
	DVCHR%			; Get characteristics of this pty
	TxNN t2, Dv%Av		; Is it available?
	 Jrst GptEnd		;  Not as such ...

	HlrZS t3		; Get owning job in right half
	CamN t3, ThisJb		; Is it us?
	 Jrst GptEnd		;  Well, lets not steal from ourselves ...

	Move t2, t1		; Get device designator into t2
	HrrOI t1, DevNam	; Pointer to where we want the device name
	DEVST%			; Convert designator to string
	 Jrst GptEnd		;  Bombed ...

	MoveI t2, ":"		; A colon ...
	Idpb t2, t1		; Slap it on the end
	Setz t2,		; Tie it off ...
	Idpb t2, t1		; ... with a 0 byte

	MovX t1, Gj%Sht ! Gj%Acc ; Short form GTJFN, restricted access
	HrrOI t2, DevNam	; Ptr to name
	GTJFN%			; Try for a jfn on the PTY end of the thing
				;  (see answer to SPR 20-16580)
	 Jrst GptEnd		;  No can do man ...

	HrrZM t1, PtyJfn(i)	; Store jfn

	MovX t2, Fld(8, Of%Bsz) ! Of%Rd ! Of%Wr ; 8 bit bytes, read and write
	OPENF%
	 Jrst [	Move t1, PtyJfn(i) ; Get back the jfn ...
		RLJFN%		;  and release it
		 Trn		; Ignore any error
		Jrst GptEnd ]	; Try another ...

	Add t4, FirPty		; Turn PTY unit # into TTY #
	TrO t4, .TtDes		; Make it a TTY designator
	HrrZM t4, PtyTtd(i)	; Store TTY designator
	HrrZM t1, PtyJfn(i)	; Store jfn also

	RetSkp			; Give good return

GptEnd:	AobJN t4, GptLop	; Try for another pty

	Ret			; None left

	SubTtl GetPtJ -- Get a PTY jfn for a subjob

GetPtJ:	Call GetPty		; Get a pty ...
	 Ret			;  Can't ...

	Jrst GotPty		; Join common finish-up code

	SubTtl GetPtF -- Set up a PTY any lower fork

GetPtF:	Call GetPty		; Get a pty ...
	 Ret			;  Can't ...

	MovX t1, Cr%Cap		; Same capabilities as us
	SkipN i			; Special case ... is this WCL?
	 TxO t1, Cr%Map		;  Yes, give it same address space also ...
	CFORK%			; Create a lower fork
	 Bug (HLT,<Can't get a lower fork>)

	MoveM t1, PtyFrk(i)	; Save number of fork

	MoveI t1, .FhSlf	; Set up capabilities of fork
	RPCAP%			; Get current capabilities
	 JEcBug (HLT,<Superior fork can't read its own capabilities>)

	TxO t2, Sc%Gtb		; Set GETAB% cap
	SkipN i			; Special case ... is this WCL?
	 TxO t2, Sc%Sup		;  Yes, set "manipulate superior" capability

	TxO t3, Sc%Gtb		; Set GETAB% cap
	SkipN i			; Special case ... is this WCL?
	 TxO t3, Sc%Sup		;  Yes, set "manipulate superior" capability

	TxZ t2, Sc%Log		; Deny logout capability to lower fork ...

	Move t1, PtyFrk(i)	; Get back number of lower fork
	EPCAP%			; Enable these capabilities for him ...
	 JEcBug (HLT,<Can't enable capabilities of lower fork>)

; Help this fork to not be such a pig ... declare him to float freely among the
;  queues ...

;	SetZ t2,		; Clear the word
;	SPRIW%			; Set the priority for this fork
;	 ErJmp .+1		;  Can't, must not be allowed ...

	Move t1, PtyTtd(i)	; Get designator of tty side of PTY:
	Move t2, t1		; Into t2 also ...
	ASND%			; Try to assign the device to us ...
	 JEcBug (HLT,<Can't assign TTY side of PTY: to ourselves>)

	Move t1, PtyFrk(i)	; Get the number of the fork
	HrlI t1, .ScSet		; We want to set a new controlling terminal
	SCTTY%			; Set the controlling tty to the tty
				;  end of this PTY:
	 JEcBug (HLT,<Can't set controlling terminal for subfork>)

	Jrst GotPty		; Join common finish-up code

; Common finish for GetPtJ and GetPtF ...

GotPty:	Move t1, PtyTtd(i)	; The terminal desig for this pty
	MoveI t2, .Tt100	; Code for DEC VT100 terminal
	STTYP%			; Set the pty type to VT100

	Move t2, Normal		; A real nice jfn mode word
	SFMOD%			; Set some bits
	STPAR%			; Set other bits

	HrrZ t1, PtyJfn(i)	; Now put Pty interrupts on a channel
	MoveI t2, .MoApi	; Assign Pty to interrupt channel 0
	TxO t2, Mo%Oir		; Want to wake on Output-Is-Ready
	MTOPR%			; Do it
	 JEcBug (HLT,<Can't assign PTY output interrupt to PSI channel>)

	RetSkp			; Give skip (OK) return

	SubTtl TrmImg & TrmAsc -- Set binary and Ascii modes, respectively

; Push terminal state and make new state binary

TrmImg:	MoveI t1, .PriOu	; Controlling terminal
	DOBE%			; Wait til inactive

	Move t2, Normal		; Start with the normal mode ...
	TxZ t2, Tt%Osp ! Tt%Wid ! Tt%Eco ! Tt%Dam ; Set no control-O
				;  in effect, width zero (to stop folding),
				;  no echo, and binary data mode
	SkipE PauCom		; Pause-on-command?
	 TxO t2, Tt%Pgm		;  Yes, set it
	SFMOD%			; Set some of these items ...
	STPAR%			; Set the others ...

	Ret			; Done here


; Set terminal back to previously saved mode

TrmAsc:	MoveI t1, .PriOu	; Controlling terminal
	DOBE%			; Wait until quiet

	Move t2, OriMod		; The original mode ...
	SFMOD%			; Restore some things
	STPAR%			; Restore some others

	Ret			; Return

	SubTtl LogCls -- Close and reopen the log file

LogCls:	Push p, t1		; Save t1
	Push p, t2		;  ... and t2

	Move t1, LogJfn		; Get logging jfn
	TxO t1, Co%Nrj		; Close it but keep the jfn
	CLOSF%
	 Jrst LgClsF		; Had a problem, go type message

	HrrZ t1, LogJfn		; Get jfn again
	MovX t2, Fld(7, Of%Bsz) ! Of%Wr ! Of%App ; Open it again in append mode
	OPENF%			; Do it
	 Jrst LgClsF		; Failed

	Jrst LgClsR		;  and go return

LgClsF:	Push p, t1		; Save error code
	Call PiOn		; Turn interrupts back on

	Move t1, LogJfn		; Get jfn for log file
	RLJFN%			; Release it
	 Trn			; Ignore the error
	SetZM LogJfn		; Erase the jfn

	Pop p, t1		; Get back error code
	.JerMs <Can't close and reopen log file>

LgClsR:	Pop p, t2		; Restore t2
	Pop p, t1		;  ... and t1

	Ret			;  and return

	SubTtl GjfRes -- Reset (most of) the GTJFN block

;
;   Returns:
;	+1 always with t3/ addr of the GTJFN block
;

GjfRes:	MoveI t3, GjfBlk	; Addr of the GTJFN arg block
	SetZM .GjGen(t3)	; No flags
	Move t4, [.NulIo,, .NulIo] ; No jfns ...
	MoveM t4, .GjSrc(t3)	;  ... unless someone else puts them in
	SetZM .GjDev(t3)	; Use the connected structure ...
	SetZM .GjDir(t3)	;  ... and directory
	SetZM .GjNam(t3)	; No name ...
	SetZM .GjExt(t3)	; No file type ...
	SetZM .GjPro(t3)	; Default protection
	SetZM .GjAct(t3)	; Use login account
	SetZM .GjCpp(t3)	; Don't store text
	SetZM .GjCpc(t3)	;  ... here either ...
	SetZM .GjRty(t3)	; No control-R text ...
	SetZM .GjAtr(t3)	; No special attributes

	Ret			;  and return

	SubTtl Miscellaneous Routines

; Get to the left margin

LftMrg:	Push p, t1		; Save t1
	Push p, t2		;  ... and t2
	MoveI t1, .PriOu	; Controlling terminal
	RFPOS%			; Get position
	TrNE t2, -1		; Are we at the left margin (pos 0)?
	 Call Tp1Ret		;  No, so put out CrLf
	Pop p, t2		; Restore t2
	Pop p, t1		;  ... and t1
	Ret			;  and return


; Set up the GTJFN long form block so we can get the EXEC

SetGjf:	Call GetXjf		; First, get a jfn for our default file

	Move t2, ExcJfn		; Get jfn in t2
	SetZ t4,		; No prefix

	HrrOI t1, ExcStr	; Structure
	MovX t3, Fld(.JsAof,Js%Dev)
	JFNS%			; Get it

	HrrOI t1, ExcDir	; Directory
	MovX t3, Fld(.JsAof,Js%Dir)
	JFNS%			; Get it

	HrrOI t1, ExcNam	; Name
	MovX t3, Fld(.JsAof,Js%Nam)
	JFNS%			; Get it

	HrrOI t1, ExcExt	; Extension
	MovX t3, Fld(.JsAof,Js%Typ)
	JFNS%			; Get it

	Move t1, ExcJfn		; The jfn
	RLJFN%			; Release it
	 Trn			;  Ignore errors

	SetZM ExcJfn		; Forget we had a jfn ...

	Call GjfRes		; Reset (most of) the GTJFN block

	Move t4, .GjGen(t3)	; Get flags set so far ...
	TxO t4, Gj%Old		; Add the fact that it should be an old file ..
	MoveM t4, .GjGen(t3)	; Put it back ...
	HrrOI t4, ExcStr	; Default structure
	MoveM t4, .GjDev(t3)	; Store it
	HrrOI t4, ExcDir	; Default directory
	MoveM t4, .GjDir(t3)	; Store it
	HrrOI t4, ExcNam	; Default filename
	MoveM t4, .GjNam(t3)	; Store it
	HrrOI t4, ExcExt	; Default extension
	MoveM t4, .GjExt(t3)	; Store it

	Ret			; Done here

;
; Check if the EXEC is still there, or get one if we never had one
;
;   Returns non-skip if an EXEC is available to be pushed to
;	(even if we had to create it), skip if there is no EXEC
;

ChkXec:	SkipE t1, ExecFk	; If there is a fork to push to ...
	 Jrst [	RFSTS%		; See if the fork is still there
		 ErJmp FrkGon	;  Vanished !!!
		CamE t1, [-1]	; Is the fork deleted?
		 Ret		;  All Ok, just return non-skip
		Jrst FrkGon ]	; Go deal with the dead fork

	SkipN ExcJfn		; Do we have a jfn yet?
	 Call GetXjf		;  No, go get a jfn for the EXEC

	;continued on next page
	;continued from previous page

	MovX t1, Cr%Cap		; Same capabilities as ourselves
	CFORK%			; Create the fork
	 ErJmp [ JCBug (HLT,<Can't get a fork>)
		 Move t1, ExcJfn ; Get back the jfn
		 RLJFN%		; Release it
		  Trn		; Ignore error
		 SetZM ExcJfn	; Forget we ever had this jfn
		 Ret ]		; Return if continued

	MoveM t1, ExecFk	; Save the handle for the fork

	Hrr t1, ExcJfn		; Get jfn in right half
	Hrl t1, ExecFk		; Get the process handle in left half
	GET%			; Now get the EXEC into the lower fork
	 ErJmp [ JCBug (HLT,<Can't get the EXEC into lower fork>)
		 Move t1, ExcJfn ; Get back the jfn
		 RLJFN%		; Release it
		  Trn		; Ignore error
		 SetZM ExcJfn	; Forget we ever had this jfn
		 Ret ]		; Return if continued

	MoveI t1, .FhSlf	; This process ...
	RPCAP%			;  its capabilities ...
	TxZ t2, Sc%Log		; Don't allow lower fork to log out
	SetZ t3,		; No privileges enabled
	Move t1, ExecFk		; Get lower fork handle
	EPCAP%			; Set its capabilities

	SetZM ExcJfn		; Forget the jfn (it isn't ours any more)

	Ret			; All set up, let the other routine do the Push

FrkGon:	Tmsg <
% Lower EXEC has gone away

>
	Move t1, ExecFk		; Get the fork handle again
	RFRKH%			; Release the handle
	 Trn			;  Ignore any error ...

	SetZM ExecFk		; Drop the handle ...
	RetSkp			; Return saying there was a problem ...


; Get a jfn for the EXEC ...

GetXJf:	Call GjfRes		; Reset (most of) the GTJFN block

	MovX t4, Gj%Old		; We want an old file
	MoveM t4, .GjGen(t3)	; Set the flags ...
	MoveI t4, .NulIO	; No jfns ...
	HrlM t4, .GjSrc(t3)	; Null input jfn
	HrrM t4, .GjSrc(t3)	; Null output jfn
	HrrOI t4, [AsciZ/System:/] ; Default structure (and directory)
	MoveM t4, .GjDev(t3)	; Store it
	HrrOI t4, [AsciZ/Exec/] ; Default filename
	MoveM t4, .GjNam(t3)	; Store it
	HrrOI t4, [AsciZ/Exe/]	; Default extension
	MoveM t4, .GjExt(t3)	; Store it

	MoveI t1, 0(t3)		; Addr of block in rh reg t1
	HrrOI t2, ExecNm	; Use this info, if it is available
	GTJFN%			; Get a jfn on the file if we can
	 JEcBug (HLT,<Can't get a jfn for the EXEC>)

	HrrZM t1, ExcJfn	; Store the jfn we got

	HrrOI t1, ExecNm	; Pointer to where to put the name
	Move t2, ExcJfn		; The jfn
	MovX t3, Fld(.JsAof, Js%Dev) ! Fld(.JsAof, Js%Dir) ! 
		 Fld(.JsAof, Js%Nam) ! Fld(.JsAof, Js%Typ) ! 
		 Fld(.JsAof, Js%Gen) ! Js%Paf ; The full name
	SetZ t4,		; No prefix
	JFNS%			; Get the jfn into a file name
	 JEcBug (HLT,<Can't turn EXEC jfn into string>)

	Ret			; Done here

Eof:	SkipN RdJfn		; Is there a jfn?
	 Ret			;  No ...

	Move t1, PtyTtd(WCL)	; WCL's tty designator
	HrrOI t2, [AsciZ/
 [End-of-file on /]
	SetZ t3,		; Stop on a null
	SOUT%			; Send this out
	 ErJmp .+1		;  Ignore error ...

	Move t2, RdJfn		; The jfn
	MovX t3, Fld(.JsAof, Js%Dev) ! Fld(.JsAof, Js%Dir) ! 
		 Fld(.JsAof, Js%Nam) ! Fld(.JsAof, Js%Typ) ! 
		 Fld(.JsAof, Js%Gen) ! Js%Paf ; The full name
	SetZ t4,		; No prefix
	JFNS%			; Get the jfn into a file name
	 ErJmp .+1		;  Ignore error ...

	HrrOI t2, [AsciZ/]

/]				; Finish the message ...
	SetZ t3,		; Stop on a null
	SOUT%			; Send this out
	 ErJmp .+1		;  Ignore error ...

	MoveI t2, .ChCnR	; Get a control-R
	Push p, i		; Save current subjob
	SetZ i,			; Use subjob 0 (WCL)
	Call PtyOut		; Send control-R to WCL to make it retype its
				;  prompt ...
	Pop p, i		; Restore current subjob

	Move t1, RdJfn		; The gotten jfn ...
	CLOSF%			; Close the file
	 ErJmp .+1		;  Ignore error ...

	SetWOf HidFlg		; Stop hiding output

	SetZM RdJfn		; Clobber the reading jfn
	Ret			; Done here
	
	SubTtl SetRes -- Set up the rescan buffer for a fork

SetRes:	HrrOI t1, ResTxt	; Ptr to where we want the rescan text
	Move t2, HldJfn		; Pick up the jfn of the file
	MovX t3, Fld(.JsAof, Js%Nam) ; Want the program name first
	JFNS%			; Copy it over
	 JEcBug (HLT,<JFNS for setting up fork's rescan buffer failed>)

	MoveI t2, " "		; Want a space
	Idpb t2, t1		; Append it to the file name

	HrrOI t2, CmdAtm	; Ptr to atom buffer
	SetZ t3,		; Stop on a null
	SOUT%			; Copy over the user's text
	 JEcBug (HLT,<SOUT failed>)

	MoveI t2, .ChLfd	; Line feed
	Idpb t2, t1		; Append it to the file name

	SetZ t2,		; A null
	Idpb t2, t1		; Append it to the file name

	Ret			; Done here

	SubTtl PanicR -- Panic level interrupt, a real problem (we guess)

PanicR:	Call AcSave		; Save temp ac's

	Tmsg <
? Window bug:  Panic-level interrupt at > ; Complain

	MoveI t1, .PriOu	; The terminal
	HrrZ t2, Lev1PC		; The PC from which we bombed
	MoveI t3, ^d8		; In octal ...
	NOUT%			; Type the number
	 ErJmp [MoveI t1, "?"
		PBOUT%		; Don't even know the number
		Jrst .+1 ]	; Move on anyway

	Tmsg < -- >		; Separator

	SetO t1,		; Want most recent error
	Call TypErr		; Type out the error message

	Tmsg <
% Halting ...

>

	Call AcLoad		; Restore regs

	HALTF%			; Stop cold
	DEBRK%			;  but debreak if user wants to
	 ErJmp .+1

	Tmsg <
? Window bug: Fell through panic DEBRK
>
	 ErJmp .+1		;  Just in case ...

	HALTF%			; Stop cold (what else can we do?)
	Jrst .-1

	SubTtl BadMem -- Reference to nonexistent page, see if a problem

BadMem:	Call AcSave		; Save temp ac's

	HrrZ t1, Lev1PC		; PC from whence we came
	MoveI t1, @0(t1)	; Get address which was referenced
	Lsh t1, -^d9		; Make it a page number

	CamG t1, HiCore		; Compare with highest we saw
	 Jrst [	Call ACLoad	; Get back saved AC's
		Jrst BmDebr ]	; Go debreak

	Move t2, HiCore		; Pick up high core address
	CaiN t1, 1(t2)		; Is this page the next one?
	 Jrst [	Aos HiCore	;  Yes, bump the core count
		Call ACLoad	; Get back saved AC's
		Jrst BmDebr ]	; Go debreak

	Tmsg <
? Window bug:  Wild reference to memory location > ; Complain

	MoveI t1, .PriOu	; The terminal
	HrrZ t2, Lev1PC		; The PC from which we bombed
	MoveI t2, @0(t2)	; Get address which was referenced
	MoveI t3, ^d8		; In octal ...
	NOUT%			; Type the number
	 ErJmp [MoveI t1, "?"
		PBOUT%		; Don't even know the number
		Jrst .+1 ]	; Move on anyway

	Tmsg < from location >

	MoveI t1, .PriOu	; The terminal
	HrrZ t2, Lev1PC		; The PC from which we bombed
	MoveI t3, ^d8		; In octal ...
	NOUT%			; Type the number
	 ErJmp [MoveI t1, "?"
		PBOUT%		; Don't even know the number
		Jrst .+1 ]	; Move on anyway

	Tmsg <
% Halting ...

>

	Call AcLoad		; Restore regs

	HALTF%			; Stop cold

BmDebr:	DEBRK%			;  but debreak if user wants to
	 ErJmp .+1

	Tmsg <
? Window bug: Fell through bad memory reference DEBRK
>
	 ErJmp .+1		;  Just in case ...

	HALTF%			; Stop cold (what else can we do?)
	Jrst .-1

	SubTtl Purge -- Dump core data to disk, or just flush it

Purge:	Push p, i		; Save regs
	Push p, p3

	HrrZ p1, SjList		; Start of sj list

PrgLop:	Move i, 1(p1)		; Subjob number

	Move p2, PtyTop(i)	; Highest line in core for this job
	
	MoveI p3, ^d100		; This is the maximum number of lines to purge
				;  for a subjob ...

PrgLp2:	CamN p2, PtyHil(i)	; Have we hit the high line?
	 Jrst PrgBt2		;  Yes ...

	SojL p3, PrgBt2		; We have purged enough ...

	Move t1, p2		; Put ptr in t1
	Move p2, 0(p2)		; Advance the ptr
	Call GivSp2		; Return the block

	Jrst PrgLp2		; Try for more

PrgBt2:	MoveM p2, PtyTop(i)	; High lines are now the same

	SetZM .BkwPt(p2)	; Clobber back ptr from the new top line

	Hrrz p1, 0(p1)		; Advance subjob list ptr
	JumpN p1, PrgLop	; Go do next subjob

	Pop p, p3		; Restore regs
	Pop p, i

	Ret			; Done with this

LitUtl:				; A label for the literal pool

	End
