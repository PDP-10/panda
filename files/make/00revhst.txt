!<BEEBE.MAKE>00REVHST.TXT.38, 11-Apr-87 15:14:39, Edit by BEEBE

This reverse-chronological log records changes to the public domain MAKE
utility carried out by Nelson H.F. Beebe (BEEBE@SCIENCE.UTAH.EDU).

[20-Apr-87]
		Added saving  of  name  of  newer  dependent  for  debug
		printing in make.c.

[20-Apr-87]
		Changed incorrect handling of rules, so makerules()  and
		makeinit() are  NOT called  if the  -r option  is  used.
		Previously, the code did not search the dependency lists
		if -r was  used, which seems  wrong, because they  could
		have come from the user's Makefile.

[20-Apr-87]
		Added setting  of  macros  $@ for  libname  and  $%  for
		modulename in new  library support code  in make.c,  and
		made macro.c check for replacement of macro with current
		value, saving an unnecessary free()/malloc() call.   The
		$% macro is used in  SUN's make, so there is  precedence
		for it.

[18-Apr-87]
		Added  readlibdate()   to   make.c  from   Todd   Aven's
		public-domain VMS make and  updated modtime() in  make.c
		to  use  it.    This  allows  filenames   of  the   form
		"libname.xlb(modulename)"; too  bad stat()  does not  do
		that for us!  Changed (time_t)0 to NOTIME in make.c  and
		input.c, and defined NOTIME in h.h.

[15-Apr-87]
		Added immediate  typeout  for  interrupt  characters  in
		system(); it is  needed to  reassure the  user that  the
		interrupt was caught when a subprocess is running.

[11-Apr-87]
		PC  histogramming  revealed  that  strcm2()  in   main.h
		accounted for 60% (!) of the execution time of Make when
		compiled with KCC; rewrote  inner loop to reduce  number
		of  function  calls,  and   reduced  run-time  by   25%.
		Surprisingly,  input()  accounts  for  only  about  10%,
		stat() for  about  1%,  and  all  the  C-library  string
		routines for about 5%.

[28-Mar-87]	TODO:
		Possibly  add   newer   Make   features   like

		* library dependencies (libfile(member)),
		* macro substitution ($(name:old=new)),
		* MAKEFLAGS and MFLAGS environment variables,
		* $% (library member),
		* $(xD) and $(xF) (D = directory part, and F = file
		  part, for x = *, @, <,  and %),
		* "include filename" (with 16-level nesting)
		* $(MAKE) target which is executed even when -n is
		  specified, so one can have it invoke other make's with
		  -n, say in an entire directory tree
		* installation of entire set of environment names in
		  macro tables after the internal rules are set, and
		  before any makefiles are read.  With the -e option,
		  they become permanent, and cannot be overridden by
		  macro assignments in a makefile (my permanent flag
		  introduced below handles this nicely).
[28-Mar-87]
		DONE!  (Except maybe for the TODO work above).

[28-Mar-87]
		Prettyprinted source code with "indent" utility.

[28-Mar-87]
		Unlike Unix  make,  which  uses  hash  tables  for  name
		lookup, this  version  of MAKE  uses  sequential  search
		through linked lists.  In the interests of efficiency, I
		made the  macro  list self-organizing,  by  moving  each
		successfully found macro  in getmp() in  MACRO.C to  the
		head of the list.

[28-Mar-87]
		Removed variable argument  count usage  for fatal()  and
		error() because it is a portability barrier (changes  in
		all files).

[28-Mar-87]
		Added support for multiple "-f makefile" options.   This
		feature is not well documented  in Unix make man  pages,
		but experiments on the Sun showed that all the files are
		processed before  target  processing begins;  thus,  the
		multiple files must contain  distinct target names.   It
		is not  clear what  the use  of this  feature might  be.
		This did simplify the coding in main(), however, because
		now it is  easy to provide  multiple default  makefiles;
		the DEFN1 and DEFN2 values  have been done away with  in
		favor of a single token  list, MAKEFILES, in h.h,  which
		gettok() can  easily  process.  The  list  of  makefiles
		collected from the  command line is  stored in a  DEPEND
		structure, and new flag,  N_DEFAULT, for n_flag in  NAME
		is defined  for the  purposes  of marking  default  file
		names which do not cause  termination if they cannot  be
		opened.

[28-Mar-87]
		Introduced TAB in h.h and removed all \t's in  remainder
		of code in favor of TAB.  OS9 apparently doesn't support
		tabs, and there were  several places where  conditionals
		for it could be eliminated with this change.

[28-Mar-87]
		Added debug code to error()  and fatal() so they  invoke
		prt() and prtname() before terminating when -d has  been
		selected.

[28-Mar-87]
		Added support for Make's "TARGET:; RULE" syntax in
		input.c.

[28-Mar-87]
		Fixed Makefile.msc; it was  mixing memory models.   MAKE
		now runs correctly with Microsoft C on MS DOS.  Added  a
		few missing typecasts caught by MSC and Lint.

[27-Mar-87]
		Rewrote  newsuffix()   in   main.c  to   use   gettok(),
		simplifying the code.

[27-Mar-87]
		Multiple target names were not supported in rules()  for
		default rules (they  were handled  correctly in  input()
		for user Makefiles).  With the drastic simplification of
		rules.c described below, it  was straightforward to  add
		this to makerules(), allowing  the built-in rule  tables
		to be reduced in size at the same time.

[27-Mar-87]
		Merely allowing backslash before =  and : in macros  and
		targets is insufficient (see [23-Mar-87] remark  below).
		Consider for example the following:

		B = doc\:
		TARGET:		$(B)foo
		$(B)bar:	fee

		Protection of the  colon in the  target name is  needed,
		but removal of  the backslash  is also  required in  the
		dependency list  $(B)foo.   The  solution  is  to  allow
		targets,  dependencies,   and   commands  to   all   use
		backslash-character  pairs,  with  the  rule  that   the
		standard C escapes are  recognized and reduced, and  the
		additional rule that all other backslash-character pairs
		reduce to  the  second  member of  the  pair.   Thus  \:
		reduces to : everywhere, but will not be recognized as a
		target name delimiter.   The new  function squeeze()  in
		input.c handles this job; it is called from input().

[27-Mar-87]
		Drastic rewrite of rules.c to provide tables of built-in
		macros, rules,  and .SUFFIXES.   The  code is  now  very
		clean, and adding new table entries is trivial.   #ifdef
		... #endif now  bracket only  data initializations,  and
		the executable  code section  is now  host  independent.
		Fixed a few errors in the VMS rules section.

[27-Mar-87]
		Spent  3  days  thinking  about  how  to  handle   macro
		expansion so that command  line macros replace  built-in
		ones.  If input()  is called  after command-line  macros
		are installed, their values  will be replaced by  values
		from the Makefile.  If macro expansion is delayed  until
		make() is called, instead of being done in input(), very
		ugly code is  needed to  scan the  dependency lists  and
		install macro expansions.  The solution turned out to be
		simple.  The struct MACRO has  been modified to carry  a
		flag indicating whether the  macro is permanent or  not,
		and then  command-line macros  and  $ are  installed  as
		permanent macros before any input() processing is  done.
		input() can then call expand() as before, and will  then
		get the correct macro values.

[23-Mar-87]
		Added prtcmd(), prtdepend(), prtlevel(), prtline(),  and
		prtname()  in  make.c   for  debug   printing  of   data
		structures.   Switch  -d   takes  an  optional   numeric
		argument  (e.g.   -d3)   which  specifies  the   maximum
		recursion  level  permitted  while  printing  the   data
		structures.  The default is -d1.

[23-Mar-87]
		Remove rules for .sf3.rel  and .sf3.obj in rules.c;  the
		two  rules   .sf3.for   and  .for.rel   (.for.obj)   are
		sufficient now, and may avoid an unnecessary  invocation
		of sf3.

[23-Mar-87]	[Extension to Unix make]
		This feature was present in input() in input.c, but  not
		documented,  and  not   available  in   Unix  make.    A
		backslash-colon pair in  a target name  is reduced to  a
		colon, and does not terminate the target name.  This  is
		a necessary  extension  to Unix  make,  which  otherwise
		allows  only  letters,  digits,  periods,  and  slashes;
		colons are  valid characters  in filenames  on  TOPS-20,
		VMS, and  MS-DOS.  The  target name  parsing in  input()
		allows any  characters  to be  used  in a  target  name;
		characters up  to  the first  colon  not preceded  by  a
		backslash are accepted as part of the target name.

[23-Mar-87]	[Conformance with Unix make]
		Remove call to expand() in input.c, and insert new  code
		executed on first entry to make() in make.c which  calls
		expand() for each  target name.  This  allows a  generic
		target line like

		$(NAME).exe:	$(NAME).obj $(NAME).c

		which allows NAME to be substituted at make-time.

[23-Mar-87]	[Conformance with Unix make]
		Moved installation of command-line macros to after  call
		to input() in main(), so they can override values in the
		Makefile.

[23-Mar-87]
		Added rules for SliTeX in rules.c.

[20-Mar-87]
		Added (bool) typecast in assignment to trim in reader.c.

[20-Mar-87]	[Extension to Unix make]
		Added support  for  providing  default  Makefiles  in  a
		semicolon-separated  list in  the  environment  variable
		(TOPS-20 or VMS logical name) MAKEINIT.  These Makefiles
		are read after the  built-in rules are established,  and
		before the  user  Makefile.   This  supports  adding  or
		changing rules on a  system-wide or project-wide  basis,
		without having to make massive editorial changes on user
		makefiles scattered throughout the filesystem.

[19-Mar-87]
		Changed $< to $*.for in rules.c for cases where  FORTRAN
		is invoked after another processor.

[18-Mar-87]
		Fixed  getline()   in  reader.c   to  obey   Unix   make
		convention: "If  the  last  character of  a  line  is  a
		backslash, the backslash, newline, and following  blanks
		and  tabs  are  replaced  by  a  single  blank."   [S.I.
		Feldman, "Make  -- A  Program for  Maintaining  Computer
		Programs"].   getline()  previous  just  converted   the
		newline to a blank, leaving leading whitespace.

[18-Mar-87]	[Extension to Unix make]
		Fixed doexp() in  macro.c to  expand literal  "\n" to  a
		newline, in  order that  rule lines  in a  makefile  can
		define multi-line  strings  to be  passed  to  system().
		This is not possible with Unix system(), and usually not
		necessary either, since a Unix program that needs  input
		can be  given  it  from an  file  redirected  to  stdin.
		However, on TOPS-20, many programs expect input from the
		terminal (e.g. TeX,  MAKLIB, and  most native  compilers
		invoked by  name), and  there  may be  no other  way  to
		supply this input until the TOPS-20 EXEC can be made  to
		support file redirection,  which is  unlikely to  happen
		soon.  This  change  allows for  example  the  following
		TOPS-20 dependency line and rule:

		liblcl: fileof.rel jfnof.rel freass.rel system.rel getlog.rel
			delete liblcl.rel
			maklib\n\
			liblcl=freass,fileof/a,getlog/a,jfnof/a,system/a\n\
			liblcl=liblcl/index\n\
			
			copy liblcl.rel.0 c:
			delete liblcl.rel

		Note that the MAKLIB  invocation actually consists of  4
		lines.  The backslash on the first 3 is necessary to get
		the rule picked up as one string, and the "\n" sequences
		will be converted to newlines by doexp() before the rule
		line (which is really 4 lines) is passed to system().

[18-Mar-87]	[Extension to Unix make]
		TOPS-20 is case-insensitive, and users who have not  had
		experience on Unix  are likely to  be surprised, if  not
		confused, by case-sensitive  programs.  TOPS-20 MAKE  is
		now case-INsensitive; THIS  CHANGE MAY  BE RESCINDED  IN
		THE FUTURE.  Changed argv[] processing switch in  main()
		to lower-case  a  command-line switch  name.   #define'd
		strcmp to be  strcm2, which  is defined  in main.c,  and
		does case-insensitive string comparisons.  The choice is
		made at compile-time, depending  on whether  or not  the
		symbol CASE_INSENSITIVE is defined; presumably it may be
		wanted for other operating systems too.

[12-Mar-87]
		Began  adoption  of   public-domain  MAKE  to   TOPS-20.
		Massive  cleanup  with   introduction  of  several   new
		typedefs, and  extensive  use  of  typecasts  to  ensure
		correct coercions in assignments and function arguments.
		Add newsuffix() in rules.c to clean up the original long
		code sequences setting up  the default .SUFFIXES  lists.
		Implemented first on TOPS-20 and  Sun Unix, then on  VAX
		VMS and  IBM PC  (the latter  as yet  incomplete).   The
		resulting code is now MUCH easier to port: examine  each
		.c and .h  file, and everywhere  a #ifdef OPSYS  occurs,
		insert a  new one  with code  corresponding to  the  new
		system.
    