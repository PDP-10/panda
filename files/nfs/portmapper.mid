	Title PortMapper 
	Subttl Mark K. Lottor, January 1987

.DECSAV

.INSRT MID:MACROS
.INSRT MID:SYMBOLS

.INSRT DSK:UDP.MID
.INSRT DSK:XDR.MID
.INSRT DSK:RPC.MID 

Q1=5
Q2=6
Q3=7

Define RetSkp
	Jrst Popj1
Termin

PDLen==40
PDL:	Block PDLen

OurPrt==111.
Prog==100000.
Vers==2.

;Dispatch table, nx4 array, [program ? version ? procedure ? address]
DspTab:	Prog ? Vers ? 0 ? D.NULL	;null procedure
	Prog ? Vers ? 1 ? D.SMAP	;set a mapping
	Prog ? Vers ? 2 ? D.CMAP	;clear a mapping
	Prog ? Vers ? 3 ? D.RMAP	;read a mapping
	Prog ? Vers ? 4 ? D.DMAP	;dump the mappings
	0				;end

OurNum:	0
OurNam:	Block 40


;args
A.Prog:	0
A.Vers:	0
A.Prot:	0
A.Port:	0

;Mapping table, nx5 array, [program ? version ? protocol ? port]
M%PROG==0
M%VERS==1
M%PROT==2
M%PORT==3
M%WID=4
MapLen==100.
MapSiz:	1
MapTab: Prog ? Vers ? 17. ? 111.	;our mapping
	Block MapLen*M%WID		;the mappings


;booleans
T%FALSE==0
T%TRUE==1


Start:	RESET%
	Move	P,[PDL(-PDLen)]	;init stack

	Movei 1,.FHSLF
	RPCAP%
	Txne 2,SC%WHL
	 Txnn 2,SC%NWZ
	  Jrst [TypeCR "[NFS] Need wheel and net-wizard privs."
	        Jrst Die]
	Seto 3,
	EPCAP%

	Movei 1,.GTHNS
	Hrroi 2,OurNam
	Seto 3,
	GTHST%
	 Erjmp [TypeCR "[Portmapper] Can't get our host info."
		Jrst Die]
	Movem 3,OurNum

 	Movei 1,OurPrt
	Call UDP"GetIQ		;get a udp queue
	 Jrst [TypeCR "[Portmapper] Can't get a UDP queue."
	       Jrst Die]

	TypeCR "[Portmapper] initialized."

	Movei 1,Dsp		;dispatch address
	Movei 2,DspTab		;dispatch table
	Call RPC"DoRPC		;handle RPC requests forever
	TypeCR "[Portmapper] RPC death."
	Jrst Done

Dsp:	Call (1)
	Ret


;the null procedure
D.NULL:
	Ret


;set a mapping
;takes program, version, protocol, port
;returns true or false
D.SMAP:	Move 1,RPC"RcvBlk+U%SHST
	Came 1,OurNum		;is it from our host?
	 Jrst AddErr		;no
	GetUns 1,RP
	Movem 1,A.Prog
	GetUns 1,RP
	Movem 1,A.Vers
	GetUns 1,RP
	Movem 1,A.Prot
	GetUns 1,RP
	Movem 1,A.Port
	Call FndMap		;is it there?
	 Jrst AddMap		;no, so add it
AddErr:	Movei 1,T%FALSE
	PutUns 1,SP		;return false if mapping exists
	Ret

AddMap:	Move 1,MapSiz
	Cail 1,MapLen
	 Jrst [TypeCR "[Portmapper] Map table full."
	       Jrst AddErr]
	Move 4,MapSiz
	Imuli 4,M%WID
	Move 1,A.Prog
	Movem 1,MapTab+M%PROG(4)
	Move 1,A.Vers
	Movem 1,MapTab+M%VERS(4)
	Move 1,A.Prot
	Movem 1,MapTab+M%PROT(4)
	Move 1,A.Port
	Movem 1,MapTab+M%PORT(4)
	Aos MapSiz
	Movei 1,T%TRUE
	PutUns 1,SP
	Ret


;clear a mapping
;takes program, version
;returns true or false
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Note:  This isn't implemented because of security problems.
; 	You don't want any random to clear mappings.  There 
;	needs to be a way to only allow the map setter to unset it,
;	possibly based on job numbers.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
D.CMAP:	Move 1,RPC"RcvBlk+U%SHST
	Came 1,OurNum		;is it from our host?
	 Jrst ClrErr		;no
	GetUns 1,RP
	Movem 1,A.Prog
	GetUns 1,RP
	Movem 1,A.Vers
	GetUns 1,RP		;get dummy1
	GetUns 1,RP		;get dummy2

ClrErr:	Movei 1,T%FALSE		;no go
	PutUns 1,SP		
	Ret


;read a mapping
;takes program, version, protocol, dummy
;returns port number or zero
D.RMAP:	GetUns 1,RP
	Movem 1,A.Prog
	GetUns 1,RP
	Movem 1,A.Vers
	GetUns 1,RP
	Movem 1,A.Prot
	GetUns 1,RP		;get dummy arg
	Call FndMap		;look up mapping
	 SkipA 2,[0]		;error, return zero
	Move 2,MapTab+M%PORT(1)	;or return port number
	PutUns 2,SP
	Ret


;dump the mappings
;takes nothing
;returns list of mappings
; list of blocks in format:
;   false    ;end of list
;   true     ;mapping
;     program
;     version
;     protocol
;     port
;Note:  This will die if the dump doesn't fit into a single packet, but
;	should be able to fit 100 mappings in a minimal 512 byte packet.
D.DMAP:	Movn Q1,MapSiz
	Hrlz Q1,Q1
D.DMa1:	Hrrz 4,Q1
	Imuli 4,M%WID
	Movei 1,T%TRUE
	PutUns 1,SP		;yes, this is an entry
	Move 1,MapTab+M%PROG(4)
	PutUns 1,SP
	Move 1,MapTab+M%VERS(4)
	PutUns 1,SP
	Move 1,MapTab+M%PROT(4)
	PutUns 1,SP
	Move 1,MapTab+M%PORT(4)
	PutUns 1,SP
	Aobjn Q1,D.DMA1
	Movei 1,T%FALSE
	PutUns 1,SP		;end of list
	Ret


;find a mapping, takes A.Prog, A.Vers, A.Prot
;returns table index in t1 and retskp's if found
;otherwise returns if not found
FndMap:	Movn Q1,MapSiz
	Hrlz Q1,Q1
FndMa1:	Hrrz 4,Q1
	Imuli 4,M%WID
	Move 1,MapTab+M%PROG(4)
	Came 1,A.Prog
	 Jrst FndNxt
	Move 1,MapTab+M%VERS(4)
	Came 1,A.Vers
	 Jrst FndNxt
	Move 1,MapTab+M%PROT(4)
	Came 1,A.Prot
	 Jrst FndNxt
	Move 1,4		;found it, return index
	RetSkp
FndNxt:	Aobjn Q1,FndMa1
	Ret


Done:	Call UDP"RlsIQ

Die:	Haltf%
	Jrst	Die

Popj1:	Aos	(P)
R:	Ret

	End Start
