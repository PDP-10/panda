;<FINGER>DBEDIT.MAC.38, 20-Sep-83 11:30:01, Edit by FMF
; Fix typo in .COMND
;<FINGER>DBEDIT.MAC.37,  2-Sep-83 00:47:04, Edit by FMF
; Fix SETENT: have to do a TBLUK% if TBADD% fails (TBLADD did it for us)
;<FINGER>DBEDIT.MAC.36, 15-Aug-83 08:21:48, Edit by FMF
; Default personal name to original personal name
;<FINGER>DBEDIT.MAC.35,  7-Aug-83 14:43:30, Edit by FMF
; Don't output extra CRLF when VERIFYing
;<FINGER>DBEDIT.MAC.34,  5-Aug-83 18:41:35, Edit by FMF
; No '"' before NONE if no name for NAME command
;<FINGER>DBEDIT.MAC.33,  5-Aug-83 07:40:53, Edit by FMF
; Have to do a TBLUK% to find entry address before a TBDEL%
;<FINGER>DBEDIT.MAC.32,  2-Aug-83 13:58:33, Edit by FMF
; Make sure username is in upper case for NAME command
;<FINGER>DBEDIT.MAC.31,  2-Aug-83 13:10:52, Edit by FMF
; CONFRM do its own error handling
;<FINGER>DBEDIT.MAC.30,  2-Aug-83 08:47:32, Edit by FMF
; Make help file point to HLP:DBEDIT.HLP
;<FINGER>DBEDIT.MAC.29,  2-Aug-83 08:44:48, Edit by FMF
; Install new MACRO version

TITLE DBEDIT
SUBTTL Mike Peeler
;Converted to Macro by Frank M. Fujimoto - July, 1983

SEARCH MONSYM,MACSYM,FNGDEF,JOBDAT
.TEXT "DBEDIT/SAVE"
.REQUIRE SYS:MACREL
ASUPPRESS
SALL

VMAJOR==2
VMINOR==0
VEDIT==22
VWHO==4				;4 = Stanford

A=1
B=2
C=3
D=4
E=5
F=6

PDLLEN==200			;Moderate stack
BUFLEN==200			;Buffer length for comnd buffers
MSGLEN==1000			;Buffer length for output messages
FAT==50				;Amount of extra stack space for errors
SYM==6				;Ac used by symbol typer
.CHDQT==42			;A double quote

OPDEF SKPA [TRNA]		;A faster skip always

;Expand help for a particular command
DEFINE DOHELP (HTEXT,%HELP) <
	JRST %HELP
	ASCIZ \HTEXT\
%HELP:!
>;DOHELP

;Normal invokation of COMND
DEFINE PARSE (TYPE) <
	MOVEI B,TYPE
	CALL PARSER
>;PARSE

;Define an entry in a command table
DEFINE CMDENT (NAME,LABEL,FLAGS) <
IFB <FLAGS>,<
	[ASCIZ \NAME\],,LABEL
>;IFB
IFNB <FLAGS>,<
	[CM%FW!FLAGS
	 ASCIZ \NAME\],,LABEL
>;IFNB
>;CMDENT

;Define first word in a table
DEFINE TABTOP <
.TABLC==.
	0			;;We'll fill this in later
>;TABTOP

;Fill in the first word in a table
DEFINE TABBOT <
.TABSV==.
RELOC .TABLC
	.TABSV-.TABLC-1,,.TABSV-.TABLC-1
RELOC .TABSV
>;TABBOT

;Special case of normal invokation of COMND
DEFINE NOISE (STRING) <
	MOVEI B,[FLDDB. .CMNOI,,<-1,,[ASCIZ \STRING\]>]
	CALL .COMND
	 JRST PRSERR
>;NOISE

DEFINE CRLF <
	HRROI A,[BYTE (7) .CHCRT,.CHLFD,0] ;;Get the CRLF
	PSOUT%			;And output it
>;CRLF

FRELOC==700000			;Where free storage begins

BINFIL:	ASCIZ "FINGER:FINGER.BIN" ;File names for short form GTJFN%
HLPFIL:	ASCIZ "HLP:DBEDIT.HLP"
FNGDEV:	ASCIZ "FINGER:"		;File name field defaults for long form
FINGER:	ASCIZ "FINGER"
BINEXT:	ASCIZ "BIN"
TXTEXT:	ASCIZ "TXT"
LOGEXT:	ASCIZ "LOG"
SIGNET:
BININI:	'FINGER'		;FNGSIG
	0			;FNGAUT
	0			;FNGTIM
	-1			;FNGLOK
	TTYLOC			;FNGTTY
	0			;FNGTLN
	USRLOC			;FNGINF
	0			;FNGILN
	0			;FNGSLN
PDLP0:	-PDLLEN-1,,PDL-1	;Subbottom of stack
PDLP1:	-PDLLEN,,PDL		;Bottommost element of stack
PERBRK:	777777,,777760
	0
	0
	2			;Personal name break table

TOPTBL:	TABTOP			;Top level command table
	CMDENT BUILD,.BUILD
	CMDENT DUMP,.DUMP
	CMDENT EXIT,.EXIT
	CMDENT HELP,.HELP
	CMDENT LOAD,.LOAD
	CMDENT NAME,.NAME
	CMDENT QUIT,.EXIT,CM%INV
	CMDENT VERIFY,.VERIF
	TABBOT



UPPER:				;Uppercase already or irrelevant, no change
.RPCNT==0
REPEAT "a",<
	.RPCNT
.RPCNT==.RPCNT+1
>;REPEAT
				;Lowercase, raise
.RPCNT==0
REPEAT "z"-"a"+1,<
	"A"+.RPCNT
.RPCNT==.RPCNT+1
>;REPEAT
				;No change
.RPCNT==0
REPEAT 177-"z",<
	"z"+1+.RPCNT
.RPCNT==.RPCNT+1
>;REPEAT

EVEC:	JRST DBEDIT		;Primary entry point
	JRST DBEDIT
	BYTE (3) VWHO (9) VMAJOR (6) VMINOR (18) VEDIT
EVECL==.-EVEC

CSTATE:	CM%XIF!RPARSE		;The reparse address
	.PRIIN,,.PRIOU		;I/O jfns
	-1,,ZERO		;Default to no prompt
	-1,,COMBUF		;Can't edit past this point
	-1,,COMBUF		;Pointer to next field
	BUFLEN*5-1		;Remaining space in command buffer
	0			;Remaining unparsed characters
	-1,,ATMBUF		;Last field parsed
	BUFLEN*5-1		;Size of atom buffer
	LGJFNB			;Address of jfn block

LGJFNB:	0
	.PRIIN,,.PRIOU
	-1,,FINGER
	0
	-1,,FINGER
	0
	BLOCK LGJFNB+.GJATR+1-.


ZERBEG:				;Block storage
ZERO:	0			;Always zero
RPROMT:	0			;Indirect pointer to command error recovery
RPARSP:	0			;Stack value at reparse
TRIES:	0			;Number of tries left before giving up
RUNNER:	0			;User running DBEDIT
BINJFN:	0			;Database file
TXTJFN:	0			;User names file
LOGJFN:	0			;Verify log file
PAGINF:	BLOCK 2			;Pmap page info
BUILTF:	0			;Flags whether or not rebuild already tried
OLDTIM:	0			;Time of write of DB when we last looked
OURLOK:	0			;Yes, that's right, it's us who've got it
USRNUM:	0			;Number of user read
USRENT:	0			;Current 
NEXPAG:	FRELOC/1000		;Free page allocator
USRADR:	BLOCK 1			;Address of mapped in user data
USRBUF:	BLOCK 8			;User name
PERBUF:	BLOCK USRRCL		;Personal name record
UCACHE:	BLOCK MAXUSR+1		;RCUSR cache of for-real users in DB
COMBUF:	BLOCK BUFLEN		;Command buffer
ATMBUF:	BLOCK BUFLEN		;Atom buffer
PROMPT:	BLOCK BUFLEN		;Prompt buffer
DEFNAM:	BLOCK BUFLEN		;Name for defaulting
MSGBUF:	BLOCK MSGLEN		;Buffer for output still to be formatted
ERRPC:	BLOCK 1			;Error PC
PDL:	BLOCK PDLLEN		;Stack
FATPDL:	BLOCK FAT		;Artificially inflated stack for errors
ZEREND==:.-1			;End of block storage

DBEDIT:	JSP P,INIT		;Initialize variables and set up stack
	CALL GETCTC		;Make sure we can prevent ^C in critical code
	CALL BININ		;Read in the .BIN file
	DO.
	  MOVEM P,RPARSP	;Stack location for reparse
TOPLV2:	  HRROI A,[ASCIZ \DBEDIT>\] ;Prompt
	  MOVEM A,CSTATE+.CMRTY
	  MOVEI A,TOPLV2	;Reprompt address after error
	  MOVEM A,RPROMT
	  MOVEI A,RPARSE	;Reparse address
	  HRRM A,CSTATE
	  MOVEI B,[FLDDB. .CMINI] ;Want to initialize
	  CALL .COMND		;Do it
	   NOP			;Shouldn't get an error here
RPARSE:	  MOVE P,RPARSP		;Reset the stack
	  MOVNI A,1		;Can't have any jfns lying around
	  RLJFN%
	   ERCAL JWARN
	  SETZM TXTJFN
	  SETZM LOGJFN
	  MOVEI B,[FLDDB. .CMKEY,,TOPTBL] ;Parse a top level command
	  CALL .COMND		;Do it
	   JRST PRSERR
	  HRRZ B,(B)		;Get the dispatch for the keyword given
	  CALL (B)		;Call the routine
	  LOOP.			;Go get another
	ENDDO.


;{P} = JSP P,INIT [A]		! globals initializer
;gives	P/ top of stack

INIT:	RESET%			;Flush all I/O, etc.
	SETZM ZERBEG		;Zero out data area
	MOVE A,[ZERBEG,,ZERBEG+1]
	BLT A,ZEREND
	MOVEI A,FRELOC/1000	;Get free page allocator started
	MOVEM A,NEXPAG
	MOVEM P,PDL		;Put retadr on stack for RET to caller
	MOVE P,PDLP1		;Init stack pointer
	RET			;Branch address for normal returns


;{A-C} = CALL CONFRM [A-C]		! waits for carriage return

CONFRM:	MOVEI B,[FLDDB. .CMCFM]
	CALL .COMND
	 JRST PRSERR		;Bomb if it wasn't confirmed
	RET			;Go back

PRSERR:	CALL ERRTYO		;Diagnose the error
	LDB A,[350700,,ATMBUF]
	IFN. A
	  TMSG < - ">
	  HRROI A,ATMBUF
	  PSOUT%
	  MOVEI A,42
	  PBOUT%
	ENDIF.
	CRLF
	JRST @RPROMT		;Try again

;.COMND - Parse one field
;Takes B/ FLDDB. chain
;Returns +1 - falure
;	 +2 - success, A/ Flags
;		       B/ data
;		       C/ type of function parsed
.COMND:	MOVEI A,CSTATE		;Address of CSB
	COMND%			;Do the parse
	IFNJE.
	  TXNE A,CM%NOP		;Did we parse it?
	ANSKP.
	  LOAD C,CM%FNC,(C)	;Get the function
	  RETSKP		;And go back +2
	ENDIF.
	RET			;Go back +1

;GETCFM - Get confirmation
;Returns +1 - not confirmed
;	 +2 - confirmed

GETCFM:	HRROI A,[ASCIZ \[Confirm]\] ;What we'll ask them to confirm to
	MOVEM A,CSTATE+.CMRTY	;Save this as the prompt
	MOVEM P,RPARSP		;The stack restacker
GTCFM1:	MOVEI A,GTCFM1
	MOVEM A,RPROMT		;The reprompt
	MOVEI A,GTCFM2
	HRRM A,CSTATE		;The reparse
	MOVEI B,[FLDDB. .CMINI]	;Initialize the parse
	CALL .COMND		;Do it
	 NOP
GTCFM2:	MOVE P,RPARSP		;Restore stack appropriately
	MOVEI A,CSTATE		;Don't use PARSE, to catch errors
	MOVEI B,[FLDDB. .CMCFM]	;Want to confirm
	CALLRET .COMND		;.COMND will return for us

;CALL .HELP [A-Z]		! HELP command handler
;top-level command handlers should be immediately preceded by a help message

.HELP:	DOHELP <
The HELP command, typed to the DBEDIT top-level prompt gives a a
general description of the DBEDIT program.  Followed by the name of a
command, it tells how to use that particular command.

>
	NOISE <with command>
	MOVEI B,[FLDDB. .CMCFM,,,,,[
	         FLDDB. .CMKEY,,TOPTBL]] ;A top-level command or just CR
	CALL .COMND		;Parse it
	 JRST PRSERR
	CAIN C,.CMCFM		;On CR, general help
	 JRST HELP
	HRRZ B,(B)		;Get dispatch address
.HELP1:	PUSH P,B
	CALL CONFRM		;Wait for confirmation
	POP P,B
	HRROI A,1(B)		;Print appropriate message
	PSOUT%
	RET

;Help on the doc character
DOCHLP:	DOHELP <
The help character, percent sign, works much like questionmark.  Just
as you can type question mark at any point to see what your options
are, you can type the help character virtually anywhere within a
command line, followed by a carriage return.  DBEDIT will explain
briefly what is going on.  You will then have the choice of continuing
with the command or aborting it.  In fact, if you have typed various
parts of a command on separate lines, typing the help character is the
way to break out and get back to top level.

>

HELP:	MOVX A,GJ%SHT!GJ%OLD	;Try to type out long help file
	HRROI B,HLPFIL
	GTJFN%
	 ERJMP NOHELP		;Too bad
	HRRZM A,TXTJFN
	MOVX B,FLD(7,OF%BSZ)!OF%RD
	OPENF%
	 ERJMP NOHELP		;Too bad
	DO.
	  HRRZ A,TXTJFN		;Input one bufferful
	  HRROI B,MSGBUF
	  MOVN C,5*MSGLEN-1
	  SIN%
	   ERJMP ENDLP.
	  SETZ A,		;Put a zero byte at the end
	  IDPB A,B
	  HRROI A,MSGBUF	;Output one bufferful
	  PSOUT%
	  LOOP.
	ENDDO.
	SETZ A,			;Terminate partially filled buffer
	IDPB A,B
	MOVEI A,.FHSLF		;Make sure error was just eof
	GETER%
	CAME B,[.FHSLF,,IOX4]
	 JRST FTLTYO		;No, type out fatal error message
	HRROI A,MSGBUF		;Finish outputting
	PSOUT%
	MOVEI D,TXTJFN		;Clean up
	CALLRET CLOSIT

NOHELP:	SKIPE A,TXTJFN		;Release jfn if necessary
	 RLJFN%
	  NOP
	SETZM TXTJFN
	TMSG <DBEDIT is a program to manipulate Finger's database.>
	RET


;CALL .EXIT [A-Z]		! EXIT command handler
;CALL EXIT [A-Z]		! close DB and exit
;CALL STOP			! stop and restart on continuation

.EXIT:	DOHELP <
The EXIT command wraps up your DBEDIT session and returns you to the
Exec.

>
	NOISE <from DBEDIT>
	CALL CONFRM		;Wait for confirm
EXIT:	CALL BINOUT		;Close DB
STOP:	HALTF%			;Stop
	JRST DBEDIT		;Restart on continuation


;CALL .NAME [A-Z]		! NAME command handler

.NAME:	DOHELP <
The NAME command allows you to change the personal name of a user.
The name begins with the first nonblank character, may be up to
nineteen characters long, and may contain any non-control characters.
DBEDIT will display the username, the old personal name, if any, and
the new personal name you are setting, and then ask you for
confirmation.  In the present example,

        User name:          "G.GUEST"
        Old personal name:  NONE
        New personal name:  "George Guest"
	[Confirm]

At this point you would hit return to identify G.GUEST as George Guest.

>
	NOISE <user>
	MOVEI B,[FLDDB. .CMUSR]	;Want a user name
	CALL .COMND
	 JRST PRSERR
	MOVEM B,USRNUM		;Temporarily store usernumber
	HRROI A,ATMBUF		;Copy username from atom buffer
	HRROI B,USRBUF
	MOVEI C,^D39		;The official size limit
	CALL CPYBDD
	IDPB D,B
	CALL ULOOK		;Look up this user
	 RET
	NOISE <to be>
	CALL RCHEKU		;See if this person has a name yet
	IFSKP.
	  HRROI A,DEFNAM	;Our destination
	  HRRO B,USRENT		;The default we want
	  MOVEI C,BUFLEN*5-1	;Maximum number of chars
	  SETZ D,		;Or stop on null
	  SOUT%			;Put it there
	ELSE.			;No personal name
	  SETZM DEFNAM		;So we don't have a default
	ENDIF.
	MOVEI B,[FLD(.CMFLD,CM%FNC)!CM%BRK!CM%HPP!CM%DPP!CM%SDH
	         0		;Do this by hand to get funny defaulting
		 -1,,[ASCIZ \personal name\]
		 -1,,DEFNAM	;Pointer to default name
		 PERBRK]
	CALL .COMND		;Parse the personal name
	 JRST PRSERR
	HRROI A,ATMBUF		;Save away personal name
	HRROI B,PERBUF
	MOVEI C,PNMLEN*5-1	;This many (19) chars at most
	CALL CPYBDD
	IDPB D,B
	SETZM PERBUF+DIED	;No assumed last logout info
	SETZM PERBUF+R.I.P.
	CALL CONFRM		;Finish command
	HRROI B,MSGBUF
	MOVEI C,5*MSGLEN-1
NAMCFM:	TMSG <User name:          "> ;Set up message
	MOVE A,[POINT 7,USRBUF]	;Get a pointer to the user buffer
	MOVEI B,^D39		;Maximum number of chars we'll have
	DO.
	  ILDB C,A		;Get a char
	  JUMPE C,ENDLP.	;Go out on a null
	  CAIL C,"a"		;Is it .GE. a lower case a?
	   CAILE C,"z"		;And .LE. a lower case z?
	    SKPA		;Yes...
	     SUBI C,"a"-"A"	;Make it upper case
	  DPB C,A		;Drop the new char in
	  SOJG B,TOP.		;Go through all of our characters
	ENDDO.
	HRROI A,USRBUF		;Print username
	PSOUT%			;Do it
	MOVEI A,.CHDQT		;Get a double quote
	PBOUT%			;Do it
	CRLF			;Output a CRLF
	TMSG <Old personal name:  > ;Set up next line
	CALL RCHEKU		;Check if in DB
	IFSKP.
	  MOVEI A,.CHDQT	;Get a double quote
	  PBOUT%		;Start the name with it
	  HRRO A,USRENT		;Print old name
	  PSOUT%		;Do it
	  MOVEI A,.CHDQT	;Get another double quote
	  PBOUT%		;Tie off name with it
	  CRLF
	  HRRO A,USRENT		;If it's the same old thing, just quit
	  HRLI A,(<POINT 7,0>)
	  MOVE D,[POINT 7,PERBUF]
	  DO.
	    ILDB E,A		;Compare bytes until different or string ends
	    ILDB F,D
	    CAIN E,(F)
	     JUMPN E,TOP.
	  ENDDO.
	  CAIE E,(F)		;Check ending bytes
	  IFSKP.
	    TMSG <[No changes]>	;Say that they matched
	    RET			;And go back
	  ENDIF.
	ELSE.
	  TMSG <NONE>		;Doesn't have a personal name, say so
	  CRLF			;Finish off with a nice end of line
	ENDIF.
	TMSG <New personal name:  ">
	HRROI A,PERBUF		;Print new name
	PSOUT%			;Do it
	MOVEI A,.CHDQT		;Another double quote
	PBOUT%			;Output it
	CALL GETCFM		;Get confirmation
	IFSKP.
	  CALL SETUSR		;Put this change in
	   RET
	  TMSG <OK, done.>
	ELSE.
	  TMSG <OK, aborted.>	;NO, abort
	ENDIF.
	RET


;CALL .DUMP [A-Z]		! DUMP command handler

.DUMP:	DOHELP <
The DUMP command writes all the user information from the Finger
database into a text file.  You may also specify a different filename,
which may be used later to reload the Finger database if some disaster
were to befall it.

>
	NOISE <database to text file>
	MOVX A,GJ%FOU		;Create new text file
	MOVEM A,LGJFNB
	HRROI A,FINGER		;Set up defaulting
	MOVEM A,LGJFNB+.GJDEV	;FINGER:
	MOVEM A,LGJFNB+.GJNAM	;FINGER
	HRROI A,TXTEXT		;.TXT
 	MOVEM A,LGJFNB+.GJEXT
	MOVEI B,[FLDDB. .CMFIL,,,,<FINGER:>] ;Default device, rest follows
	CALL .COMND
	 JRST PRSERR
	MOVEM B,TXTJFN		;Save jfn and wait for confirmation
	CALL CONFRM
	MOVE A,TXTJFN		;Open the new text file
	MOVX B,FLD(7,OF%BSZ)!OF%WR
	OPENF%
	 ERCAL FATAL
	MOVEI A,MAXUSR		;Empty the rcusr cache
	MOVEM A,UCACHE
DMPLP0:	HLLZ D,USRLOC		;Set up user loop
	JUMPE D,DUMP4
	MOVNS D
	HRRI D,USRLOC+1
	DO.
	  MOVE A,(D)		;Grab the entry
	  MOVEM A,USRENT
	  CALL OKUSER
	  IFNSK.
	    CALL FLUSHU		;Flush this user
	    JRST DMPLP0		;And start all over again
	  ENDIF.
	  MOVE A,TXTJFN		;Write out the good user
	  HLRO B,USRENT
	  MOVEI C,0
	  SOUT%
	  HRRO B,USRENT		;Check for no personal name
	  HRLI B,(<POINT 7,0>)
	  ILDB B,B
	  IFN. B		;If none, end line, or it won't parse
	    MOVEI B,.CHTAB	;Tab
	    BOUT%
	    HRRO B,USRENT	;Write personal name
	    SOUT%
	    HRRZ B,USRENT	;Check for a date of last logout
	    SKIPN B,DIED(B)
	  ANSKP.
	    MOVEI B,.CHTAB	;Ok, tab
	    BOUT%
	    HRRZ B,USRENT	;Output date
	    MOVE B,DIED(B)
	    ODTIM%
	    MOVEI B,.CHTAB	;Tab
	    BOUT%
	    HRRZ B,USRENT	;Output tty location
	    MOVE B,R.I.P.(B)
	    MOVEI C,8
	    NOUT%
	     ERCAL FATAL
	    MOVEI C,0
	  ENDIF.
	  HRROI B,[BYTE (7) .CHCRT,.CHLFD,0]
	  SOUT%
	  AOBJN D,TOP.		;Next user
	ENDDO.
DUMP4:	MOVEI D,TXTJFN		;Finish up
	CALLRET CLOSIT

DMPLP2:	CALL FLUSHU		;Flush this user
	JRST DMPLP0		;And start all over again

;CALL .BUILD [A-Z]		! BUILD command handler

.BUILD:	DOHELP <
The BUILD command will discard the old Finger database and construct a
new one.  You may specify where the information comes from, but the
default is FINGER:FINGER.TXT.

>
	NOISE <names from>
BUILD0:	MOVX A,GJ%OLD		;Get text file
	MOVEM A,LGJFNB
	HRROI A,FINGER
	MOVEM A,LGJFNB+.GJDEV	;FINGER:
	MOVEM A,LGJFNB+.GJNAM	;FINGER
	HRROI A,TXTEXT		;.TXT
 	MOVEM A,LGJFNB+.GJEXT
	MOVEI B,[FLDDB. .CMFIL,,,,<FINGER:>]
	CALL .COMND		;Parse the file
	 JRST PRSERR
	MOVEM B,TXTJFN		;Save jfn
	CALL CONFRM
	CALL GETCFM		;Make them confirm it again
	 RET			;No confirmation?  Go back
	SKIPE BINJFN
	 CALL UNBIN		;Clean up
	MOVX A,GJ%SHT!GJ%FOU	;Get new DB file
	HRROI B,BINFIL
	GTJFN%
	 ERCAL FATAL
	MOVEM A,BINJFN		;Thawed write-only
	MOVX B,OF%WR!OF%THW
	OPENF%
	 ERCAL FATAL
	MOVE A,[BININI,,BLDLOC]	;Init the header
	BLT A,FNGSLN
	MOVE A,[TTYS,,TTYS]	;Init tty string allocator
	MOVEM A,TTYFRE
	MOVEI A,MAXUSR		;Init user table
	MOVEM A,USRLOC
	MOVE A,[USRINF,,USRINF]	;Init user record allocator
	MOVEM A,INFFRE
	MOVE A,[USERS,,USERS]	;Init user string allocator
	MOVEM A,USRFRE
	CALL LOADUS		;Process real names of users
	CALL UNLOCK		;Mark the time and sign it
	SETOM BUILTF
	MOVE A,BLDLOC		;Does it bear the official seal?
	CAMN A,SIGNET
	IFSKP.
	  CALL UNBIN
	  CALLRET BININ1
	ENDIF.
	MOVE A,[.FHSLF,,BLDPAG]	;Map core pages to file
	MOVS B,BINJFN
	HRRI B,BLDPAG
	MOVE C,[PM%CNT+340]
	PMAP%
	CALL BINOUT
	CALLRET BININ1

;CALL .LOAD [A-Z]		! loads data straight into DB

.LOAD:	DOHELP <
The LOAD command loads names from a file into the Finger database.
The new information will be merged into the existing database.  To
load in a new set of names of users.  Normally names will be read from
FINGER:FINGER.TXT.  If you wish to use some file other than the
default, you may also specify that.

>
	NOISE <names information from>
	MOVX A,GJ%OLD		;Get names file
	MOVEM A,LGJFNB
	HRROI A,FINGER
	MOVEM A,LGJFNB+.GJDEV	;FINGER:
	MOVEM A,LGJFNB+.GJNAM	;FINGER
	HRROI A,TXTEXT		;.TXT
	MOVEM A,LGJFNB+.GJEXT
	MOVEI B,[FLDDB. .CMFIL,,,,<FINGER:>]
	CALL .COMND
	 JRST PRSERR
	MOVEM B,TXTJFN		;Save jfn
	CALL CONFRM		;Make sure
	CALL LOADUS		;Load in new users
	MOVS A,BINJFN		;Establish that on disk in case of crash
	HRRI A,USRPAG
	MOVEI B,340
	UFPGS%
	 ERCAL JWARN
	RET

;CALL .VERIF [A-Z]

.VERIF:	DOHELP <
The VERIFY command finds all users not in the Finger database and flushes
nonusers.  Normally VERIFY will log unfound users in the file
FINGER:FINGER.LOG.  If you wish unfound users logged to a file other than
FINGER:FINGER.LOG, you may specify what file to use.

>
	NOISE <users and log to file>
	MOVX A,GJ%FOU		;Create new text file
	MOVEM A,LGJFNB
	HRROI A,FINGER		;Set up defaulting
	MOVEM A,LGJFNB+.GJDEV	;FINGER:
	MOVEM A,LGJFNB+.GJNAM	;FINGER
	HRROI A,LOGEXT		;.LOG
 	MOVEM A,LGJFNB+.GJEXT
	MOVEI B,[FLDDB. .CMFIL,,,,<FINGER:>]
	CALL .COMND
	 JRST PRSERR
	MOVEM B,LOGJFN		;Save jfn and wait for confirmation
	CALL CONFRM
	MOVE A,LOGJFN		;Open the new text file
	MOVX B,FLD(7,OF%BSZ)!OF%WR
	OPENF%
	 ERCAL FATAL
	MOVEI A,MAXUSR		;Start with empty rcusr cache
	MOVEM A,UCACHE
	MOVX A,RC%AWL		;Allow wildcard
VERIF4:	HRROI B,[ASCIZ "*"]	;Everyone
	RCUSR%
	TXNE A,RC%NOM!RC%AMB!RC%NMD ;No match, ambiguous, no more dirs?
	 JRST VERIF5
	MOVEM C,USRNUM		;Save the number
	HRROI A,USRBUF		;Turn the number into a string
	MOVE B,C
	DIRST%
	 ERJMP VERIF7		;No go, report error, then go on to next
	CALL ULOOK
	 JRST VERIF5		;DB unavailable, must give up
	SKIPN B,USRENT		;Was it in there?
	 JRST VERIF8		;Not in there, log it
	MOVEI A,UCACHE		;In there, add it to cache
	TBADD%
	 ERCAL FTLTYO
VERIF6:	MOVX A,RC%AWL!RC%STP	;Step to next user
	MOVE C,USRNUM
	JRST VERIF4

VERIF8:	HRRZ A,LOGJFN		;Log this one
	HRROI B,USRBUF
	MOVEI C,0
	SOUT%
	HRROI B,[BYTE (7) .CHCRT,.CHLFD,0]
	SOUT%
	JRST VERIF6

VERIF5:	MOVEI D,LOGJFN		;Close log file and go check all users
	CALL CLOSIT
	CALLRET CHKUS1

VERIF7:	CALL ERRTYO		;Print out the error msg
	TMSG < - ">
	HRROI A,USRBUF
	PSOUT%
	TMSG <"
>
	JRST VERIF6

;CALL BININ [A-C]
;opens DB, if can't find DB resorts to rebuild (asks for confirmation)

BININ:	SETZM BUILTF		;We haven't tried a rebuild
BININ1:	MOVX A,GJ%OLD!GJ%SHT	;Get the bin file
	HRROI B,BINFIL
	GTJFN%
	 ERJMP NOBIN		;Try to recover
	MOVEM A,BINJFN		;Open it
	MOVEI B,OF%RD!OF%WR!OF%THW
	OPENF%
	 ERCAL FATAL		;No recovery
	HRLZS A			;Map it in
	HRRI A,BLDPAG
	DMOVE B,[.FHSLF,,BLDPAG
		 PM%CNT!PM%RD!PM%WR!<340>]
	PMAP%
	MOVE A,BLDLOC		;Does it bear the official seal?
	CAMN A,SIGNET
	 RET
	TMSG <%Something is wrong with the database, rebuilding>
	CALL UNBIN		;Map it out
NEWBIN:	SKIPN BUILTF		;Quit if we tried this before
	IFSKP.
	  CALL OCRIF
	  TMSG <?New DB no good>
	  JRST DEATH
	ENDIF.
GETBIN:	HRROI A,[ASCIZ \Name of text source text file: \] ;Make a prompt
	MOVEM P,RPARSP		;Save push-down stack
	MOVEM A,CSTATE+.CMRTY	;Save it away
	MOVEI A,GETBIN		;Where to reprompt
	MOVEM A,RPROMT		;Save it away
	MOVEI A,GETBI0		;Reparse address
	HRRM A,CSTATE		;Save it in the CSB
	MOVEI B,[FLDDB. .CMINI]	;Initialize parse
	CALL .COMND
	 JRST PRSERR
GETBI0:	MOVE P,RPARSP		;Get push-down stack
	SETO A,			;For all JFNs
	RLJFN%			;Release them
	 ERJMP .+1
	SETZM TXTJFN		;We don't have a JFN yet
	SETZM LOGJFN
	JRST BUILD0		;Go finish off the parse

NOBIN:	TMSG <%Warning: could not get database, rebuilding>
	CALLRET NEWBIN


;CALL BINOUT [A-D]		! writes out any changes and closes file
;Takes	BINJFN/ jfn of (open) database file

BINOUT:	MOVS A,BINJFN		;Make sure updates get in
	HRRI A,BLDPAG
	MOVEI B,340
	UFPGS%
	 ERCAL JWARN
UNBIN:	MOVNI A,1		;Unmap the bin file
	DMOVE B,[.FHSLF,,BLDPAG
		 PM%CNT!PM%RD!PM%WR!<340>]
	PMAP%
	MOVEI D,BINJFN
	CALLRET CLOSIT

;CALL UNLOCK [A-D]
;writes current date and user running DBEDIT and resets writelock

UNLOCK:	CALL CLAIM
	SETZM OURLOK		;Don't force self to unlock any more
	SETOM FNGLOK		;Unlock writelock
	CALLRET CTLCOK


;CALL LOCKIT
;writelocks the database and enters current date and user running DBEDIT
;returns +1 failure
;	 +2 success

LOCKIT:	SAVEAC <A,B,C>
	MOVE A,FNGLOK		;Make a guess, is it locked?
	CAME A,[-1]		;If not locked,
	 SKIPN OURLOK		;Or if lock not our own,
	 IFSKP.
	   CALL MASTER		;Find our own identity
	   CAME A,FNGAUT	;Match writer?
	 ANSKP.			;No, somebody has overridden us
	   GTAD%		;How much time elapsed on our lock?
	   SUB A,FNGTIM
	   CAIL A,^D30		;More than 10 seconds?
	    RET			;No, just use the lock we have
OVRIDE:	   SETOM FNGLOK		;Yes, override
	 ENDIF.
	SETZM OURLOK		;We're assuming we need to get a lock
	MOVEI A,^D20		;Try up to twenty times (ten seconds)
	MOVEM A,TRIES
	JRST DOLOCK

NOLOCK:	GTAD%			;Here on writelock timeout
	SUB A,FNGTIM		;How much time elapsed on lock?
	CAIGE A,^D30		;More than 10 seconds?
	 JRST OVRIDE		;Yes, override
	CALL OCRIF		;No, quit
	TMSG <?Writelock timeout - last write by >
XACCES:	MOVEI A,.PRIOU		;Print last write information
	MOVE B,FNGAUT
	DIRST%
	 ERCAL JWARN
	TMSG <, on >
	MOVEI A,.PRIOU
	MOVE B,FNGTIM
	SETZ C,
	ODTIM%
	 ERCAL JWARN
	RET

RELOCK:	CALL CTLCOK
	MOVEI A,^D500		;Somebody already has it locked
	DISMS%			;Wait for half a sec
	SOSG TRIES		;Try, try again
	 JRST NOLOCK		;Report error and return +1, failure
DOLOCK:	CALL NOCTLC		;Don't interrupt out of this
	AOSE FNGLOK		;Try for lock
	 JRST RELOCK		;Failed, retry
	SETOM OURLOK		;Our responsibility to unlock now
	AOS (P)			;LOCKIT returns +2, success
;	CALLRET CLAIM


;CALL CLAIM [A]
;puts the current date and user running DBEDIT into database

CLAIM:	GTAD%			;Date of this update
	MOVEM A,FNGTIM
	CALL MASTER
	MOVEM A,FNGAUT
	RET


;{A} = CALL MASTER		! returns user running DBEDIT in A

MASTER:	SKIPE A,RUNNER		;Find out who's running us
	 RET
	SAVEAC <A,B,C,D>
	STKVAR <SAVEDA>
	MOVEM A,SAVEDA
	GJINF%
	MOVEM A,RUNNER
	MOVEM A,SAVEDA
	RET
	ENDSV.

;CALL ULOOK [A-B]
;looks up user, name in USRBUF, tries ten times or until DB does not change
;returns +2 success, lookup was faster than changes to DB (ever the optimist!)
;returns +1 failure, could not lookup
;Note: "success" might still mean no entry, USRENT will be 0 in this case

ULOOK:	MOVEI A,^D10		;Try 10 times
	MOVEM A,TRIES
ULOOK1:	MOVE A,FNGTIM		;Time stamp
	MOVEM A,OLDTIM
	MOVEI A,USRLOC
	HRROI B,USRBUF
	TBLUK%			;Look it up
	 ERCAL FTLTYO
	TXNE B,TL%EXM
	 SKIPA A,(A)		;Quick, grab that entry
	  SETZ A,		;Not there
	MOVEM A,USRENT		;Save entry
	MOVE A,FNGTIM		;Check time stamp
	CAMN A,OLDTIM
	 RETSKP			;Great
	SOSG TRIES		;Try again
	 JRST ULOOK1
	CALL OCRIF
	TMSG <%DB file busy - user "> ;Lose
	HRROI A,USRBUF
	PSOUT%
	TMSG <", last write by >
	CALL XACCES
	CRLF
	RET

;CALL RCHEKU
;checks current entry (USRENT) for validity and if not tries to look it up
;returns +1 failure, lookup failed
;	 +2 success, current entry valid

RCHEKU:	SAVEAC <A,B,C,D>
	MOVE A,FNGTIM		;Rechecks user
	CAMN A,OLDTIM		;DB unchanged since looked user up?
	IFSKP.
	  CALL ULOOK		;If rewritten, need to do lookup over
	   RET			;Not found
	ENDIF.
	SKIPE USRENT		;Now, +1 if no got, +2 if got
	 AOS (P)
	RET


;CALL SETUSR [A-D]
;adds user in USRBUF to DB and sets personal name to PERBUF
;uses writelock and updates all necessary variables
;returns +1 failure, could not get write lock
;	 +2 success, user added to database

SETUSR:	CALL LOCKIT
	 RET
	MOVEI A,USRLOC		;Table to look in
	MOVSI B,USRBUF		;User to look up
	TBADD%
	IFJER.
	  MOVEI A,.FHSLF	;Hope the error was "already in table"
	  GETER%
	  CAME B,[.FHSLF,,TADDX2]
	   CALL FTLTYO
	  MOVEI A,USRLOC	;Location of table again
	  HRROI B,USRBUF	;Again, user to look up (need to get entry)
	  TBLUK%		;Now look or it
	  MOVE A,(A)		;Get the entry
	  MOVEM A,USRENT	;Save it away
	  HRRZ B,USRENT		;Get address of info
	ELSE.
	  MOVEM A,USRENT	;Save the entry
	  HLRZ A,INFFRE		;Get next free record
	  HRRM A,@USRENT	;And save as right half of entry
	  ADDI A,USRRCL		;Update free record allocator
	  HRLM A,INFFRE
	  MOVE A,[POINT 7,USRBUF] ;Copy the username
	  HLRO B,USRFRE
	  HRLM B,@USRENT
	  MOVEI C,^D39
	  CALL CPYBDD
	  IDPB D,B
	  ADDI B,1		;Update the user string allocator
	  HRLM B,USRFRE
	  MOVE B,@USRENT
	  MOVEM B,USRENT
	  HRLI B,(<POINT 7,0>)
	  SETZM (B)		;Clear out the record
	  HRLI A,(B)
	  HRRI A,1(B)
	  BLT A,USRRCL-1(B)
	ENDIF.
	HRLI A,PERBUF		;Copy personal name
	HRRI A,PNAME(B)
	BLT A,PNAME+PNMLEN-1(B)
	SKIPN A,PERBUF+DIED	;Copy logout info if any
	IFSKP.
	  DMOVE C,PERBUF+DIED
	  DMOVEM C,DIED(B)
	ENDIF.
	HLRZ A,USRFRE		;Update length info
	SUBI A,USRLOC
	MOVEM A,FNGILN
	CALL UNLOCK
	RETSKP


;CALL FLUSHU [A-C]
;Takes	USRENT/ table entry

FLUSHU:	TMSG <Flushing >
	HLRO A,USRENT		;Print username
	PSOUT%
	MOVEI A,.CHTAB		;Tab
	PBOUT%
	HRRO A,USRENT		;Print personal name
	PSOUT%
	CRLF
	CALL LOCKIT
	 JRST DEATH
	MOVEI A,USRLOC		;Delete the entry
	HLRO B,USRENT		;Need to look up the entry
	TBLUK%			;Do so
	IFNJE.
	  MOVEM A,B		;Save location to delete in right AC
	  MOVEI A,USRLOC	;Where the table is again
	  TBDEL%		;Delete the entry
	   ERJMP .+1
	ENDIF.
	HRRZ A,USRENT		;Zero the personal name block
	SETZM PNAME(A)
	HRLI B,PNAME(A)
	HRRI B,PNAME+1(A)
	BLT B,PNAME+USRRCL-1(A)
	CALLRET UNLOCK


;CALL OKUSER			! optimize rcusr's using cache
;Takes	USRENT/ pointer to ostensible username
;Rets	+1, failure, not a user
;	+2, success, good user

OKUSER:	SAVEAC <A,B,C>
	MOVEI A,UCACHE		;Look up in rcusr cache
	HLRO B,USRENT
	TBLUK%
	 ERCAL FTLTYO
	TXNE B,TL%EXM
	 RETSKP			;Match, success return
	MOVX A,RC%EMO		;Don't have it, see if we should add it
	HLRO B,USRENT
	RCUSR%
	TXNE A,RC%NOM!RC%AMB
	 RET			;Not a user, failure return
	MOVEI A,UCACHE		;Good user, add to cache and return +2
	MOVE B,USRENT
	TBADD%
	 ERCAL FTLTYO
	RETSKP

;CALL LOADUS
;parses a names file, entries of the form:
;	username <delim> personal name {logout date {logout loc}} <eol>

LOADUS:	SAVEAC <A,B,C,D>
	ACVAR <FILPTR,CH,USRPTR>
	MOVE A,TXTJFN		;Open text file
	MOVEI B,OF%RD
	OPENF%
	 ERCAL FATAL
	SIZEF%			;Find out how big
	 ERCAL FATAL
	HRLZS A			;Allocate that many pages and map it
	MOVSI B,.FHSLF
	HRR B,NEXPAG
	ADDM C,NEXPAG
	HRLI C,(PM%CNT!PM%RD!PM%PLD)
	DMOVEM B,PAGINF		;Remember where it is
	PMAP%
	LSH B,9			;Make page into address
	MOVE FILPTR,B		;Use to create string pointer
	HRLI FILPTR,350700	;Advanced one anticipating backup
LODULP:	HLRZ USRPTR,USRFRE	;Pointer to user string space
	HRLI USRPTR,(<POINT 7,0>)
	MOVNI A,1		;Backtrack file pointer over 1 char lookahead
	ADJBP A,FILPTR
	MOVE B,[POINT 7,USRBUF]	;From file into buffer
	MOVEI C,^D39
	CALL CPYSTX
	IDPB D,B
	MOVNI FILPTR,1		;Move back to break char
	ADJBP FILPTR,A
	DO.
	  ILDB A,FILPTR		;Skip junk to control char
	  CAIL A," "
	   LOOP.
	ENDDO.
	JUMPE A,CHKUSR		;On zero, done
	DO.
	  ILDB A,FILPTR		;Skip spaces and tabs
	  CAIE A,.CHTAB
	   CAIN A," "
	    LOOP.
	ENDDO.
	JUMPE A,CHKUSR		;On zero, done
	MOVNI A,1		;Back up to break char
	ADJBP A,FILPTR
	MOVE B,[POINT 7,PERBUF]	;Move personal name to buffer
	MOVEI C,5*PNMLEN-1
	CALL CPYSTX
	IDPB D,B
	MOVNI FILPTR,1		;Back up to break char
	ADJBP FILPTR,A
	DO.
	  ILDB A,FILPTR		;Skip junk to control char
	  CAIL A," "
	   LOOP.
	ENDDO.
	CAIE A,.CHCRT		;If line ends, put entry into DB
	 CAIN A,.CHLFD
	  JRST LODUS9
	JUMPE A,LODU10		;Maybe file ends
	DO.
	  ILDB A,FILPTR		;Skip spaces and tabs
	  CAIE A,.CHTAB
	   CAIN A," "
	    LOOP.
	ENDDO.
	CAIE A,.CHCRT		;Check for line end
	 CAIN A,.CHLFD
	  JRST LODUS9
	JUMPE A,LODU10		;Check for file end
	MOVNI A,1		;Back up to significant char
	ADJBP A,FILPTR
	MOVEI B,0
	IDTIM%			;Input logout time
	IFJER.
	  TMSG <?Bad logout time in FINGER.TXT - >
	  CALL ERRMSG
	  JRST DEATH
	ENDIF.
	MOVEM B,PERBUF+DIED	;Save it
	MOVNI FILPTR,1		;Back up
	ADJBP FILPTR,A
	DO.
	  ILDB A,FILPTR		;Skip junk until control char
	  CAIL A," "
	   LOOP.
	ENDDO.
	CAIE A,.CHCRT		;Check for eol or eof
	 CAIN A,.CHLFD
	  JRST LODUS9
	JUMPE A,LODU10
	DO.
	  ILDB A,FILPTR		;Skip spaces and tabs
	  CAIE A,.CHTAB
	   CAIN A," "
	    LOOP.
	ENDDO.
	CAIE A,.CHCRT		;Check for eol or eof
	 CAIN A,.CHLFD
	  JRST LODUS9
	JUMPE A,LODU10
	MOVEI C,1		;Sign, assume positive
	CAIE A,"-"
	IFSKP.
	  MOVNI C,1		;Negative
	  ILDB A,FILPTR		;Next digit
	ENDIF.
	CAIL A,"0"		;Make sure digit
	 CAIL A,"8"
	 IFNSK.
	   TMSG <?Garbage in FINGER.TXT while reading a tty number>
	   JRST DEATH
	 ENDIF.
	MOVEI B,-"0"(A)		;Start sum off right
	DO.
	  ILDB A,FILPTR
	  CAIL A,"0"		;Bounds check next char
	   CAIL A,"8"
	    EXIT.
	  IMULI B,8		;Accumulate number
	  ADDI B,-"0"(A)
	  LOOP.
	ENDDO.
	IMUL B,C		;Multiply by sign
	MOVEM B,PERBUF+R.I.P.
	SKPA
	DO.
	   ILDB A,FILPTR	;Skip to eol or eof
	  CAIE A,.CHCRT
	   CAIN A,.CHLFD
	    SKPA
	     JUMPN A,TOP.
	ENDDO.
	SKPA
LODUS9:	 ILDB A,FILPTR		; skip blank lines
	CAIE A,.CHCRT
	 CAIN A,.CHLFD
	  JRST LODUS9
LODU10:	CALL SETUSR		; put this guy in
	 JRST DEATH
	LDB A,FILPTR		; check if reached eof
	JUMPN A,LODULP
;	CALLRET CHKUSR


;CALL CHKUSR [A-D]		! go through user table and flush nonusers

CHKUSR:	MOVEI D,TXTJFN
	CALL RMOVIT
CHKUS1:	MOVEI A,MAXUSR		;Start with empty rcusr cache
	MOVEM A,UCACHE
CHKUS2:	HLLZ D,USRLOC		;Set up user loop
	JUMPE D,R
	MOVNS D
	HRRI D,USRLOC+1
	DO.
	  MOVE A,(D)		;Get the entry
	  MOVEM A,USRENT
	  CALL OKUSER		;Make a reasonable effort to find it
	   JRST CHKUS3		;Not a user, flush from DB and restart loop
	  AOBJN D,TOP.
	ENDDO.
	CALL LOCKIT		;Done, write length of user part of DB
	 JRST DEATH
	HLRZ A,USRFRE
	SUBI A,USRLOC
	MOVEM A,FNGILN
	CALLRET UNLOCK		;Wrap it all up neatly

CHKUS3:	CALL FLUSHU		;Not a user, flush from DB and restart loop
	JRST CHKUS2

;CALL RMOVIT (D) [A-C]		! releases temporary pages and closes file
;Takes	D/ address of jfn of file to close

RMOVIT:	MOVNI A,1		;Unmap pages no longer needed
	DMOVE B,PAGINF
	HRRZM B,NEXPAG		;Deallocate pages
	PMAP%
;	CALLRET CLOSIT


;CALL CLOSIT (D) [A]		! close file and release jfn
;Takes	D/ address of jfn of file to close

CLOSIT:	HRRZ A,(D)
	CLOSF%
	 ERCAL JWARN
	SETZM (D)
	RET
	ENDAV.

;CALL CPYBDD (A-C) [D]		! bounded string copy, ends on zerobyte
;Takes	A/ src string
;	B/ dst string
;	C/ max chrs to xfer

CPYBDD:	TLC A,-1		;TOPS20 byte pointers
	TLCN A,-1
	 HRLI A,(<POINT 7,0>)
	TLC B,-1
	TLCN B,-1
	 HRLI B,(<POINT 7,0>)
	SKPA
	DO.
	   IDPB D,B		;Deposit good byte
	  ILDB D,A		;Load next byte
	  SKIPE D		;Stop on null
	   SOJGE C,TOP.		;Update count and maybe stop
	ENDDO.
	MOVEI D,0		;Might need nullbyte
	RET


;CALL CPYSTX (A-C)		! bounded string copy, ends on ctrl chr
;Takes	A/ src string
;	B/ dst string
;	C/ max chrs to xfer

CPYSTX:	TLC A,-1		;TOPS20 byte pointers
	TLCN A,-1
	 HRLI A,(<POINT 7,0>)
	TLC B,-1
	TLCN B,-1
	 HRLI B,(<POINT 7,0>)
	SKPA
	DO.
	   IDPB D,B		;Deposit good byte
	  ILDB D,A		;Load next byte
	  CAIL D," "		;Stop on control char
	   SOJGE C,TOP.		;Update count and maybe stop
	ENDDO.
	MOVEI D,0		;Might need nullbyte
	RET


;CALL OCRIF [A-B]		! puts out CRLF unless already at LM

OCRIF:	MOVEI A,.PRIOU		;Cursor position as vert,,horiz
	RFPOS%
	TRNN B,-1		;Ok only if all RH bits 0
	 RET
	CRLF			;If okay to do it, do it

;CALL OFILE (A-C)
;Takes	A/ jfn
;	B/ dest ptr
;	C/ count
;Gives	A/ updated jfn
;	B/ updated dest ptr
;	C/ updated count

OFILE:	JUMPE A,R
	STKVAR <SAVEDB,SAVEDC>
	SAVEAC <A,B,C>
	MOVEM B,SAVEDB
	MOVEM C,SAVEDC
	EXCH A,B		;Switch pointer and jfn
	MOVEI C,0
	JFNS%
	MOVE D,A		;Save new ptr
	MOVE B,SAVEDB		;Get old ptr
	CALL SUBBP		;Count chars
	CAMLE A,SAVEDC		;Bounds check
	IFSKP.
	  EXCH A,SAVEDC		;Great, reduce count by that much
	  SUBM A,SAVEDC
	  MOVEM D,SAVEDB	;Updated ptr
	ELSE.
	  MOVN A,SAVEDC		;Overflow, output exactly right number
	  ADJBP A,SAVEDB	;Update old byte ptr by that many
	  MOVEM A,SAVEDB		
	  SETZM SAVEDC		;Say buffer full
	ENDIF.
	RET
	ENDSV.

;Routine to compute the difference of two byte pntrs in chars
;C(A) = new pntr
;C(B) = old pntr

SUBBP:	MOVEI C,(A)
	SUBI C,(B)		;Diff in words
	IMULI C,5		;Chars
	LDB A,[360600,,A]	;Get residues
	LDB B,[360600,,B]
	SUBM B,A		;Result to A
	IDIVI A,7		;# of chars
	ADD A,C			;Combine result
	RET			;Done # chars in A

;CALL GETCTC [A-C]		! make sure we can trap ^C during critical code

GETCTC:	MOVEI A,.FHSLF		;Clear interrupts
	CIS%
	RPCAP%			;Read caps
	TXNN B,SC%CTC		;Can we enable ^C?
	 JRST GTCTC1
	TXON C,SC%CTC		;Yes, do so unless already done
	 EPCAP%
;	CALLRET CTLCOK		! ^C ok


;CALL CTLCOK [A-B]		! allow ^C out of DBEDIT
;CALL NOCTLC [A-B]		! disallow ^C out of DBEDIT

CTLCOK:	TDZA B,B		;Clear all terminal interrupts
NOCTLC:	 MOVX B,1B<.TICCC>	;Set terminal interrupt mask
	MOVEI A,.FHSLF
	STIW%
	RET


GTCTC1:	MOVNI A,1		;Fetch .JIBAT into C
	HRROI B,C
	MOVEI C,.JIBAT
	GETJI%
	 ERCAL FATAL
	CAMN C,[-1]		;If it's a batch job, recover
	 JRST CTLCOK
	TMSG <?You must allow DBEDIT to trap control-C>
	JRST DEATH


;CALL KLOCK			! undo writelock

KLOCK:	SAVEAC <A,B,C,D>	;Yup, better get rid of the lock, at any rate
	SKIPN BINJFN		;Do we even have the file?
	 JRST CTLCOK		;Naw, so what's the worry?  untrap ^C
	MOVE A,FNGLOK
	CAME A,[-1]		;If not locked,
	 SKIPN OURLOK		; or if lock not our own,
	  JRST CTLCOK		;  just make sure not trapping ^C
	CALL MASTER		;Find our own identity
	CAME A,FNGAUT		;Match writer?
	 JRST CTLCOK		;No, somebody has overridden us, no ^C trap
	CALLRET UNLOCK		;It's us, better unlock it



;CALL FATAL			! Fatal, ?error, jsys, and pc
;CALL FTLTYO			! Fatal, ?error and pc
;CALL JWARN			! Nonfatal, ?error, jsys, and pc
;CALL ERRTYO			! Nonfatal, ?error and pc
;CALL ERRMSG			! Nonfatal, error and pc

FATAL:	POP P,ERRPC		;Grab the address of our caller
	PUSH P,ERRPC		;Put it back
	SUB P,[FAT,,0]		;Artificially inflated stack
	CALL JERR		;Print the error, jsys, and PC
	ADD P,[FAT,,0]		;De-inflate the stack
DEATH:	SUB P,[FAT,,0]		;Artificially inflated stack
	CALL KLOCK		;Kill writelock if any
	ADD P,[FAT,,0]		;De-inflate the stack
	HALTF%			;Stop
	TMSG <?Can't continue>	;No way, Jay
	JRST DEATH


FTLTYO:	POP P,ERRPC
	PUSH P,ERRPC
	CALL ERTYO2
	JRST DEATH


JWARN:	POP P,ERRPC		;Grab the address of our caller
	PUSH P,ERRPC		;Put it back
	SUB P,[FAT,,0]		;Artificially inflated stack
	CALL JERR		;Print the error, jsys, and PC
FATRET:	ADD P,[FAT,,0]		;De-inflate the stack
	RET			;Go back


ERRTYO:	POP P,ERRPC		;Grab the address of our caller
	PUSH P,ERRPC		;Put it back
ERTYO2:	SUB P,[FAT,,0]		;Artificially inflated stack
	CALL ERRQ		;Print a ?
ERTYO1:	CALL SYSERR		;Print the error
	JRST FATRET		;De-inflate the stack and go back


ERRMSG:	POP P,ERRPC		;Grab the address of our caller
	PUSH P,ERRPC		;Put it back
	SUB P,[FAT,,0]		;Artificially inflated stack
	JRST ERTYO1		;Print the error, PC, fix stack, return


;CALL ERRQ			! empty esout to get CRLF and ?

ERRQ:	PUSH P,A		;Print CRLF ? and nothing else
	HRROI A,ZERO
	ESOUT%
	POP P,A
	RET


;CALL SYSERR			! print system error

SYSERR:	SAVEAC <A,B,C,D>
	MOVEI A,.PRIOU
	HRLOI B,.FHSLF
	MOVEI C,0
	ERSTR%
	 SKPA
	  NOP
	RET


;CALL JERR			! print ?error, jsys, and pc
;takes	ERRPC/ pc+2 of jsys

;CALL PCTYO			! print pc
;takes	ERRPC/ pc+1

JERR:	SAVEAC <A,B,C,D>	;Type out the jsys
	SOS ERRPC		;Back up extra to point at jsys
	CALL ERRQ		;Print a ?
	CALL SYSERR		;Print the error
	MOVEI A," "
	PBOUT%
	MOVE SYM,ERRPC		;Get PC
	MOVE SYM,-1(SYM)	;Get jsys which lost
	CALL SYMOUT		;Print it
	SKPA
PCTYO:	 SAVEAC <A,SYM>		;Type out the PC
	TMSG < at >
	MOVE SYM,ERRPC		;Point PC back 1
	MOVEI SYM,-1(SYM)
	CALL SYMOUT
	MOVEI A,.PRIIN		;Flush input buffer
	CFIBF%
	RET
	

;CALL SYMOUT (SYM) [A-E]	! Clever symbol table lookup routine.
;Takes	SYM/ desired symbol
;(For details, read "Introduction to DECSYSTEM-20 Assembly Language
; Programming", by Ralph Gorin, published by Digital Press, 1981.)

SYMOUT:	SETZB C,E		;No current program name or best symbol
	MOVE D,.JBSYM		;Symbol table pointer
	HLRO A,D
	SUB D,A			;-count,,ending address +1
SYMLUP:	LDB A,[400400,,-2(D)]	;Symbol type
	JUMPE A,NXTSYM		;Program names are uninteresting
	CAILE A,2		;0=prog name, 1=global, 2=local
	 JRST NXTSYM		;None of the kind we want
	MOVE A,-1(D)		;Value of the symbol
	CAME A,SYM		;Exact match?
	IFSKP.
	  MOVE E,D		;Yes, select it
	  JRST FNDSYM
	ENDIF.
	CAML A,SYM		;Smaller than value sought?
	 JRST NXTSYM		;Too large
	SKIPE B,E		;Get best one so far if there is one
	 CAML A,-1(B)		;Compare to previous best
	  MOVE E,D		;Current symbol is best match so far
NXTSYM:	ADD D,[2000000-2]	;Add 2 in the left, sub 2 in the right
	JUMPL D,SYMLUP		;Loop unless control count is exhausted
	SKIPN D,E		;Did we find anything helpful?
	 JRST OCTSYM

; Found an entry that looks close.  See if it really is and if so use it

FNDSYM:	MOVE A,SYM		;Desired value
	SUB A,-1(D)		;Less symbol's value = offset
	CAIL A,200		;Is offset small enough?
	 JRST OCTSYM		;No, not a good enough match
	MOVE D,E		;Get the symbol's address
	MOVE A,-2(D)		;Symbol name
	TLZ A,740000		;Clear flags
	CALL SQZTYO		;Print symbol name
	MOVE B,SYM		;Get desired value
	SUB B,-1(D)		;Less this symbol's value
	JUMPE B,R		;If no offset, don't print "+0"
	MOVEI A,"+"		;Add + to the output line
	PBOUT%
	SKPA
OCTSYM:	 MOVE B,SYM		;Here if PC must be in octal
	MOVEI A,.PRIOU		;And copy numeric offset to output
	MOVEI C,^D8
	NOUT%
	 HALT .-1		;Bleah
	RET


;CALL SQZTYO (A) [B]		! output a squoze
;Takes	A/ radix50 symbol
;This is a more or less standard routine.  Snarfed from TELNET.MID (Crispin,
;1981).

SQZTYO:	IDIVI A,50		;Divide by 50
	PUSH P,B		;Save remainder, a character
	SKIPE A			;If A is now zero, unwind the stack
	 CALL SQZTYO		;Call self again, reduce A
	POP P,A			;Get character
	ADJBP A,[350700,,[ASCII/ 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ.$%/]]
	LDB A,A			;Convert squoze code to ASCII
	PBOUT%
	RET

END <EVECL,,EVEC>
