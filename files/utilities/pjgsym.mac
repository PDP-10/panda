; -*-MACRO-*-
; <SUBSYS>PJGSYM.MAC.17, 10-Apr-85 17:15:50, Edit by GERGELY

	COMMENT `

	This module is a set of useful subroutines and symbols used in nearly
	all the programs written by Peter J. Gergely, DREA.  The following MIC
	or CTL file should be used in building the universals and the rel
	files.

		@macro
		*PJGSYM=PJGSYM
		*PJGSYM=TTY:,DSK:PJGSYM
		*REL==1		; Build the relocatable, REL==0 is the default.
		*^Z^Z^Z
		

This computer  module is  the property  of THE  CANADIAN DEPARTMENT  OF
NATIONAL DEFENCE.  It shall be used only for purposes authorized by  the
department.  It shall  not be  disclosed to  a third  party without  the
author's written permission.


	Queries and comments should be sent to:

		Peter J. Gergely
		Defence Research Establishment Atlantic
		P.O. Box 1012
		Dartmouth, N.S.
		Canada B2Y 3Z7

		Phone:  1(902) 426-3100 


Copyright (C) by the authors.

This software is the sole property of the author and may not be copied
by any means without the expressed written consent of the author.

There is  no  expressed or  implied  warranty that  this  software  is
suitable for its intended  or any other use,  or that it will  perform
any function whatsoever.
`

IFNDEF REL,<REL==0>		; The default is to generate the UNIVERSAL

IFE REL,<
	UNIVERSAL PJGSYM
IF1 <PRINTX Building the Universal File for the P.J. Gergely symbols.>
	EXTERNAL CPYSTR,CHRSCN,GETNAM,STRLEN,SPCOUT,TERCOL,SUBBP,NOTBAD,BAD
>
IFN REL,<
	TITLE PJGSYM
	SUBTTL Copyright (C) 1983, by D.N.D, Canada and  Peter J. Gergely
IF1 <PRINTX Building the Relocatable File for the P.J. Gergely symbols.>
>

;	Necessary External Files

	SEARCH MONSYM,MACSYM
	SALL

;	Flags and registers

;	PJGACS -- Defines some of the symbols used by this module

DEFINE PJGACS <
FF==0
A==1
B==2
C==3
D==4
E==5
J==6
Q==16
P==17					; Push down register
>
	PJGACS				; Define the ACs


;	PJGSTG -- Installs the required storage in the user's program.  It
; defines PJGSTK to set up the stack properly as defined by the call to
; PJGSTG.  The calling sequence is as follows:
;             	
;              +-----Who edited (0--DEC, 1--DEC SWS, 6--DREA)
;              | +-----Program Version
;              | |  +-----Minor Version (a letter)
;              | |  |  +-----The edit number
;              | |  |  |  +-----The length of the Push down stack (PDLST)
;              | |  |  |  |    +-----The start address
;              | |  |  |  |    |     +-----The Re-entry address
;              | |  |  |  |    |     |          +-----Your name
;	       V V  V  V  V    V     V          V		
;	PJGSTG(6,1,101,1,200,START,REENT,<Peter J. Gergely>)


DEFINE PJGSTG (VWHO<6>,VPROG<1>,VMINOR<101>,VEDIT<1>,$PDLEN<200>,
	       $START,$REENT,$AUTH) <
PDLST::	BLOCK $PDLEN			; The push down stack

DEFINE PJGSTK <
	MOVE P,[IOWD $PDLEN,PDLST]	; Push down stack declaration
>

;
;	Entry vector
;

EVECT::	JRST $START		; Starting location
	JRST $REENT		; Re-entry location
	BYTE	(3)VWHO(9)VPROG(6)VMINOR(18)VEDIT
LEVEC==.-EVECT

AUTHOR::			; Author string
IFB <$AUTH>,<	BLOCK 1>
IFNB <$AUTH>,<	POINT 7,[ASCIZ $AUTH]>
RSCNAM::BLOCK 10		; The program name read by rescan
RSCPTR::Z			; The pointer location in RSCNAM
.RSCNF::Z			; Nonzero if something in rescan buffer
CPYRAI::Z			; Nonzero, to upper case input
LSTERR::Z			; The last error encountered in BAD
PRGNAM::BLOCK 20		; The true name of this program
PRGNA0::BLOCK 50		; The full name of this program

>				; END OF PJGSTG

;	STPROG -- Default program starter.
;		Does a RESET%, initialize the stack, get the name of the
; program, initialize the command package, and check the rescan buffer.

DEFINE STPROG <
	RESET%				; Close files etc.

	PJGSTK				; Create stack

	CALL GETNAM			; Get the real name of the program

	CALL PRGINI			; Get user specific initialization

	CALL CMDINI			; Initialize COMND JSYS

	CALL CHRSCN			; Check the rescan buffer
>

;	Macros for writing strings to memory

;
;	MMSG -- Puts the message given into the location specified by AC1.
; The byte counts can be specified as the second argument (defaulting to 0).
; A terminating byte may be given as the third argument (defaulting to 0).
; This macro uses more than one line of code and cannot be jumped
;

DEFINE MMSG ($MSG,$COUNT<0>,$TBYTE<0>) <
	HRROI B,[ASCIZ \$MSG\]
	MOVEI C,$COUNT
	MOVEI D,$TBYTE
	CALL CPYSTR
>

;
;	QMSG -- Puts the message (second argument) given into the location
; specified by the address in the first argument (Always starts at the
; beginning of the word.
; The byte counts can be specified as the second argument (defaulting to 0).
; A terminating byte may be given as the third argument (defaulting to 0).
; This macro uses more than one line of code and cannot be jumped.
;

DEFINE QMSG ($ADDR,$MSG,$COUNT<0>,$TBYTE<0>) <
	HRROI A,$ADDR
	HRROI B,[ASCIZ \$MSG\]
	MOVEI C,$COUNT
	MOVEI D,$TBYTE
	CALL CPYSTR
>

;	SUBBP.  -- Subtracts the first byte pointers from the second.  The
; byte points are the contents at the given addresses.  The number of
; characters are returned in AC1.

DEFINE SUBBP. ($bp1,$bp2) <
	MOVE A,$BP2		; Get byte pointer 2
	MOVE B,$BP1		; Get byte pointer 1
	CALL SUBBP		; Call the subroutine that does it
>
	MOVM A,A		; Take the absolute value

;	CMD Package:  Additional macros

;	FNTYP. -- Returns the function type of the last parse in AC.

DEFINE FNTYP. (AC)<
	LDB AC,[POINT 9,.CMFNP(C),8]
>

;	FLDDA. -- Similar to FLDDB. but uses real addresses in the HELP and
; DEFAULT messages.

DEFINE FLDDA. (TYP,FLGS,DATA,HLPA,DEFA,LST)<
	..XX==<FLD(TYP,CM%FNC)>+FLGS+<0,,LST>
   IFNB <HLPA>,<..XX=CM%HPP!..XX>
   IFNB <DEFA>,<..XX=CM%DPP!..XX>
	..XX
   IFNB <DATA>,<DATA>
   IFB <DATA>,<0>
   IFNB <HLPA>,<HLPA>
   IFB <HLPA>,<IFNB <DEFA>,<0>>
   IFNB <DEFA>,<DEFA>>

;	FLDAK. -- Similar to FLDBK. in MACSYM, except using adresses
;  for the help and default messages

DEFINE FLDAK. (TYP,FLGS,DATA,HLPA,DEFA,BRKADR,LST)<
	..XX==<FLD(TYP,CM%FNC)>+FLGS+<Z LST>
   IFNB <HLPA>,<..XX=CM%HPP!..XX>
   IFNB <DEFA>,<..XX=CM%DPP!..XX>
   IFNB <BRKADR>,<..XX=CM%BRK!..XX>
	..XX
   IFNB <DATA>,<DATA>
   IFB <DATA>,<0>
   IFNB <HLPA>,<HELPA>
   IFB <HLPA>,<IFNB <DEFA'BRKADR>,<0>>
   IFB <DEFA>,<IFNB <BRKADR>,<0>>
   IFNB <DEFA>,<DEFA>
   IFNB <BRKADR>,<BRKADR>
   >

;	Macros for defining keywords in tables for use with the CMD package
;
;		These were originally defined in the CMD package as T and TA.
; I changed them to KWD and KWA resp. and later added the code for invisible,
; NOR, and general data bits.
;

;	KWD -- Defines an ordinary keyword

DEFINE KWD (WORD,ADDRES) <
IFB <ADDRES>,<	[ASCIZ /WORD/],,.'WORD>
IFNB <ADDRES>,<	[ASCIZ /WORD/],,ADDRES>
>

;	KWA -- macro for defining abbreviations.  They are also set invisible.

DEFINE KWA (TEXT,ADDR)<
IFNB <ADDR>,<%%X==ADDR>
IFB <ADDR>,<%%X==.'TEXT>
	[	CM%INV!CM%ABR
		ASCIZ /TEXT/],,%%X
>

;	KWI -- Macro for defining invisible keywords in tables.

DEFINE KWI (TEXT,ADDR)<
IFNB <ADDR>,<%%X==ADDR>
IFB <ADDR>,<%%X==.'TEXT>
	[	CM%INV
		ASCIZ /TEXT/],,%%X
>

;	KWN -- Macro for defining 'do not recognize' keywords in tables.

DEFINE KWN (TEXT)<
	[	CM%NOR
		ASCIZ /TEXT/],,0
>

;	KWX -- Macro for generalized keywords.

DEFINE KWX (TEXT,ADDR,DATB)<
IFNB <ADDR>,<%%X==ADDR>
IFB <ADDR>,<%%X==.'TEXT>
IFNB <DATB>,<
	[	DATB
		ASCIZ /TEXT/],,%%X
>
IFB <DATB>,<	[ASCIZ /TEXT/],,%%X
>
>


;	The RELOCATABLE CODE starts here

IFN REL,<

;	The following symbols must be defined by the user who may do so
; conveniently with the PJGSTG macro.

	EXTERNAL PDLST		; Pushdown stack
	EXTERNAL EVECT		; The default entry vector
	EXTERNAL AUTHOR		; Byte pointer to the author string
	EXTERNAL RSCNAM		; Program name read by rescan
	EXTERNAL RSCPTR		; The pointer location in RSCNAM
	EXTERNAL .RSCNF		; Nonzero, something in rscan buffer
	EXTERNAL CPYRAI		; Nonzero, to upper case input
	EXTERNAL PRGNAM		; The true name of this program
	EXTERNAL PRGNA0		; The full name of this program
	EXTERNAL LSTERR		; The last error encountered in BAD
	

;	CPYSTR -- Memory to memory write using ILDB and IDPB's
;	
;	CALLING SEQUENCE:
;		A/ Destination byte pointer
;		B/ Source byte pointer
;		C/ Count of number of bytes, or 0
;		D/ Byte (right justified) on which to terminate output
;		CALL CPYSTR
;
;	The effects of C being non-zero are the same as that for the SOUT
; JSYS.  An additional word, CPYRAI, is available:  Nonzero, implies to raise
; the string being copied.
;
;	RETURN+1: Always
;
;		With A,B containing the updated byte pointers
;		 and C containing the number of characters left, if pertinent.

DEFINE UPCASE (AC) <			;; Make sure a character is uppercase
	JRST [	TRNE AC,100
		 TRZ AC,40
		JRST .+1]
>

CPYSTR::SAVEAC <E>			; Save AC5
	HLRZ E,A			; Check if AC1 is of the form -1,,ADDR
	CAIN E,-1
	 HRLI A,440700			; Yes then change it
	HLRZ E,B			; Check if AC2 is of the form -1,,ADDR
	CAIN E,-1
	 HRLI B,440700			; Yes then change it
	JUMPE C,CPYSZR			; Contents of AC3 determine which loop
	JUMPG C,CPYSPO
	JRST CPYSNE

CPYSZR:	ILDB E,B			; Get a byte from the source
	SKIPE CPYRAI
	 UPCASE E			; Uppercase if the user requested it
	IDPB E,A			; Write it to the destination
	CAME E,D			; Compare if it what we want
	 JRST CPYSZR			; No then continue loop
	SKIPE E				; Skip on a null
	 JRST CPYSTP
	SETO E,				; Decrease the byte pointer for 
	ADJBP E,A			; a null
	MOVE A,E
	JRST CPYSTP

CPYSPO:	ILDB E,B			; Get a byte from the source
	PUSH P,E			; Save the byte for later
	SKIPE CPYRAI			; Upper case it ?
	 UPCASE E			; Uppercase the character
	IDPB E,A			; Write it to the destination
	POP P,E				; Restore the old value
	CAME E,D			; Compare if it what we want
	 SOJG C,CPYSPO			; If we haven't exceed the count
	SKIPE E				; Skip on a null
	 JRST CPYSTP
	SETO E,				; Decrease the byte pointer for 
	ADJBP E,A			; a null
	MOVE A,E
	JRST CPYSTP

CPYSNE:	ILDB E,B			; Get a byte from the source
	SKIPE CPYRAI			; Upper case it ?
	 UPCASE E			; Uppercase the character
	IDPB E,A			; Write it to the destination
	AOJL C,CPYSNE			; If we haven't exceed the count
	
CPYSTP:	SETZM CPYRAI			; Always set it to no raise
	RET

;	GETNAM -- Gets the current name of the .exe file
;
;	No input nor output requirements.  The program name is put at
; the storage variable PRGNAM.  The full name is stored in PRGNA0.
; Both are zero if this procedure has failed.
;	RETURN+1:  Always
;

GETNAM::SAVEAC <J>
	MOVE A,[.FHSLF,,<GETNAM>_-^D9]	; Get the page number of
	SETZM PRGNAM			; Zero the destination
	SETZM PRGNA0			; and the program name
	MOVE J,A			; Save the page count
GETNM0:	MOVE A,J			; Get the page count
	RMAP%				; myself and get the handle
	 ERJMP [RET]			; Done on error
	CAME A,[-1]			; Nonexistent so skip
	CAMN A,J			; No change then continue
	 JRST [	AOS J			; and increment page and 
		JRST GETNM0]		; continue
	HLRZ B,A			; put the handle in B
	SETZ D,				; No prefix
	HRROI A,PRGNAM			; Dump it into PRGNAM
	MOVX C,FLD(1,JS%NAM)		; Want just the filename
	JFNS%
	 ERCAL NOTBAD
	HRROI A,PRGNA0
	MOVE C,[111110,,1]		; Put the full filename in here
	SETZ D,
	JFNS%
	 ERCAL NOTBAD
	RET


;	CHRSCN -- Checks the rescan buffer for anything in it
;
;	No input nor output requirements.
;
;	RETURN+1:  Always
;
;	The flag .RSCNF is set nonzero if there is something in the rescan
; buffer.

CHRSCN::MOVX A,.RSINI			; Read the rscan buffer if anything
	RSCAN%				
	 ERCAL BAD
	SKIPN A				; If nothing, then skip
	 JRST NORSCN			
	HRROI A,RSCNAM			; Set up a pointer for the rscan name
	MOVEM A,RSCPTR			; Here is where to put it

READ:	MOVX A,.CTTRM			; Read from the controlling terminal
	BIN%				; A character at a time
	 ERJMP NORSCN			; If an error then we have nothing
	CAIN B,40			; If a space then read file
	 JRST RDFILE
	CAIN B,15			; If CR or LF then done,else read more
	 JRST NORSCN
	CAIN B,12
	 JRST NORSCN
	MOVE A,RSCPTR			; Get the pointer to the rscan program
					; name storage
	BOUT%				; Store the byte in it
	 ERCAL BAD
	MOVEM A,RSCPTR			; Save the contents of the pointer
	JRST READ
;
RDFILE: MOVE A,RSCPTR			; Make the word an asciz format
	SETZM B				; by outputting a null to the first
	BOUT%				; work picked up by rescan
	 ERCAL BAD
	HRROI A,RSCNAM			; Byte pointer to the first word
					; in the rescan buffer
	HRROI B,PRGNAM			; Byte pointer to the program filename
	STCMP%				; Compare the two strings
	 ERCAL BAD
	MOVEM A,RSCNAM
	JUMPE A,DONRSC			; If the same then exit
NORSCN: HRROI A,[ASCIZ//]		; Clear the rescan buffer
	RSCAN%
	 ERCAL BAD
	SETZM .RSCNF			; Say nothing in the rescan buffer
	RET

DONRSC:	SETOM .RSCNF			; Say we found something in the rescan
	RET				; buffer

; JSYS error handler.
;
;		LSTERR is set to the value of the last error.

;	NOTBAD -- The error does not matter

NOTBAD::RET				; Used if don't want an error message

;	BAD -- A serious error has occurred.  Notify user of location

BAD::	SETZM LSTERR			; Say there was no last error
	MOVEI A,.FHSLF
	GETER%
	 ERJMP NOTBAD
	HRRZM B,LSTERR			; Save the last error

	MOVEI A,.CTTRM			; O/P a question mark
	FMSG <
? Error #>
	MOVEI A,.CTTRM			; Output the error number
	MOVE B,LSTERR
	MOVEI C,10
	NOUT%
	 ERCAL NOTBAD
	MOVEI A,.CTTRM			; and a separator
	FMSG < -- >

	MOVEI A,.CTTRM			; Routine to handle
	HRRZ B,LSTERR
	HRLI B,.FHSLF			; JSYS errors
	MOVX C,0
	ERSTR%
	 CALL [	MOVEI A,.CTTRM
		FMSG <Undefined Error Number>
		RET]			; Undefined error number
	 CALL NOTBAD			; Ignore the JFN problem
	MOVX A,.CTTRM			; Routine to handle
	FMSG <
? Instruction >

	POP P,B				; Get address
	PUSH P,B			; We may want it again
	HRLI B,0			; Clear LHS
	SUBI B,2			; Locn of error
	PUSH P,B			; Save this for the moment
	HLRZ B,@B
	MOVX C,NO%MAG!10
	NOUT%
	  ERCAL NOTBAD
	MOVEI A,.CTTRM
	FMSG <,,>
	MOVEI A,.CTTRM
	POP P,B
	PUSH P,B
	HRRZ B,@B
	MOVX C,NO%MAG!10
	NOUT%
	  ERCAL NOTBAD

	MOVEI A,.CTTRM
	FMSG < at location >

	MOVEI A,.CTTRM
	POP P,B				; Get bat the location
	MOVEI C,10
	NOUT%
	  ERCAL NOTBAD
	MOVEI A,.CTTRM
	FMSG <
>
	HALTF%				; That's it.
	HRRZ A,EVECT
	JRST (A)

repeat 0,<
; IN CASE OF MULTIPLE ERRORS.
BADBAD:	TMSG <
? Error within an error.>
	HALTF% 
	HRRZ A,EVECT
	JRST (A)
>

;	STRLEN -- Calculates the length of a string in memory
;
;	Input arguments
;		AC1 -- Byte pointer to the starting location of a
;		       string which ends in a null byte.
;
;	CALL STRLEN
;
;	RETURN+1	Always with:
;			AC1 -- Updated byte pointer
;			AC2 -- Number of characters in string
;
;	Written by:  Peter J. Gergely, DREA
;
STRLEN::MOVEI B,0			; Zero out the character
					; counter
	TLC A,-1
	TLCN A,-1
	HRLI A,440700		; If left half -1, it's now 440700
STRLP:	ILDB C,A			; Get a byte
	SKIPG C				; Not the null byte then skip
	 RET
	AOJ B,				; Increment the character count
	JRST STRLP			; Back to the loop

;	SPCOUT -- Output C spaces to the output designator in A

SPCOUT::TLC A,-1
	TLCN A,-1
	HRLI A,440700		; If left half -1, it's now 440700
	SKIPN C				; ASSUMES A AND C ARE SET
	 RET
	TXNE A,.LHALF
	IFSKP.
	 DO.
	  MOVEI B," "
	  BOUT%
	   ERCAL NOTBAD
	  SOJG C,TOP.
	 ENDDO.
	ELSE.
	 DO.
	  MOVEI B," "
	  IDPB B,A		; OUTPUT A SPACE
	  SOJG C,TOP.
	 ENDDO.
	 SETZ B,
	 PUSH P,A		; Return the proper byte pointer
	 IDPB B,A
	 POP P,A
	ENDIF.
	RET

;	TERCOL -- Calculate the column number a string would terminate on
;
;	Input Arguments
;		AC1 -- Byte pointer to the start of a string in memory
;
;	CALL TERCOL
;
;	RETURN+1	Always with:
;			AC1 -- Updated byte pointer
;			AC2 -- The column which we ended on
;
;	Written by:  Peter J. Gergely, DREA
;
TERCOL::MOVEI B,0			; Zero the column count
	TLC A,-1
	TLCN A,-1
	HRLI A,440700			; If left half -1, it's now 440700
TCOLLP:	ILDB C,A			; Get a byte
	SKIPN C				; If null then done and go to TCLEND
	 RET
	CAIN C,15			; If a carriage return
	 JRST [	SETZM B			; Set the count to zero ELSE SKIP
		JRST TCOLLP]
	CAIE C,"V"-100			; Ignore a Control-V
	CAIN C,12			; If a linefeed
	 JRST TCOLLP			; No action needed
	CAIE C,11			; If not a tab, increment count
	 JRST [	AOJ B,			; and continue looping
		JRST TCOLLP]
	IDIVI B,10			; Divide column count by 8
	AOJ B,				; Add one to get the next tab location
	IMULI B,10			; Mult. by 8 gets that location
	JRST TCOLLP			; Continue the loop

TCLEND:	MOVEI C,0			; Write a null byte at the end 
	IDPB C,B
	RET


;	SUBBP -- Subtracts the second byte pointer from the first resulting in
; the number of characters between them
;
;
;	CALL:	A/	BYTE POINTER 1
;		B/	BYTE POINTER 2
;	RETURN:	+1, always
;		A/	1-2 characters

SUBBP::	TLC A,-1
	TLCN A,-1
	HRLI A,440700		; If left half -1, it's now 440700
	TLC B,-1
	TLCN B,-1
	HRLI B,440700		; Same for other pointer
	MOVEI C,1
	ADJBP C,B		; Put second pointer incremented in C
	IBP A			; Now neither pointer is "44xx00,,"
	MULI A,5		; Multiply pointer by bytes per word
	SUBI B,-4(A)		; B holds character address
	MULI C,5		; Do same to other pointer
	SUBI D,-4(C)
	SUB B,D			; Calculate difference
	HRRE A,B		; Return answer in A.
	RET

>				; End of REL non-zero
	END
