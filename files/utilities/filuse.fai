;ACCT:<UTILITIES.SUBSYS>FILUSE.FAI.2, 10-Oct-80 17:36:33, Edit by Y.YDUJ
;use create date instead of write date, per user request.
; ACCT:<UTILITIES>FILUSE.FAI.3,  6-Sep-80 01:12:50, Edit by Y.YDUJ
; output size last, per request.
;SX:<Y.YDUJ>FILUSE.FAI.33, 30-Jul-80 01:35:39, Edit by Y.YDUJ
;and don't type ^V
;SX:<Y.YDUJ>FILUSE.FAI.14, 30-Jul-80 00:11:57, Edit by Y.YDUJ
;make it output the size in a prettier format.
;SX:<Y.YDUJ>FILUSE.FAI.5, 24-Jul-80 21:56:39, Edit by Y.YDUJ
;Clean up rscan so if it bombs it flushes buffer instead of shipping
; it back to the exec.
;SX:<Y.YDUJ>FILUSE.FAI.2, 24-Jul-80 21:39:00, Edit by Y.YDUJ
;DON'T clear my input buffer, you cretin!  Also, define and use
; CALL and RET.
;PS:<J.JQJOHNSON>FILUSE.FAI.3,  6-Sep-79 11:14:50, Edit by J.JQJOHNSON
;clean up rscan slightly
;<SOURCES.CUSP>FILUSE.FAI.9,  6-Sep-79 00:09:21, Edit by W.WOODRUFF
;Allow the filename to be read from the rescan buffer
;<W.WOODRUFF>FILUSE.FAI.14,  8-Aug-79 11:18:14, Edit by W.WOODRUFF
;default extension changed from EXE to *
;ACCT:<SOURCES.CUSP>FILUSE.FAI.4, 14-Oct-78 10:18:28, Edit by JQJ
;output directory string sometimes
;ACCT:<SOURCES.CUSP>FILUSE.FAI.0, 1-Sep-78 13:50:20, Edit by J.JQJOHNSON
;control for length of time file has existed

title filuse
search monsym

;This hack compliments of Daniel S. Blom

flag=0
a=1
b=2
c=3
d=4
t=5
t1=t+1
pt=10
fpt=11
jfn=12				;indexable file handle
r=13
p=17

opdef call [pushj p,]
opdef ret [popj p,]

base==100000
.next==0			;link pointer
.size==1
.count==2			;number of writes,,number of accesses
.rate==3			;rate of access
.name==4			;file name
fb.tim==.fbcrv-.fbbyv
fb.cnt==.fbcnt-.fbbyv
fb.siz==0			;IS .fbbyv.
	subttl impure storage
loc 1000
head:	0
curtad:	0
fljfns:	0

buflen==40
rscbuf:	block	buflen
pdlen==10
pdl:	block pdlen

fdbblk:	block 6			;block for returning fdb info
occoc:	block 2			;old ccoc word.
jfnblk:	gj%old+gj%fns+gj%xtn+gj%cfm+gj%ifg+.gjall
	.priin,,.priou
	0			;device
	0			;directory
	-1,,[asciz/*/]		;file name
	-1,,[asciz/*/]		;file type
	repeat 3,<0>		;protection,account,jfn to use
	3
	repeat 2,<0>		;no destination string needed.
	0			;place for CTL/R buffer pointer
rscont:	block 1

	subttl main program

start:	reset
	move p,[iowd pdlen,pdl]
	gtad			;get current time for reference
	movem a,curtad
	movei a,.priou
	RFCOC
	dmovem b,occoc
	tlz c,(3b9)		;don't print ^V
	sfcoc
	 erjmp .err
	movei	a,.rsini	;for first rscan call
	rscan
	 erjmp	.err1
	jumpe a,gtfil
pblp:	pbin			;get first byte
	cain	a,12		;end of buffer
	 jrst	gtfil		;yes, prompt for the filename 
	cain	a,40		;space
	 jrst gtfil1		;bypass prompt.
	jrst	pblp		;haven't reached the end or the filename


gtfil:	hrroi a,[asciz/Files: /]
	movem a,jfnblk+.gjrty
	psout
gtfil1:	movei a,jfnblk
	movei b,
	gtjfn
	 erjmp [call flush	;flush rscan buffer.
		call .errs	;print error string
		hrroi a,[asciz/...Try again
/]
		psout
		jrst gtfil]
.proc:	move c,[byte (3)0,0,1,1,1,0,0 (15)js%tmp!js%paf!js%psd]
				;def: "name.type.gen;T	12"
	tlne a,(gj%dev!gj%unt)	;wild card in device?
	 tlo c,(1b2)		;yes.  output device string
	tlne a,(gj%dir)		;wild card in directory?
	 tlo c,(1b5)		;yes.  output directory name
	movem c,fljfns		;save flags for later
	movei fpt,base
	setzm head
	movem a,jfn		;save indexable handle
build:	hrrz b,jfn
	hrroi a,.name(fpt)
	move c,fljfns
	jfns
	setz b,
	idpb b,a
	hrrzi d,1(a)		;get addr of next word
	hrrz a,jfn
	move b,[6,,.fbbyv]	;get creation d&t, # of refs, pages.
	movei c,fdbblk		;store in a
	gtfdb
	hrrz t,fdbblk+fb.siz	;get size
	movem t,.size(fpt)
	move t,curtad
	sub t,fdbblk+fb.tim	;how long has it been around?
	hrrz b,fdbblk+fb.cnt
	hrrzm b,.count(fpt)	;save it
	camg t,[1,,0]		;been around longer than a day?
	 jrst [	setzm .rate(fpt)	; no.  Assume no info.
		jrst build1]
	mul b,[=30*1000000]
	div b,t			;compute rate of use per month
	movem b,.rate(fpt)
build1:	movei r,head
	move a,.rate(fpt)	;sort by rate, using SLOW insertion sort
	call insert		;put in right place in the list
	move fpt,d		;place next addr in fpt
	move a,jfn		;get next file indexable
	gnjfn			;file handle list
	 erjmp list		;no more
	jrst build
list:	caie a,gnjfx1	;no more "error"?
	 erjmp .err
	movei r,head
	call print
	hrroi a,[byte (7) 15,12]
	psout
	call flush
	movei a,.priou
	dmove b,occoc
	sfcoc
	 erjmp .err
	haltf
	jrst gtfil		;try for another

insrt1:	caml a,.rate(t)		;in decreasing order by rate
	 jrst insrt2
	hrrzi r,.next(t)
insert:	hrrz t,.next(r)
	jumpn t,insrt1
insrt2:	hrrzm t,.next(fpt)
	hrrzm fpt,.next(r)
	ret

print:	hrrz r,(r)
	jumpe r,[ret]
	hrroi a,[asciz\
   name		    # refs,     rate/month,	size.
\]
	psout
print1:	hrroi a,.name(r)
	psout
	movei a,.priou		;see if name too long.
	rfpos
	hrrzs b			;get column number
	cail b,22
	 jrst [hrroi a,[asciz/
/]
		psout
		setz b,
		jrst .+1]
	subi	b,22
	movei	a,40		;else space out to 25th column
	pbout
	aojl	b,.-1
	movei a,.priou
	hrrz b,.count(r)
	move c,[no%lfl+8b17+=10]
	nout
	 erjmp .err
	move b,.rate(r)
	move c,[no%lfl+=13b17+=10]
	nout
	 erjmp .err
	movei a,11
	pbout
	pbout
	movei a,.priou
	move b,.size(r)
	movei c,=10
	nout
	 erjmp .err
	hrroi a,[asciz/ pgs
/]
	psout
	hrrz r,(r)
	jumpn r,print1
	ret

flush:	movei a,.rscnt
	RSCAN
	 erjmp .err1
	move b,a
	jumpe a,[ret]
flush1:	PBIN
	sojn b,flush1
	ret


.err:	call flush
.err1:	call .errs		;print the string
	haltf
	jrst .-1

.errs:	movei a,.priou
	hrloi b,400000
	movei c,0
	erstr
	 erjmp .erer
	 erjmp .erer
	ret

.erer:	hrroi a,[asciz/?Error within an error.
/]
	psout
	haltf
	jrst .-1

asuppr
end start
