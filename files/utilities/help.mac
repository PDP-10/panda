;<UTILITIES>HELP.MAC.65,  3-Dec-85 12:01:07, Edit by MRC
; Flush Stanfordisms
;[SU-SIERRA.ARPA]PS:<SU-UTILITIES>HELP.MAC.64, 27-Jun-85 10:59:16, Edit by PIERRE
; Turn off printing of usernames in logging at LOTS
;<SU-UTILITIES>HELP.MAC.63, 12-Jun-85 15:07:31, Edit by FMF
; Bump subtopic limit to ^D500
;<SU-UTILITIES>HELP.MAC.62,  7-Jun-85 15:53:46, Edit by FMF
; Don't print out abbreviations in help * (but only if tb%abr defined)
;<SU-UTILITIES>HELP.MAC.61, 10-Feb-85 16:52:21, Edit by BILLW
; Score now uses binfil and logfil.  Score will use GSB mods.
; Fix GSB mods - GPARS0: had identical code for all 3 cases.
;<SU-UTILITIES>HELP.MAC.55, 18-Sep-84 20:41:58, Edit by JPBION
; GSB only:
;   Change parse in COMND jsys if there are subtopics - handle subtopics first
;<SU-UTILITIES>HELP.MAC.54, 31-Oct-83 18:51:55, Edit by LOUGHEED
; Fix ugliness in logging help success/failure by not logged in users
;<SU-UTILITIES>HELP.MAC.53, 30-Oct-83 01:28:01, Edit by LOUGHEED
; Set up defaults for binfil and logil for various SU sites
;<SU-UTILITIES>HELP.MAC.52, 30-Oct-83 01:19:39, Edit by LOUGHEED
; Incorporate SUMEX changes
;<SU-UTILITIES>HELP.MAC.51,  6-Sep-83 22:23:12, Edit by LOUGHEED
;<SU-UTILITIES>HELP.MAC.50,  6-Sep-83 22:18:47, Edit by LOUGHEED
;  If logging, log successes to HLP:HELP.SUCCESSES
;<SU-UTILITIES>HELP.MAC.48,  6-Sep-83 22:05:08, Edit by LOUGHEED
; Setting location LOGFIL to -1 will cause HELP to log keyword failures
;  in HLP:HELP.FAILURES.  Useful for diagnosing weak points of help system.
;<SU-UTILITIES>HELP.MAC.47, 10-Aug-83 22:48:25, Edit by LOUGHEED
;<SU-UTILITIES>HELP.MAC.34, 10-Aug-83 22:16:46, Edit by LOUGHEED
; Convert to MACRO assembly for export
;<SU-UTILITIES>HELP.FAI.33, 12-Jul-83 15:57:25, Edit by STELLA
; Increase nump (number of help subtopics allowed)
;<SU-UTILITIES>HELP.FAI.31, 14-Mar-83 13:12:26, Edit by KRONJ
; Make "More?" subcommands confirm
; Never ask for subtopics if there are none
;ACCT:<SU-UTILITIES>HELP.FAI.30, 28-Jan-83 13:38:52, Edit by K.KRONJ
; Parse HELP command names before topic names
; Add TOPIC command so can type any topic name
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.28, 28-Jul-82 14:19:12, Edit by K.KRONJ
;add GOTO command, clean up a little
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.23, 19-Sep-81 14:24:42, Edit by B.BOMBADIL
;BINFIL is -1 if we're using the binary keyword table in HLP:HELP.BIN
;after parse of arbitrary field (.CMFLD), check for wildcard * or %
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.21, 10-Aug-81 23:36:58, Edit by B.BOMBADIL
;add parentheses as allowed keyword characters
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.20, 10-Aug-81 20:42:39, Edit by B.BOMBADIL
;allow space, ampersand, and quote in keywords
;flush code to add CTRL-V to keywords, code to play with tty mode words
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.11,  2-Aug-81 16:05:50, Edit by B.BOMBADIL
;Disallow space as a break character in subtopic keywords
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.10,  2-Aug-81 14:12:41, Edit by B.BOMBADIL
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.9,  2-Aug-81 14:01:29, Edit by B.BOMBADIL
;More? defaults to YES, Subtopic? defaults to EXIT
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.7, 19-Jul-81 00:45:24, Edit by B.BOMBADIL
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.6, 18-Jul-81 21:04:25, Edit by B.BOMBADIL
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.5, 18-Jul-81 19:29:26, Edit by B.BOMBADIL
;Add QUIT option to "More? " prompt
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.4, 18-Jul-81 16:53:00, Edit by B.BOMBADIL
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.3, 18-Jul-81 16:36:38, Edit by B.BOMBADIL
;fix logic and coding problems with the "More? " prompting
;ACCT:<UTILITIES.SUBSYS>HELP.FAI.2, 17-Jul-81 20:56:24, Edit by B.BOMBADIL
;fix parsing bug
;<B.BOMBADIL>HELP.FAI.1, 17-Jul-81 14:42:04, Edit by B.BOMBADIL

Title HELP - Get Help on a Topic
Subttl Definitions and Storage
Search Monsym, Macsym
.require sys:macrel
asuppress
sall

comment	\		HELP Edit History

S. Gross, Stanford DSL, 5 Jan 77 -- rewrite to use JSYS's to full advantage.
JQ Johnson, LOTS, July 1977 -- structured files, with each frame a page
JQ Johnson, LOTS, January 1978 -- Rel 3 compatibility, cleaner user interface
Bob Kanefsky, LOTS, Fall 1979 -- added keyword code, helpmaint routines,
	miscellaneous improvements
Kirk Lougheed, LOTS, Summer 1981 -- entire rewrite for better interaction
	with EXEC; split program into HELP and HELPMAINT for ease of use.

\

vmajor==5			;we are version 5
vminor==0			;no minor version yet
vedit==36			;first edit
vcust==4			;last edit at Stanford


a=1				;temporary accumulators
b=2
c=3
d=4
t=5				;temp AC used in main parse loop
curpag=6			;current page in the help file
p=17				;stack pointer


pdlen==200			;length of pushdown stack
buflen==50			;buffer length
nump==^D500			;number of help subtopics we can handle

toppag==100			;put topic keywords on this page
topadr==toppag*1000		;starting address of topic keywords

tabpag==200			;map keyword table to this page
tabadr==tabpag*1000		;starting address of keyword table

bufpag==300			;map help file to this page
bufadr==bufpag*1000		;starting address of mapped help file


pdlist:	block pdlen		;pushdown stack 
atmbuf:	block buflen		;atom buffer for COMND%
cmdbuf:	block buflen		;command buffer for COMND%
tmpbuf:	block buflen		;temporary storage buffer
tophdr:	block 1			;header of TOPLST
toplst:	block nump		;table of help subtopics
paglen:	block nump		;length of a page, in bytes
pagptr:	block nump		;pointer to start of a page
hlpjfn:	block 1			;jfn of current help file
binjfn:	block 1			;jfn of HELP.BIN
tablef:	block 1			;-1 if help keyword table is already mapped in
onepag:	block 1			;-1 if we have only one page in the help file
badprs:	block 1			;where to go on a failing parse

;COMND% argument block

csb:	0			;.cmflg - reparse address, flags
	.priin,,.priou		;.cmioj - I/O jfns
	-1,,[asciz/HELP>/]	;.cmrty - pointer to prompt
	-1,,cmdbuf		;.cmbfp - holds whole command being assembled
	-1,,cmdbuf		;.cmptr - pointer to next field
	buflen*5-1		;.cmcnt - number of bytes in CMDBUF
	0			;.cminc - count of unparsed characters
	-1,,atmbuf		;.cmabp - pointer to atom buffer
	buflen*5-1		;.cmabc - number of bytes in ATMBUF
	0			;.cmgjb - address of GTJFN% block

Subttl Macro Definitions

;EMSG
;pretty print a general error message and halt

define emsg (str) <
	 jrst [ hrroi a,[asciz/str/]
	 	call eprint
		jrst stopit ]
>

;WMSG
;pretty print a warning message
;executes as one instruction, saves all AC's

define wmsg (str) <
	call [  call acsave
		hrroi a,[asciz/str/]
		jrst eprint ]
>

;JMSG
;informative error messages for JSYS failure returns

define jmsg (str) <
	 erjmp [ ifdif <str> <> <hrroi a,[asciz/str/]>
		 ifidn <str> <> <hrroi a,[asciz/JSYS error/]>
		 jrst perr ]
>

;PMSG
;handle parsing errors

define pmsg (str) <
	 jrst [ hrroi a,[asciz/str/] ;;pointer to a descriptive string
		call eprint	;;print the message
		jrst @badprs ]	;;go to appropriate failing parse address
>


;NOISE
;print some noise words

define noise (str) <
	movei a,csb		;;a/ command state bock
	movei b,[flddb. .cmnoi,,<-1,,[asciz/str/]>] ;;b/ function code
	comnd%			;;parse a noise word
	txne a,cm%nop		;;parse went okay?
	 pmsg <Invalid noise word> ;;no, some error
>

;KEYWRD - keyword table entry

define keywrd (key,addrss) <
	ifnb <addrss>,<define ..addr<addrss>>
	ifb <addrss>,<define ..addr<.'key>>
	[asciz/key/],,..addr
	purge ..addr
>

Subttl START, REENTER, and PARSE

;entry vector

evec:	jrst start		;START address
	jrst reent		;REENTER address
	byte(3)vcust(9)vmajor(6)vminor(18)vedit ;version data
evecl==.-evec

;BINFIL - flag for use of HELP.BIN, 1 if using it, 0 otherwise

..binit==1			;default is on

binfil:	exp ..binit

;LOGFIL - flag for use of HELP.FAILURES. 1 if using it, 0 otherwise

..logit==0			;default is off

logfil:	exp ..logit		;default is off


;table of names we expect when invoked from the EXEC

xectab:	xwd xeclen,xeclen
	keywrd (HELP,0)		;Our name and a dummy routine address
xeclen==.-xectab-1

;START
;normal EXEC startup point
;we parse "HELP (ON SUBJECT)"

start:	reset%			;clean up the world
	move p,[iowd pdlen, pdlist] ;set up stack
	movei a,.rsini		;a/ initialize RSCAN buffer
	rscan%			;make RSCAN buffer available
	 jmsg <Could not obtain JCL from EXEC> ;this error shouldn't happen
	jumpe a,reent		;nothing in RSCAN buffer, try REENTER point
	move a,[xwd .priin, .nulio] ;jfns for reading from RSCAN buffer
	movem a,csb+.cmioj	;set them in the command state block
	movei a,stopit
	movem a,badprs		;set up failing parse address
	movei a,execp
	hrrm a,csb+.cmflg	;set up reparse address
	hrroi a,[asciz//]
	movem a,csb+.cmrty	;null prompt
	movei a,csb
	movei b,[flddb. .cmini]
	comnd%			;set up COMND% jsys for first parse
execp:	movei a,csb
	movei b,[flddb. .cmkey,,xectab]
	comnd%			;parse whatever invoked us
	txne a,cm%nop		;success?
	 jrst reent		;no, try the reentry point
	noise (ON SUBJECT)	;some noise
	jrst parse		;join common code


;REENT
;here on the REENTER command

reent:	reset%			;clean up the world
	move p,[iowd pdlen, pdlist] ;set up stack
	move a,[xwd .priin, .priou] ;jfns for reading from the tty
	movem a,csb+.cmioj	;set them in the command state block
	movei a,reentp
	hrrm a,csb+.cmflg	;set up reparse address
	hrroi a,[asciz/HELP>/]
	movem a,csb+.cmrty	;set up prompt
	movei a,reent
	movem a,badprs		;set up failing parse address
	movei a,csb
	movei b,[flddb. .cmini]
	comnd%			;initialize COMND% jsys
reentp:	move p,[iowd pdlen,pdlist] ;reset stack at reparse address
	jrst parse		;join common code


;PARSE
;parse a help keyword, a token, or a return
;
; keyword - go do a table lookup for the relevant file 
; token - print out list of keywords and halt
; confirm - print HLP:HELP.HLP, or general help message if can't find file
; unknown keyword - if FOO, then look for HLP:FOO.HLP before failing

parse:	call lodkey		;load in the keyword file
	movei a,csb
	movei b,[flddb. .cmcfm,cm%sdh,,<RETURN for general help>,,<[
	        flddb. .cmtok,cm%sdh,<-1,,[asciz/*/]>,<* to see all topics>,,<[
		 flddb. .cmkey,,tabadr,,,<[
		 flddb. .cmfld,cm%sdh]>]>]>]
	skipn tabadr		;skip if we indeed have a keyword table
	movei b,[flddb. .cmcfm,cm%sdh,,<RETURN for general help>,,<[
		 flddb. .cmfld,cm%sdh,,<a specific help topic>]>]
	comnd%
	ldb d,[point 9,(c),8]	;get type of field parsed
	cain d,.cmcfm
	 jrst hlphlp		;"HELP <RETURN>"
	cain d,.cmtok
	 jrst hlpall		;"HELP *"
	cain d,.cmkey
	 jrst hlpkey		;"HELP <keyword>"
	jrst hlpnot		;"HELP <bad keyword>"



;Here when we found a bad keyword in the RSCAN buffer
;
;HLPNOT
;returns +1/always
;
;HLPNT1
;returns +1/wildcard (* or %) parsed
;	 +2/failure, no help available
;	 +3/success, ready for jump to GOFIL

hlpnot:	call hlpnt1		;do actual checking
	 jrst hlphl0		;wildcards, go give help
	 jrst hlpnox		;failed, complain
	jrst gofil		;else go read the file

hlpnt1:	hrroi a,atmbuf
	hrroi b,tmpbuf
	call movstr		;save invalid string in TMPBUF
	call confrm		;wait for confirmation
	ldb a,[point 7,tmpbuf,6] ;get first byte
	caie a,"%"
	cain a,"*"		;did some turkey type a wildcard?
	 ret			;yes, give +1 return
	aos (p)			;any return now is +2 or +3
	hrroi a,tmpbuf		;a/ pointer to bad keyword
	call chkfil		;check if file exists, but isn't a keyword
	 ret			;nothing there, give +2 return
	movem a,hlpjfn		;found a file! Save the jfn...
	skipe binfil		;skip if not using the binary file
	wmsg <Help topic not in keyword table, contact the staff
>				;complain
	retskp			;give +3 success return


hlpnox:	hrroi a,[asciz/No help available for "/]
	call eprint
	hrroi a,tmpbuf
	psout%
	hrroi a,[asciz/".
 Type "HELP ?" for a partial list of topics, "HELP *" for a complete list./]
	skipn binfil		;skip if using the binary file
	hrroi a,[asciz/".
 Type "HELP ?" for a list of help topics./]
	psout
	call logbad		;maybe log a bad keyword
	jrst @badprs		;back to top of the loop

;LOGBAD - log a bad keyword in a file
;LOGSUC - log a good keyword in a file
;Assumes keyword is in TMPBUF
;Used to find out the deficiences of the HELP file system
;Returns +1 always

logbad:	skipa b,[-1,,[ASCIZ/HLP:HELP.FAILURES/]] ;name of keyword failure file
logsuc:	 hrroi b,[asciz/HLP:HELP.SUCCESSES/]	;name of keyword success file
	skipn logfil		;are we doing keyword analysis?
	 ret			;no, just return
	stkvar <logjfn>		;storage for log file jfn
	movx a,gj%old!gj%sht	;file must exist
	gtjfn%			;get a handle on the file
	 erjmp r		;no file, do nothing
	movem a,logjfn		;save jfn
	movx b,<fld(7,of%bsz)!of%app>	;7 bit bytes, append access
	openf%			;open the file
	ifjer.
	  move a,logjfn		;failure, get back jfn
	  rljfn%		;release it
	   nop			;ignore an error
	  ret			;quietly exit
	endif.
	hrroi b,tmpbuf		;point to keyword
	setz c,			;end on a nul
	sout%			;print bad keyword
	 erjmp logba1		;some error
	movei b,.chtab
	bout%			;tab over
	 erjmp logba1
	seto b,
	setz c,
	odtim%			;print time and date
	 erjmp logba1
	movei b,.chtab
	bout%			;tab over again
	 erjmp logba1
	push p,a		;save jfn
	gjinf%			;get job information
	move b,a		;get usernumber into place
	move a,0(p)		;get back jfn
	dirst%			;print username
	 nop			;ignore an error
	pop p,a			;restore jfn
	hrroi b,[asciz/
/]				;end with a crlf
	setz c,
	sout%			; ...
	 erjmp logba1		;some error
logba1:	move a,logjfn		;retrieve jfn in case of failure
	closf%			;close the file
	 nop			;ignore an error
	ret			;return to caller

;HLPHLP
;here when we found "HELP <RETURN>" in the RSCAN buffer

hlphlp:	movx a,gj%sht+gj%old	;a/ want an old file
	hrroi b,[asciz/HLP:HELP.HLP/] ;b/ file specificatin
	gtjfn%			;get a jfn on the file
	 erjmp hlphl0		;not there, print out internal message
	movem a,hlpjfn		;save the jfn
	jrst gofil		;join file parsing routine

hlphl0:	tmsg<
     To get help on a particular subject, say commands, type "help
commands" to the @ prompt, then press the RETURN key.  The HELP
program will then type out some information on that topic and may
list a menu of related subtopics for you to read.>
	hrroi a,[asciz/
     For a partial list of HELP topics, type "help ?".  For a
complete list, type "help *", then press RETURN.  If the list of help
topics is more than one screen long, you may have to type CTRL-Q to
view the succeeding screens.
/]
	skipn binfil		;we don't have * if no binary keyword file
	hrroi a,[asciz/
	A complete list of HELP topics can be had by typing "help ?".
If the list of help topics is more than one screen long, you may have
to type CTRL-Q to view the succeeding screens.
/]
	psout%
	jrst @badprs

;HLPALL
;here when we found "HELP *"
;never returns

hlpall:	call confrm		;wait for confirmation
	movei a,tabadr		;a/ address of keyword table
	call tbprnt		;pretty print the table
	jrst @badprs

;Here when we recognized the keyword
;
;HLPKEY
;takes b/ offset into TABADR of the current keyword
;returns +1 always
;
;HLPKY1
;returns +1/failure, help file for topic does not exist
;	 +2/success, set up for jrst to gofil

hlpkey:	call hlpky1		;do the actual work
	 emsg (<HELP file for that topic does not exists, contact the staff>)
	jrst gofil		;else go read the file

hlpky1:	push p,b		;don't clobber this AC
	hrroi a,atmbuf		;string is now in atom buffer
	hrroi b,tmpbuf		;copy it into the temporary buffer
	call movstr		; ...
	call logsuc		;do logging if we're interested in keywords
	call confrm		;wait for confirmation
	pop p,b			;restore table offset
	move c,b		;save a copy of the table offset for HLPKEX
	movx a,gj%sht+gj%old	;a/ want an old file
	hrro b,(b)		;b/ pointer to file name
	gtjfn%			;get a jfn on the file
	 erjmp hlpkex		;not there?  try again
	movem a,hlpjfn		;save the jfn
	retskp			;give +2 success return

;here if we couldn't find the file the keyword table pointed to

hlpkex:	move a,c		;a/ table offset
	call tbptr		;return a pointer to the keyword in A
	call chkfil		;is there a file "HLP:KEYWORD.HLP"?
	 ret			;bad
	movem a,hlpjfn		;save the jfn
	wmsg (<HELP keyword table inaccurate, contact the staff>)
	retskp			;else give +2 success return


Subttl GOFIL - Munch on a HELP file

;GOFIL
;here to read in and parse a help file
;takes	HLPJFN - jfn of current help file
;never returns

gofil:	call opnfil		;read in file and release jfn
	call prsfil		;parse the file and build a keyword table
	setz curpag,		;we start with the first page
	call print		;print page
	skipe onepag		;skip if we have more than one page
	 jrst stopit		;otherwise just shut us down
gparse:	move t,[xwd [asciz/More? /],yesno] ;for prompting for run-on pages
	skiple paglen(curpag)	;if we have more coming for this page
	 jrst gpars1		;then go ahead with the more prompt
	hlrz a,tophdr		;do we have any subtopics?
	jumpe a,stopit		;no, so just quit
gpars0:	move t,[xwd [asciz/Choose a subtopic (? for help): /], comnds]
gpars1:	hlrom t,csb+.cmrty	;set up command pointer
	move a,[xwd .priin, .priou]
	movem a,csb+.cmioj
	movei a,grepar
	hrrm a,csb+.cmflg
	movei a,gparse
	movem a,badprs		;set failing parse address
	movei a,csb
	movei b,[flddb. .cmini]
	comnd%
	txne a,cm%nop
	 emsg (Unable to reinitialize command parser)
grepar:	move p,[iowd pdlen,pdlist] ;reset stack in case of reparse
	movei a,csb		;a/ address of command state blockk
	hrrz b,t		;b/ address of function block
tparse:	comnd%			;parse something
	txne a,cm%nop		;parse went okay?
	 pmsg <Unrecognized topic or command, type ? for help>
	hrr b,(b)		;get keyword data into place
	hrrzs c			;fetch address of FDB we parsed
	cain c,topics		;was it a topic keyword?
	 jrst [	call confrm	;yes, confirm
		jrst gpage ]	;and go to it
	call (b)		;something else, go do it
	jrst gparse		;done, go get next command


;print the page corresponding to the keyword

gpage:	move curpag,b		;set up current page number
	call print		;print it
	jrst gparse		;done, go get next command

;here if we typed QUIT in response to "More? "

flush:	call confrm		;finish parsing
	hlrz a,tophdr		;do we have any subtopics?
	jumpe a,stopit		;no, so just quit
	jrst gpars0		;yes, flush subtopic and prompt for another


;labelled function desciptor blocks

comnds:	fldbk. (.cmkey,,hlpcmd,<a HELP command,>,<EXIT>,brkmsk,topics)
topics:	fldbk. (.cmkey,,tophdr,<Choose a topic,>,,brkmsk)
yesno:	flddb. (.cmkey,,yncmd,,<YES>)

;keyword break mask - allow space, ampersand, quote, parentheses in keywords
;50 is open paren, 51 is close paren

brkmsk:	brmsk. (keyb0.,keyb1.,keyb2.,keyb3.,<< >,<&>,<'>,50,51>,)

;keyword table for More? prompt

yncmd:	xwd yncmdl,yncmdl
	keywrd (NO,flush)	;no, flush this topic
	keywrd (QUIT,nocmd)	;quit now
	keywrd (YES,cprint)	;yes, print the next page
yncmdl==.-yncmd-1

;HELP commands keyword table

hlpcmd:	xwd hlpcml,hlpcml
	keywrd (EXIT,quit,cm%inv) ;synonym for QUIT
	keywrd (FILE,file)	;how old and where is this file?
	keywrd (GOTO,goto)	;peruse another help file
	keywrd (HELP,help)	;help me with HELP
	keywrd (QUIT,quit)	;exit from this program
	keywrd (TOPIC,topic)	;how to type topic that conflicts w/commands
hlpcml==.-hlpcmd-1

Subttl HELP Commands

;TOPIC
;follow with a topic name
topic:	movei b,topics		;get topic FDB
	jrst tparse		;jump into parse

;QUIT
;exit from the HELP program

quit:	noise (FROM HELP)
nocmd:	call confrm
stopit:	haltf%			;shut us down
	jrst reent		;reenter if continued

;HELP
;get some help on HELP

help:	call confrm		;wait for confirmation
	hrroi a,hlpmsg		;the help message
	psout%			;print it
	ret			;return to caller

hlpmsg:	asciz/
     You can now decide which subtopic or page in this help file you wish to
view next.  If the file has named subtopics, you can select one by typing
the subtopic name, otherwise HELP will prompt you with "More? ", in which
case you can type "YES" or "NO".  Some special HELP commands are:

QUIT	   exit from HELP.  EXIT is a synonym.
HELP	   type this message
FILE	   displays the location and age of the helpfile you're now reading
GOTO	   pick a new help file
?	   types out a brief list of your options

/

;FILE
;print out information on the current help file
;returns +1 always

file:	noise (INFORMATION)
	call confrm
	tmsg <This helpfile is stored as >
	movei a,.priou		;a/ to the tty
	move b,hlpjfn		;b/ jfn of current helpfile
	movx c,js%dev!js%dir!js%nam!js%typ!js%paf ;c/ format flags
	jfns%			;print it out
	move a,hlpjfn		;a/ jfn of help file
	move b,[xwd 1,.fbwrt]	;b/ want a single word starting at .FBWRT
	movei c,tmpbuf		;c/ put it into TMPBUF
	gtfdb%			;get word from file descriptor block
	 jmsg			;some error
	tmsg <
It was last updated on >
	movei a,.priou		;a/ to the terminal
	move b,tmpbuf		;b/ time and date
	movx c,ot%fmn!ot%4yr!ot%dam!ot%spa!ot%ntm ;format flags
	odtim%			;output date last written
	tmsg < by >
	hrrz a,hlpjfn
	hrli a,.gflwr		;a/ last writer,,jfn
	hrroi 2,tmpbuf		;b/ dump user string here
	gfust%			;get last writer
	 jmsg			;some error
	hrroi a,tmpbuf		;a/ pointer to string
	psout%			;print it
	ret			;return to caller


;GOTO
;pick a different help topic

goto:	noise (HELP FILE ON)
	movei b,[flddb. .cmkey,,tabadr,,,<[
		 flddb. .cmfld,cm%sdh]>]
	comnd%			;parse topic
	ldb d,[point 9,(c),8]	;get FDB type parsed
	cain d,.cmkey		;keyword?
	 jrst goto1		;yes
	call hlpnt1		;else try random parse
	 jfcl			;treat wildcard same as trash
	 skipa			;bad, go on
	 jrst gofil		;else go read the file
	hrroi a,[asciz/No help available for "/]
	call eprint
	hrroi a,tmpbuf
	psout% 
	tmsg <".>
	jrst @badprs

goto1:	call hlpky1		;check keyword
	 pmsg <HELP file for that topic does not exists, contact the staff>
	jrst gofil		;else go read the file

Subttl PRSFIL - Parse a HELP file, looking for keywords

;PRSFIL
;scan the file, getting all label-locations for TOPLST, and building
;pagptr (start of each page) and paglen (length of each page)
;We copy labels to TOPADR because TBLUK requires asciZ strings starting
;on word boundaries.

;local accumulator usage

filptr==5			;pointer into input buffer
namptr==6			;pointer into subtopic (keyword) buffer
numpag==7			;aobjn counter for pages
count==10			;number of characters in current page

prsfil:	setzm pagptr
	move a,[xwd pagptr,pagptr+1]
	blt a,pagptr+nump-1	;clear array of page pointers
	setzm paglen
	move a,[xwd paglen,paglen+1]
	blt a,paglen+nump-1	;clear array of byte counts
	move filptr,[point 7,bufadr] ;set up file pointer
	move namptr,[point 7,topadr] ;set pointer to name buffer
	movsi numpag,-nump	;aobjn pointer for page tables
	setom onepag		;we have only one page
	movei a,nump		;initial TBLUK% header for TOPLST
	movem a,tophdr		;store it

;here to look for a keyword on the current page

prslab:	movem filptr,pagptr(numpag) ;save pointer to start of page
	setzb count,paglen(numpag) ;initial character count is zero
prsla0:	ildb a,filptr		;read a character
	jumpe a,prseof		;looks like end of the file
 	caie a,.chbsp		;labels start with BS or "<"
	cain a,"<"		;label seen?
	 jrst rdlab		;yes
	caig a,.chspc		;skip if we find an alphanumeric character
	 aoja count,prsla0	;otherwise flush blanks and control chars
	jrst rdlab4		;no label, go count chars until next page

;we have a keyword, read it into the keyword buffer

rdlab:	setzm onepag		;we have more than 
	hrli namptr,(<point 7,0>) ;set namptr to next word boundary
	aos c,namptr		;and save copy in C
rdlab0:	ildb a,filptr		;get a char in the label
	caie a,.chspc
	cain a,.chtab
	 jrst rdlab0		;flush leading spaces and tabs
	caie a,.chcrt
	cain a,.chlfd
	 jrst rdlab0		;flush leading crlfs as well
	skipa			;first nonblank character is now in A
rdlab1:	ildb a,filptr		;get a char in the label
	caie a,.chcrt		;labels end with CR or ">"
	cain a,.chlfd
	 jrst rdlab3
	cain a,">"		;end of label?
	 jrst rdlab3
rdlab2:	idpb a,namptr		;copy to labels area
	jrst rdlab1		;back for more


rdlab3:	movei a,.chnul		;a null character
	idpb a,namptr		;end with null
	movei a,tophdr		;a/ header word of table
	hrl b,c			;b/ address of string on the left
	hrr b,numpag		;...and page number on the right
	tbadd%			;add the table entry
	 jmsg (<Duplicate subtopic label, please contact the staff>)
	movem filptr,pagptr(numpag) ;save pointer to start of page
	setom paglen(numpag)	;set flag that we have a label on this page
	setz count,		;initial byte count is zero
rdlab4:	ildb a,filptr		;scan through this page,
	jumpe a,prseof		;breaking on null
	caie a,.chffd		;and formfeed
	 aoja count,rdlab4	;meanwhile counting characters
	setzm onepag		;clear the one page flag
	hrrm count,paglen(numpag) ;save page length
	aobjn numpag,prslab	;starting a new page, go parse a label
	emsg (Too many subtopics in this help file) ;oops...


prseof:	hrrm count,paglen(numpag) ;save the page length
	ret			;return to caller?

Subttl Support Routines

;PRINT
;print a page
;takes curpag/ page number of current page
;returns +1 with curpag updated

cprint:	call confrm		;finish command parse
print:	movei a,.priou		;a/ output to the terminal
	move b,pagptr(curpag)	;b/ get appropriate byte pointer
	hrrz c,paglen(curpag)	;c/ get number of bytes on that page
	movns c			;print only that number of bytes
	sout%			;print the page
	tmsg <
>				;a closing CRLF, just in case
	addi curpag,1		;increment current page number
	ret			;return to caller


;OPNFIL
;here to open, and read in the current help file
;returns +1 always

opnfil:	move a,hlpjfn		;a/ file jfn
	move b,[7b5+of%rd]	;b/ 7 bits, read access
	openf%			;open the file
	 jmsg <Unable to open help file> ;bombed
	sizef%			;get file size
	 jmsg			;some error
	skipn b			;skip if file has something in it
	 emsg <Help file is empty!> ;bomb.  Someone screwed up with this file
	move a,hlpjfn		;a/ source
	hrroi b,bufadr		;b/ address of file buffer
	movni c,5000*100	;c/ should take up to 64. page files
	sin%			;read the file in
	 erjmp .+1		;ignore eof errors
	setz c,
	idpb c,a		;ensure a null at the end of the file
	move a,hlpjfn		;a/ file's jfn
	hrli a,(co%nrj)		;don't release the jfn
	closf%			;close the file
	 jfcl			;ignore an error here
	ret			;return to caller


;CHKFIL
;check if there exists a help file on a particular topic
;given a keyword "FOO", look for "HLP:FOO.HLP"
;takes	a/ pointer to a keyword
;returns +1 no such file
;	 +2 success, with jfn in A

chkfil:	trvar <chkptr,<chkbuf,20>> ;declare local storage
	tlc a,-1
	tlcn a,-1
	hrli a,(<point 7,0>)
	movem a,chkptr		;save byte pointer to keyword
	hrroi a,[asciz/HLP:/]
	hrroi b,chkbuf
	call cpystr		;look on device HLP:
	move a,chkptr
	call cpystr		;for file "FOO"
	hrroi a,[asciz/.HLP.0/]
	call cpystr		;extension .HLP
	movei a,.chnul
	idpb a,b		;tie off string with a null\
	movx a,gj%old+gj%sht	;a/ looking for an old file
	hrroi b,chkbuf		;b/ file spec
	gtjfn%			;look for the file
	 erjmp r		;no such file
	retskp			;file exists, skip return with jfn in A


;LODKEY
;here to load the keyword table and fixup the table's pointers

lodkey:	skipe tablef		;skip if table not yet loaded in
	ret			;otherwise, just return 
	setzm tabadr		;clear the table header
	skipn binfil		;skip if we're using a binary file of keywords
	ret			;otherwise return right now
	setom tablef		;say we have loaded a table
	movx a,gj%sht+gj%old	;a/ looking for an existing file
	hrroi b,[asciz/HLP:HELP.BIN/] ;b/ file spec
	gtjfn%			;get a handle on the file
	 erjmp lodkex		;can't find the file
	movem a,binjfn		;save jfn
	move b,[44b5+of%rd]	;full word, read access
	openf%			;open the file
	 jmsg			;some error
	sizef%			;get file size
	 jmsg			;some error
	move a,binjfn		;a/ input file
	movn c,b		;c/ byte count
	move b,[point 36,tabadr] ;b/ destination
	sin%			;read in the file
	 erjmp .+1		;ignore any errors
	move a,[xwd tabadr,tabadr] ;a/ offsets
	hlrz b,tabadr		;fetch number of entries
	movns b			;negate
	movss b			;swap sides
	hrri b,tabadr+1		;b/ finish building aobjn pointer
	addm a,(b)		;fixup
	aobjn b,.-1		;loop over entire table
	ret			;return to caller

lodkex:	wmsg (<Unable to find keyword table, contact the staff>) ;complain
	ret			;return to caller



;TBPRNT
;Pretty print a TBLUK table
;takes	a/ address of base of table
;returns +1 always

;local accumulator usage

headr==5			;header of keyword table
field==6			;number of characters in a field
nfield==7			;number of fields per line

tbprnt:	call acsave		;save the accumulators
	movem a,headr		;store address of base of table
	hlrz b,(a)		;fetch number of entries in the table
	jumpe b,r		;quit now if table is empty
	movns b			;negative control count for aobjn
	hrli a,(b)		;set up the aobjn pointer
	addi a,1		;take into account the table's header word
	move d,a		;after some futzing, D is our aobjn pointer
	setom field		;initially, the longest entry is -1
tbprn0:	hrrz a,d		;a/ address of table entry
	call tbptr		;return pointer to keyword in A
	call tblen		;return string length in B
	camle b,field		;a new longest string?
	movem b,field		;yes, save it
	aobjn d,tbprn0		;loop over entire table
	andcmi field,7		;slice off some bits and round up...
	addi field,10		;...field width is (MAXLEN ANDC 7)+10
	movei a,.priou		;a/ terminal
	movei b,.morlw		;b/ get its width
	mtopr%			;read terminal width into C
	idiv c,field		;calculate number of fields per line
	skipg nfield,c		;load result into nfield
	movei nfield,1		;ensure at least one field per line
	move d,nfield		;initialize count of keywords per line
	hlrz a,(headr)		;get number of keywords in table
	movns a			;negate that count
	hrlzs a			;swap sides
	add headr,a		;we almost have an aobjp pointer
	addi headr,1		;aojbp pointer in HEADR
tbprn1:	hrrz a,headr		;fetch address of table entry
ifdef tb%abr,<
	hlrz b,(a)		;get first word
	ldb a,[point 7,(b),6]	;get the first byte
	jumpn a,tbprn3		;if not a flags word, go on
	move b,(b)		;get the flags word
	txnn b,cm%abr		;an abbreviation?
	 jrst tbprn3		;yes, go on
	aobjp headr,r		;decrement count, quit if we're done
	jrst tbprn1		;go loop
tbprn3:	hrrz a,headr		;fetch address of table entry
>;ifdef tb%abr
	call tbptr		;a/ get pointer to keyword
	psout%			;print the keyword
	hrrz a,headr		;fetch address of table entry
	call tbptr		;a/ get pointer to keyword	
	call tblen		;calculate length of that keyword
	aobjp headr,r		;decrement count, quit if we're done
	sojle d,tbprn2		;say we've printed one, jump if at end of line
	sub b,field		;how much of the field is left?
	movms b			;get absolute value
	idivi b,10		;divide by number of spaces in a tab
	skipe c			;skip if we don't need to round up
	addi b,1		;round up
	movei a,.chtab		;a tab
	pbout%			;print it
	sojg b,.-1		;keep on spacing over
	jrst tbprn1		;go print the next keyword

tbprn2:	tmsg <
>				;print a crlf at the end of the line
	move d,nfield		;reset the count of keywords to print
	jrst tbprn1		;go print the next keyword


;TBLEN
;find length of a string
;takes a/ string pointer
;returns +1 always with b/ string length

tblen:	hrli a,(<point 7,0>)
	skipa b,[0]
	addi b,1
	ildb c,a
	jumpn c,.-2
	ret


;TBPTR
;return a string pointer to the current keyword
;takes	a/ address of table entry
;returns +1 always with string pointer in A

tbptr:	push p,b		;save B
	hlro a,(a)		;a/ pointer to keyword
	ldb b,[point 7,(a),6]	;get first byte of "keyword"
	jumpn b,tbptr0		;if not null, then our pointer is good
	move b,(a)		;fetch first word of "keyword"
	txne b,cm%fw		;is it really a flag word?
	addi a,1		;yes, fudge the pointer
tbptr0:	pop p,b			;restore B
	ret			;return to caller


	
;EPRINT
;here to pretty print an error message
;takes	a/ pointer to error string
;returns +1 always

eprint:	push p,a
	movei a,.priou		;a/ reading from the tty
	rfpos%			;get cursor position
 	hrroi a,[byte(7) 15,12,0] ;a/ a CRLF
	trne b,-1		;skip if against left margin
	psout%			;print a CRLF otherwise
	pop p,a			;restore the string pointer
	esout%			;print the message
	ret			;return to caller


;PERR
;like EPRINT, but prints most recent error message
;takes	a/ pointer to error string
;never returns

perr:	call eprint		;print the string
	tmsg < - >		;print the separator
	movei a,.priou		;a/ to the terminal
	hrloi b,.fhslf		;b/ most recent error for this process
	setz c,			;c/ no string length limit
	erstr%			;print the error string
	 jfcl			;ignore errors
	  jfcl			;...
	haltf%			;shut us down
	jrst .-1		;and stay that way


;MOVSTR
;move an asciz string from source to destination - includes the NUL
;takes	a/ source string pointer
;	b/ destination string pointer
;returns +1 always

movstr:	hrli a,(<point 7,0>)
	hrli b,(<point 7,0>)
	ildb c,a
	idpb c,b
	jumpn c,.-2
	ret

;CPYSTR
;copy a asciz string with the null
;returns +1 always

cpystr:	tlc a,-1
	tlcn a,-1
	hrli a,(<point 7,0>)
	tlc b,-1
	tlcn b,-1
	hrli b,(<point 7,0>)
cpyst0:	ildb c,a
	jumpe c,r
	idpb c,b
	jrst cpyst0


;ACSAVE
;this routine swiped from MDP's FINGER program
;after calling this, a routine will not clobber any ACs
;Macsym's SAVEAC optimized for all 16 ACs and done like STKVAR, except that it
;generates no extra code outside of this subroutine. Calls own caller and
;returns +1 or +2 according as called caller returned +1 or +2.

acsave:	exch 16,(p)		;save ac 16 and fetch address of routine
	adjsp p,16		;allocate 16 more spaces on stack
	movem 15,(p)		;save ac 15 at top of stack
	movei 15,-15(p)		;15/ 0,,<space on stack for ac 0>
	blt 15,-1(p)		;save acs 0 through 14
	call (16)		;call caller
	 skipa			;caller returned +1, skip incrementing
	  aos -17(p)		;returned +2, increment return for skip
	hrlzi 15,-15(p)		;15/ <space on stack with ac 0>,,0
	blt 15,15		;restore acs 0 through 15
	adjsp p,-16		;deallocate space allocated
	pop p,16		;finally restore first ac used
	ret			;return to caller's caller


;CONFRM
;wait for confirmation of a command
;returns +1 always

confrm:	call acsave		;save accumulators
	movei a,csb		;a/ address of command state block
	movei b,[flddb. .cmcfm,cm%sdh,,<Press the RETURN key>]
	comnd%			;wait for confirmation
	txne a,cm%nop		;confirmed?
	 pmsg <Not confirmed>	;no...
	ret			;return to caller

	end <evecl,,evec>
