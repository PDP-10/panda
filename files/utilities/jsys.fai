;SX:<D.DAGONE>JSYS.FAI.9,  7-Jul-81 15:44:01, Edit by D.DAGONE
;Took out all bit mask junk, looks now for ^_ instead of ^M's

	Title DJSYS; jsys program by Dan Newell

			;Searches JSYS Manual for jsys descriptions
			;Jsys preceded by ^_, octal 37, semi-compatible 
			;with emacs, manual needs tags table

	Search Monsym
	Extern	.JBSA	;.JBSA holds address just past all compiled material

A=1			;Acc declarations
B=2
C=3
D=4
E=5
P=17			;stack pointer

; VERSION
; Information
	vmajor==1		;major version
	vminor==0		;minor version
	vedit==1		;edit number
	vcust===2181961		;last edit at Stanford
				;nobody updates this so my birthdate will
				;serve just as well

DEFINE version
	<byte(3)vcust(9)vmajor(6)vminor(18)vedit
>;VERSION

pdllen==40			;stack length
pdl:	block pdllen		;stack

jspag==10			;starting page for mapped jsys manual
flnmln==10			;length of jsys file name text buffer
buflen==5			;max length of rscan buffer
tbllen==1000			;Max Command table size
kywdln==20			;Max Keyword length

jinit:	block 1			;flag to set if table already built
contty:	block 1			;controlling tty
jsjfn:	block 1			;jfn on jsys file
jsfile:	block flnmln		;string with jsys files name
exefil:	block flnmln		;string to hold name/place for saved exe file
jslen:	block 1			;length of jsys file in pages
jnam:	block kywdln		;holds jsys name for indexing
jsaddr:	block 1			;temp storage for address in file to start jsys
jcount:	block 1			;pointer to next free space in string block
jstabl:	block	tbllen		;table for jsys entries
jstrng:	block	2000		;table for jsys strings for TBLUK%
jsys:	block	2		;jsys typed in by typee
jsys2:	block	2		;jsys after cleansing of spaces and returns
jsnum:	block	1		;number of jsys's	
stradr:	block	1		;address to start souting
stpadr:	block	1		;address to stop soutint
strpag:	block	1		;page in file to begin pmaping at
ttyptr:	block	1		;pointer on rscan string
ttybuf:	block	buflen		;rscan text buffer	
erbuf:	block	40		;error buffer

cmdbsz==100			;length of comnd buffer, 64, 300 characters
atmbsz==40			;length of atom buffer, 32, 150 characters
cmdpbf:	block	1		;ptr for reparse
cmdbuf:	block	cmdbsz		;buffer for comnd
atmbuf:	block	atmbsz		;atom buffer
gtjblk:	block	.gjatr+1	;gtjfn block

cmdblk:	0,,cmrprs		;flags,,address of reparse routine
	.priin,,.priou		;jfns for I/O
	-1,,[asciz/Jsys}/]	;^R buffer message
	-1,,cmdbuf		;ptr to start text buffer
	-1,,cmdbuf		;ptr to start
	cmdbsz*5-1		;byte size of comnd buffer
	0			;# unparsed characters
	-1,,atmbuf		;ptr to atom buffer
	atmbsz*5-1		;byte size of atom buffer
	gtjblk			;pointer to gtjfn block

opdef	call	[pushj p,]
opdef	ret	[popj p,]

; TYPE
; Macro to type a string, saves acc's
DEFINE type (mess)
	<push	P,A
	hrroi	A,[asciz/mess/]
	PSOUT%
	 ercal	error
	pop	P,A
>;TYPE

;Entry vector information
evec:	jrst start		;EXEC start address
	jrst start		;reenter address, same
	Version			;version data
	jfcl
evecl==.-evec

;;;MAIN PROGRAM
start:	RESET%			;-- Sterilize, sterilize --
	move	p,[iowd	pdllen,pdl]	;initialize stack

main:	skipn	jinit		;is the table built already?
	 call	jbuild		;no, we will have to build it and then save it
	jrst	jget		;yes, get jsys normally
	HALTF%			;program rebuilt and saved or run, halt.
	jrst	main	    	;run again

jbuild:	setom	A		;-1 in A in order to get whole file from jsmap
	call	jsmap		;map in jsys file
	call	jserch		;now search for jsys's to build table
;	call	jsapp		;insert appendix into possible entries, Nimp
	call	jnmout		;write out number of jsys's
	call	jssave		;save the resulting core image
	ret


;JSERCH will search through the mapped jsys file for ^_, the emacs help char,
;octal 37, which will indicate the presence of a jsys starting at
;that address. It will then enter that address in a table in alphabetical
;order. The table, starting at jstabl, contains the pointers to the
;jsys strings, starting at jstrng, in the left half, and the address into
;the file where the jsys begins.

jserch:	move	A,[0,,tbllen-1]	;set word 0 of table, (0 entries,,max entries)
	movem	A,jstabl	;initialize table, put word zero into table

	movei	A,jstrng	;get address of start of string space
	movem	A,jcount	;start count at that point

	move	B,[point 7, jspag*1000]	;get address of start of jsys manual

        move    C,jslen         ;get the length of the file
        imuli   C,1000          ;1000 words to a page
	addi	C,jspag*1000	;add offset into core from starting page

; B contains byte pointer into file
; C holds address of last possible char in file
; This is the main file scanning loop

mloop:	ildb	A,B		;get a byte into A
	cain	A,""		;is it a ^_?
	 jrst	getjnm		;yes, get jsys name

gotret:	hrrz	D,B		;get address, not byte pointer, into D
	camge	D,C		;are we at end of file or past it?
	 jrst	mloop		;no, get next word and repeat
	ret			;yes, return and save the core image

; At this point, address we are at is in B. We need to find jsys name though
; Ignore next line, tag name is on following line
;	^_
;	<anything>
; <spaces/tabs>	TAGNAME <space/tab/crlf> <anything>

getjnm:	push	P,B		;save acc's so we can continue looking normally
	push	P,C		;after we are done entering this one

	aos	jsnum		;add to the number of jsys's that we have found
	movem	B,jsaddr	;store the address we found the jsys at
	move	A,B		;get byte pointer in A

barlin:	ildb	B,A		;get a character
	cain	B,0		;check just in case we are in null spaces
	 jrst	ohwell		;return to scanning
	caie	B,"
"		;is it end of ^_ line?
	 jrst	barlin		;no, keep scanning

waste:	ildb	B,A		;get a character
	cain	B,0		;check just in case we are in null spaces
	 jrst	ohwell		;return to scanning
	caie	B,"
"		;is it end of second line?
	 jrst	waste		;no, keep scanning

; We are now past second line, all that separates us from the tag is
; a few white spaces.

namlop:	ildb	B,A		;get first character
	cain	B,0		;check just in case we are in null spaces
	 jrst	ohwell		;return to scanning
	cain	B," "		;is it a space?
	 jrst	namlop		;yes, look some more
	cain	B,"	"	;is it a tab?
	 jrst	namlop		;yes, look some more
	cain	B,"
"		;is it a carriage return?
	 jrst	namlop		;yes, look some more

	move	C,[point 7,jnam] ;we are now at jsys, get buffer to put name in
;	movni	D,5		;loop getting 5 chars, all jsys' max 5 chars

jnloop:	idpb	B,C		;output character in B onto string at C
	ildb	B,A		;get next byte from A into B
	cain	B," "		;is it a space, tab, or %...
	 jrst	jout		;.. i.e. end of jsys? Loop until end or 5 chars
	cain	B,"	"	;whichever comes first.
	 jrst	jout
	cain	B,"%"		;special check just for jsys's
	 jrst	jout
	cain	B,"
"
	 jrst	jout
	cain	B,"
"
	 jrst	jout
	jrst	jnloop
;	aojl	D,jnloop	;loop 5 times

; Jsys name now in jnam

jout:	setzm	B		;put null byte on the end
	idpb	B,C

	hrroi	A,jnam		;get pointer to jsys read in
	PSOUT%			;keep compilee occupied by displaying them

	type	<@>
	hrrz	B,jsaddr	;get address of keywrd in B
	movei	A,.priou	;where to write, to tty
	movei	C,10		;octal radix
	NOUT%			;output number
	 erjmp	.+1		;ignore error

	type	<	>	;tab to separate them

; jsys now read in, enter into table.

jsinsr:	movei	A,kywdln	;maximum characters in A
	move	B,[point 7, jnam] ;Source in B
	hrli	C,440700
	hrr	C,jcount
	call	cpystr		;append string onto string space
	setzm	B		;put null byte on the end
 	idpb	B,C
	move	D,C

	movei	A,jstabl	;get address of zero word in table
	hrl	B,jcount	;put address of the string in left half
	hrr	B,jsaddr	;put address of jsys in file in the right half
	subi	B,jspag*1000	;subtract off mapped in offset to get absolute
				;address into jsys manual
	TBADD%			;add this jsys into table
	 erjmp	ohwell		;if can't add, forget it

	hrrzm	D,jcount	;store string address in string table
	aos	jcount		;bump string count up one

ohwell:	pop	P,C		;restore acc's so we can continue searching
	pop	P,B

	jrst	gotret		;return and continue searching


;JNMOUT just print out the number of jsys's there are
jnmout:	type	<
Number of Jsys's is >
	move	B,jsnum		;get number of jsys's in B
	movei	A,.priou	;where to write, to tty
	movei	C,=10		;decimal radix
	NOUT%			;output number
	 erjmp	error
	type	<.
>
	setzm	jsnum		;zero number to clean up
	ret

; CPYSTR (A,B,C) []
; Copies a string onto destination string, untill maximum number of
;  bytes or until null byte
; Maximum number of chars in A
; Source in B
; Dest in C
cpystr:	ildb	D,B
	skipn	D
	 jrst	goback
	idpb	D,C
	sojg	A,cpystr
goback:	ret

;JSAPP insert the appendices and previous two chapters
jsapp:	ret		;for now, fix later, may get tricky


;JSSAVE saves the core image to contain everything from just past acc's
;to end of program including the two table, the string table and the command
;formated table.
jssave:	type	<
Where do you want to keep the exe file?
(Eventually ps:<unsupported>jsys.exe)-->

	movx	A,gj%sht!gj%fns!gj%fou	
	movei	B,.priou	;read/write from terminal
	hrli	B,.priin
	GTJFN%
	 erjmp	jssave		;on error let him try again

	setom	jinit		;program is initialized, and about to be saved
				;set flag for normal operation for next run

	hrli	A,.fhslf	;process in left of A, jfn already in right
	hll	B,.jbsa		;how far to save in left half, past sym tbl
	hrri	B,20		;where to begin saving in right half, past accs
	SAVE%			;save program
	 erjmp	error
	ret			;return


;JGET we are in normal operating mode when we reach here. Get the jsys from
;the RSCAN buffer if possible, if not, just ask for it. Map in pages from
;the jsys manual that are necessary and SOUT% the jsys description

jget:	call	getscn		;get jsys from rscan buffer
jget1:	 call	askjs		;ask for it if not there, on any repeats
				;to get the jsys from the user, come here
				;and ask the user rather than rechecking
				;rscan buffer
	move	E,@A		;good jsys, save address in table
	lsh	E,=9		;shift left 1 qtr word in order to...
	hrrz	E,E		;...zero off the page
	lsh	E,-=9		;move page  address back 1 qtr word.

	addi	E,jspag*1000	;add page mapping offset
	hrrz	B,@A		;get address to start from the table in B

	aos	A		;increment table entry by one, start of next
				;jsys is the next table entry. 
	hrrz	A,@A		;Get address to stop from the table in A

	camg	A,B		;is address to stop less than address to start?
	 move	A,B		;cute trick, make equal so subtraction zeroes
				;result for sout, so we can stop on a null byte
				;at end of program

	call	jsmap		;map file pages we want only! Jsmap saves acc's

	sub	A,B		;get words to sout, if equal then 0
	imuli	A,5		;get number of bytes
	move	C,A		;move into C
	movei	A,.priou	;get controlling tty
	hrro	B,E		;make pointer to jsys description
	setzm	D		;if C zero, sout will stop null byte. This is
				;for the last jsys in the manual as no table
				;entry is past it.
	SOUT%
	 erjmp	error

	setom	A		;A= -1
	hrli	B,.fhslf
	hrri	B,jspag
	movx	C,pm%cnt	;repeat count
	add	C,jslen		;add number of repeats for pmap
	PMAP%			;someone has to unmap it, might as well be us
	 erjmp	.+1
	move	A,jsjfn		;try freeing up jfn
	CLOSF%			;close file and release jfn
	 erjmp	.+1		;do bigge if it fails

	HALTF%
	 jrst	jget1		;if continued, ask jsys again

failed:	hrroi	A,[asciz/Couldn't find it, try again/]
	PSOUT%
	jrst	jget1		;ask for jsys again


;GETSCN get jsys from rscan buffer. Return jsys in JSYS.
;RETURN +1 if no jsys
;	+2 if jsys
;here to grab rescan buffer
;single return on error or early LF
;skip return with string pointer in ttyptr
getscn:	movei	A,.rsini	;prep for reading
	RSCAN%			;get rescan buffer
	 ret			;return on error

getsc0:	PBIN%			;get a character from rscan buffer
	cain	A, 12		;is it a LF?
	 ret			;yes, quit, nothing here
	caie	A, 40		;is it a space?
	 jrst	getsc0		;no, keep looking

skpret:	aos	(P)		;add one to address we will return to
	hrroi	A,jsys		;get buffer for text
	movx	B,rd%bel	;stop on CR,LF or CRLF
	hrri	B,2*5		;buffer length = 10 chars max.
	setzm	C		;no ^R pointer
	RDTTY%			;Read jsys name from rscan buffer
	 erjmp	out		;if we fail, just ask for the jsys

;jsys now in jsys, clean up and put in jsys2 for the table look up
clnjs:	move	A,[point 7,jsys] 	;pointer for input in A
	move	C,[point 7,jsys2]	;pointer for output of clean jsys in C

	setzm	jsys2		;make sure jsys2 is empty
	setzm	jsys2+1
	movni	E,5		;loop five times for five characters

clnlop:	ildb	B,A		;get character from jsys
	cain	B," "		;is it a space, tab, ^M, or linefeed?
	 jrst	clndon		;yes, cleaning done, jump out
	cain	B,"	"	;if he puts space at start or other nonsense,
	 jrst	clndon		;it will just reprompt him.
	cain	B,"
"
	 jrst	clndon
	cain	B,"
"
	 jrst	clndon

	idpb	B,C		;output clean character on jsys2
	aojl	E,clnlop	;loop to get more characters.

;jsys now in jsys2 stripped of spaces and carriage returns etc..., do lookup
clndon:	movei	A,jstabl	;get address of zero word in A
	hrroi	B,jsys2		;pointer to asciz string of table entry
	TBLUK%			;find jsys in table
	 erjmp	error

	txnn	B,tl%abr!tl%exm	;if abbrev or exact match, ok
	 jrst	failed		;if wrong, try again and ask for jsys

out:	ret			;return for sout, address is in A

; ASKJS
; Prompts user for jsys, returns address into file in A or continues
; prompting until successful.
askjs:	call	getcmd		;get command and run it
	seto	A,		;here on return from command
	CLOSF%
	 ercal	error		;clean up any stray jfns
	move	A,E		;get address into A
	ret			;return for sout, address is in A

getcmd:	movei	A,cmdblk	;initialize prompt
	movei	B,[flddb. .cmini]
	COMND%
	 ercal	error
	movem	P,cmdpbf	;put reparse address away

cmrprs:	move	P,cmdpbf	;initialize keyword table and accept jsys's
	movei	B,[flddb. .cmkey,,jstabl,<Jsys,>]
	COMND%
	 ercal	error		;error, die
	txne	A,cm%nop	;failure no parse?
	 jrst	cmderr		;yes, say why
	move	E,B		;no, get address in E
	movei	B,[flddb. .cmcfm] ;get confirmation with a CRLF
	COMND%
	 ercal	error		;die on error
	txne	A,cm%nop	;
	 jrst	cmderr
	ret			;return

cmderr:	type	< ...nonsense >	;garbage typed, restart again
	jrst	getcmd



;JSMAP will map in pages from files specified in jsfile which was saved
;previously.
;	Takes absolute address into file to stop in A
;	Takes asbolute address into file to start in B
;	Returns+1 always
;
;	If A and B are equal, maps from start to end of file
;	If A is negative, maps in entire file

jsmap:	push	P,A		;save Acc's
	push	P,B

jsmap2:	movem	A,stpadr	;store starting and stopping address	
	movem	B,stradr

	skipn	jsfile		;if jsfile empty, read from terminal
	 jrst	jstty		;prompt from the terminal
	movx	A,gj%old!gj%sht
	hrroi	B,jsfile	;jsysfile should be the same as when last built
	GTJFN%
	 erjmp	getnam
	movem	A,jsjfn		;save jfn
	jrst	jsopn

jstty:	hrroi	A,[asciz/
Don't have Jsys manual, where is it? 
Probably acct:<Manuals>jsys.manual--/]
	PSOUT%

	movx	A,gj%old!gj%sht!gj%ifg!gj%fns!gj%cfm
	movei	B,.priou	;read/write from terminal
	hrli	B,.priin
	GTJFN%
	 erjmp	getnam
	movem	A,jsjfn		;save jfn

	type	<
This is the file that you specified...>
	movei	A,.priou	;output name to terminal
	hrrz	B,jsjfn		;jfn
	setzb	C,D
	JFNS%			;echo full title back
	 erjmp	error
	tmsg	<
>
	hrroi	A,jsfile	;write out file name for next time	
	hrrz	B,jsjfn		;into jsfile block
	setzb	C,D
	JFNS%
	 erjmp	error

jsopn:	hrrz	A,jsjfn		;strip off left half flags
	movei	B,of%rd		;open for read
	OPENF%			;open it
	 erjmp	error		;fatal error, ask for help in fatal

	hrrz	A,jsjfn		;get size of file for PMAP
	SIZEF%			
	 erjmp	error		;fatal error
	movem	C,jslen		;store length of file

	move	A,stpadr	;these passed by caller for how much to map
	move	B,stradr
	skipg	A		;is A negative?
	 jrst	whlfil		;yes, do the whole file
	camn	A,B		;are A and B equal?
	 jrst	equfil		;yes, map from A to end of file
	lsh	A,-=9		;shift off address right, get pages only
	lsh	B,-=9
	movem	B,strpag	;store starting page
	sub	A,B		;get number of pages between start and stop
	aos	A
	movem	A,jslen		;store in repeat count length
	jrst	mapin

whlfil:	setzm	strpag	 	;yes, jslen=file length, starting page is 0
	jrst	mapin

equfil:	lsh	A,-=9		;shift address off right end, we want the page
	movem	A,strpag	;store starting page
	move	B,jslen		;get the file length
	sub	B,A		;get the number of pages to be mapped
	movem	B,jslen		;put into jslen
	jrst	mapin

mapin:	setzm	C
	hrl	A,jsjfn		;jfn in left half of word
	hrr	A,strpag	;starting page in right half
	move	B,[.fhslf,,jspag]	;process and page to place
	movsi	C,(pm%cnt!pm%rd)	;pmap to read and repeat count
	add	C,jslen		;add number of repeats for pmap
	PMAP%			;A=JFN,,starting page#
				;B=process,,place to put page#
				;C=options,,#repeats
	 erjmp	error
	
	pop	P,B		;restore acc's
	pop	P,A
	ret

getnam:	setzm	jsfile		;zero jsfile so we read from terminal

	setom	A		;put neg 1 in A to map whole file
	jrst	jsmap2		;try to map jsys manual again

;Go here on an error
error:	hrr	B,A		;error in B
	hrloi	B,.fhslf	;Get error for this fork
	hrroi	A,erbuf		;Where to put error
	setz	C,
	ERSTR%			;Make an error string
	 jrst	erer		;two error returns
	 jrst	erer		;(Error within an error)
	hrroi	A,erbuf		;Get address of error string
	ESOUT%			;And print it out
	jrst	fatal		;And end

erer:	hrroi	A,[asciz/
Error within an error - tell D.Dagone!
/]
	PSOUT%			;Print error-in-error message

fatal:	HALTF%			;Stop
	jrst	fatal		;And stay that way

	end	<evecl,,evec>
