;<MONITOR-SOURCES>KLHSRV.MAC.1, 13-Feb-2005 20:24:39, Edit by MRC
; Creation

	SEARCH PROLOG
	TTITLE (KLHSRV,,< - KLH10 Processor Service>)
	SUBTTL Mark Crispin, February 2005

; Bits in HSREAD/HSWRIT

KNLCPU==:400000			; CPU state register bit
KNLDSK==:200000			; disk state register bit
KNLTAP==:100000			; tape state register bit
KNLNET==:040000			; network state register bit
KNLPSH==:020000			; push state to lights
KNLSAX==:010000			; set auxillary lights from bits 24:26
KNLAUX==:007000			; auxillary lights
KNIDLE==:000001			; idle microcode

RS KLHCPU			; CPU type:
				;  0 => not known yet
				; <0 => not a KN10
				; >0 => KN10 capability bits

	RESCD

; Check if KN10 processor
;	CALL KLHCHK
; Returns: +1 not a KN10
;	   +2 KN10 processor

KLHCHK:	SKIPE KLHCPU		; CPU status known yet?
	IFSKP.
	  SAVEAC <T1>
	  HSREAD T1		; no - get host capability data
	  HRRZM T1,KLHCPU	; save capability bits
	  HLRZS T1		; get identity signature
	  CAIE T1,'KLH'		; is a KN10?
	   SETOM KLHCPU		; no - not a KN10
	ENDIF.
	SKIPG KLHCPU		; is a KN10?
	 RET			; no
	RETSKP			; yes

; Idle KN10 microcode
;	CALL KLHIDL
; Returns +1: not a KN10
;	  +2: KN10, microcode exited idle

KLHIDL::CALL KLHCHK		; is a KN10?
	 RET			; no
	HSWRIT KNIDLE		; idle microcode
	RETSKP

; Read KN10 switches
;	CALL KLHRSW
; Returns +1: not a KN10
;	  +2: KN10, T1/ switches

KLHRSW::CALL KLHCHK		; is a KN10?
	 RET			; no
	HSRSW T1		; read data switches
	RETSKP

; Display value on KN10 lights
; Accepts: T1/ value to display in lights
;	CALL KLHLIT
; Returns: +1, Always

KLHLIT::CALL KLHCHK		; is a KN10?
	 RET			; no
	HSLITE T1		; send to lights
	RET

; KLH10 heartbeat, called from 100ms clock.  Note that 100ms clock is
; actually called quite a bit more frequently than every 100ms, so we
; have to do our own time checking.

RS HRTNXT			; time for next heartbeat
RS HRTLST			; time of last heartbeat
RS USRLST			; user time at last heartbeat

KLHHRT::MOVE T1,TODCLK		; get time now
	CAML T1,HRTNXT		; time to beat?
	 CALL KLHCHK		; yes, is it a KN10?
	  RET			; no
	MOVEM T1,HRTNXT		; save as time for next heartbeat
	SUBM T1,HRTLST		; get delta between heartbeats
	EXCH T1,HRTLST		; T1/ delta, HRTLST/ current TODCLK
	MOVE T2,USRTIM		; get total user time
	SUBM T2,USRLST		; get delta between heartbeats
	EXCH T2,USRLST		; T2/ delta, USRLST/ current USRTIM
	LSH T2,3		; calculate delta USRTIM as eights...
	IDIV T2,T1		; ... of delta TODCLK
	CAILE T2,7		; make sure doesn't overflow
	 MOVEI T2,7
	LSH T2,^D9		; set as auxillary bits
	HSWRIT KNLSAX(T2)	; update load average gauge
	MOVEI T1,^D250		; beat again in another 1/4 second
	ADDM T1,HRTNXT
	HSREAD T1		; get current state
	HSWRIT KNLPSH		; beat now
	TRNN T1,KNLCPU		; did we beat on this time?
	 HSWRIT KNLCPU		; no - beat on next time
	RET

; Set I/O bits for heartbeat

KLHDSK::HSWRIT KNLDSK		; set disk I/O
	RET

KLHTAP::HSWRIT KNLTAP		; set tape I/O
	RET

KLHNET::HSWRIT KNLNET		; set network I/O
	RET

	TNXEND
	END
