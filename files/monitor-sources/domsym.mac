Universal DOMSYM -- Domain system symbols needed by GTDOM.MAC

LALL					; Temporary

;; The contents of this universal file are in the "DSYMS" format
;; files RFCDEF.D and USRDEF.D.  Assembly command line should be
;;
;; @COMPILE DOMSYM.MAC + DSYMS1.MAC + USRDEF.D + RFCDEF.D + DSYMS2.MAC
;;
;; See DSYMS1.MAC for more details.

;; End of DOMSYM.MAC.
;;; DSYMS1 -- Definitions and stuff for DSYMS language.

;;; Copyright (c) 1987 Massachusetts Institute of Technology.
;;;
;;; Note that there is absolutely NO WARRANTY on this software.
;;; See the file COPYRIGHT.NOTICE for details and restrictions.

;;; DSYMS format is a limited set of macros used to define symbols,
;;; structures, and tokens in a single file that can be used as source
;;; code for both C compilers (in particular the KCC compiler) and
;;; assemblers (in particular MACRO and MIDAS).  This makes it much
;;; easier to keep things consistant when two sides of a message
;;; protocol have to be implemented in different lanugages.
;;;
;;; This version is for DEC's MACRO assembler.  It would probably work
;;; with FAIL as well if anybody cares.  The command to assemble a
;;; symbol file using DSYMS format would be
;;;
;;; @COMPILE unvfil.MAC + DSYMS1.MAC + foo.D + DSYMS2.MAC
;;;
;;; "unvfil" should be a file with a UNIVERSAL statement in it.  There
;;; may be more than one file as "foo.D" (which is why the UNIVERSAL
;;; statement is not handled by DSYMS.  Any special .DIRECT statements
;;; or whatever should also be in "unvfil".  DSYMS2 flushes some
;;; internal symbols and provides an END statement, so it should be
;;; the last file in the sequence.

; We need structure defining stuff from MACSYM
	SEARCH	MACSYM

; Ignore extraneous tabs and spaces in macro calls
	.DIRECT .XTABM

;; Worker macros

; Convert C names to SQUOZE ("_" becomes ".")
DEFINE	$$$CVT(FOO) <
	XLIST
	$$$NAM==0
	$$$DUN==0
	IRPC FOO,<
		IFIDN <FOO>< >,<IFN <$$$NAM>,<$$$DUN==1>>
		IFN <$$$NAM&<BYTE(6)77>>,<$$$DUN==1>
		IFE <$$$DUN>,<
			IFIDN <FOO><_>,<$$$CHR==<SIXBIT ".">>
			IFDIF <FOO><_>,<$$$CHR==<SIXBIT "FOO">>
			$$$NAM==<$$$NAM_6>!<$$$CHR_-36>
		>
		IFN <$$$DUN>,<STOPI>
	>
	PURGE	$$$CHR,$$$DUN
	LIST
>

; Set up an equivalence.  Needed because name conversion has to be
; done via a macro call.
DEFINE	$$$EQV(FOO,BAR) <FOO==BAR>

;; Language elements

; COMMENT is already present in MACRO

; Define a constant.  Radix is decimal unless first digit is zero (like C).
DEFINE	CONST(FOO,BAR) <
	$$$RX1==5+5
	IRPC BAR,<IFNB <BAR>,<
		IFIDN <BAR><0>,<$$$RX1==4+4>
		STOPI
	>>
	$$$RX2==10
	RADIX $$$RX1
	$$$BAR==BAR
	RADIX $$$RX2
	$$$CVT(FOO)
	$$$EQV(\'$$$NAM,\$$$BAR)
	PURGE $$$NAM,$$$BAR,$$$RX1,$$$RX2
>

; Begin a structure definition
DEFINE	BSTRUCT(FOO) <
	$$$FLD==0
	$$$WRD==0
>

; Define a structure bitfield
DEFINE	DFIELD(FOO,BAR) <
	$$$CVT(FOO)
	$$$SIZ==^D<BAR>
	$$$POS==$$$FLD+$$$SIZ-1
	DEFSTR(\'$$$NAM,\$$$WRD,$$$POS,$$$SIZ)
	PURGE	$$$SIZ,$$$POS,$$$NAM
	DFILL(BAR)
>

; Define a "halfword".  This should be at least 16 bits of precision.
DEFINE	DHALF(FOO) <
	DFIELD(FOO,18)
>

; Fill a bitfield.  Filling by zero just aligns to next word boundry, per C.
DEFINE	DFILL(FOO) <
	IFE <^D<FOO>>,<
		IFN <$$$FLD>,<
			$$$FLD==0
			$$$WRD==$$$WRD+1
		>
	>
	IFN <^D<FOO>>,<
		$$$FLD==$$$FLD+^D<FOO>
		IFGE <$$$FLD-44>,<
			$$$WRD==$$$WRD+1
			$$$FLD==$$$FLD-44
		>
	>
>

; Define a "word".  This is a 32 bit (at least) aligned value.
DEFINE	DWORD(FOO) <
	DWORDS(FOO,1)
>

; Define an array of "words".
DEFINE	DWORDS(FOO,BAR) <
	DFILL(0)
	$$$CVT(FOO)
	$$$POS==^D35
	$$$SIZ==^D36
	DEFSTR(\'$$$NAM,\$$$WRD,$$$POS,$$$SIZ)
	$$$WRD==$$$WRD+^D<BAR>
	PURGE	$$$NAM,$$$POS,$$$SIZ
>

; End of a structure definition.
DEFINE	ESTRUCT(FOO,BAR) <
	IFN <$$$FLD>,<
		$$$WRD==$$$WRD+1
	>
	$$$CVT(BAR)
	$$$EQV(\'$$$NAM,$$$WRD)
	PURGE	$$$NAM
>

;; Tuple stuff

; Begining of a tuple list
DEFINE	BTUPLE(FOO) <>

; A tuple entry
DEFINE	TUPLE(FOO,BAR,BAZ) <
	$$$CVT(FOO)
	$$$EQV(\'$$$NAM,<^D<BAR>>)
	PURGE	$$$NAM
>

; A tuple alias
DEFINE	ATUPLE(FOO,BAR) <>

; End of a tuple list
DEFINE	ETUPLE <>

;; RDATA stuff

; Begin an RDATA definition
DEFINE	BRDATA(FOO,BAR) <
	$$$IDX==0
>

; An RDATA entry
DEFINE	 RDATA(FOO,BAR) <
	$$$CVT(FOO)
	$$$EQV(\'$$$NAM,\$$$IDX)
	$$$IDX==$$$IDX+1
	PURGE	$$$NAM
>

; Alias (to work around 6 char limit screw) to an RDATA entry
DEFINE	ARDATA(FOO,BAR) <
	$$$CVT(FOO)
	$$$NM1==$$$NAM
	$$$CVT(BAR)
	$$$NM2==$$$NAM
	$$$EQV(\'$$$NM2,\'$$$NM1)
	PURGE	$$$NAM,$$$NM1,$$$NM2
>

; End of an RDATA definition
DEFINE	ERDATA(FOO) <
	PURGE	$$$IDX
>


;; End of DSYMS1.MAC.
COMMENT /* USRDEF.D -- User interface definitions.
	 *
	 * Copyright (c) 1987,1988 Massachusetts Institute of Technology.
	 *
	 * Note that there is absolutely NO WARRANTY on this software.
	 * See the file COPYRIGHT.NOTICE for details and restrictions.
	 *
         * See DSYMS.HLP for information about the format of this file.
         *
         * Two rules should be observed when making changes:
         *
         *      1) If you change -anything- in this file,
         *         increment USRVER.
         *
         *      2) The first  word of the page header format
         *         must always be the version number.  At present this
         *         consists of two halfwords containing the version
         *         numbers of the user protocol and the domain
         *         protocol (as defined by USRVER and RFCVER).  No
         *         matter what changes are made to this protocol, it
         *         should be possible to determine whether or not the
         *         two participants agree on the protocol version by
         *         doing a fullword comparision against the first word
         *         of the message page.
         *
         * These two assumptions should suffice to allows the C code
         * and the assembler code to be sure they are running the same
         * version of the message protocol.
         */


COMMENT /* Constant definitions */

    COMMENT /* Protocol version number */
    CONST(USRVER, 3)

    COMMENT /* Special "QCLASS" to signal CTL operation */
    CONST(QC_CTL, 0177777)

    COMMENT /* States: Query, Response, Error, Wait */
    CONST(US_QRY, 066601)
    CONST(US_RSP, 066602)
    CONST(US_ERR, 066603)
    CONST(US_WAI, 066604)

    COMMENT /* Query flags:
             *  LDO = Local data only
             *  MBA = Must be authoritative
             *  EMO = Exact match only (don't use search rules)
             *  RBK = Resolve in background
             */
    CONST(UF_LDO,   0000001)
    CONST(UF_MBA,   0000002)
    CONST(UF_EMO,   0000004)
    CONST(UF_RBK,   0000010)

    COMMENT /* Flag values returned:
             *  AKA = CNAMEs were found, QNAME is a nickname
             */
    CONST(UF_AKA,   0400000)

    COMMENT /* Response error codes:
             *  OK  = No error.
             *  NAM = Name does not exist (authoritative answer)
             *  NRR = No RRs match name (authoritative answer)
             *  SYS = System error.
             *  NIY = Not Implemented Yet.
             *  TMO = Timeout while resolving query.
             *  RBK = Resolving in background.
             *  TMC = Too Many CNAMEs.
             *  ACK = ACKnowledgement (CTL messages only).
             *  ARG = Arguments invalid.
             *  DNA = Data Not Available.
             *  NOP = An error the resolver ignores (internal use only).
             *  ADM = Operation administratively forbidden.
             */
    CONST(UE_OK,   0)
    CONST(UE_NAM,  1)
    CONST(UE_NRR,  2)
    CONST(UE_SYS,  3)
    CONST(UE_NIY,  4)
    CONST(UE_TMO,  5)
    CONST(UE_RBK,  6)
    CONST(UE_TMC,  7)
    CONST(UE_ACK,  8)
    CONST(UE_ARG,  9)
    CONST(UE_DNA,  10)
    CONST(UE_NOP,  11)
    CONST(UE_ADM,  12)
    CONST(UE_MAX,  12)

    COMMENT /* CTL operations (QTYPE field); not all implemented yet:
             *  AYT = Are you there?  Just pings the server.
             *  ZON = New zone version. QNAME is zone name.
             *  BUT = Requests server to reboot itself.
             *  KIL = Requests server to suicide without reboot.
             *  INF = Requests server to write statistics file.
             *  CHK = Requests server to write checkpoint file.
             */
    CONST(UC_AYT,  1)
    CONST(UC_ZON,  2)
    CONST(UC_BUT,  3)
    CONST(UC_KIL,  4)
    CONST(UC_INF,  5)
    CONST(UC_CHK,  6)
    CONST(UC_MAX,  6)


COMMENT /* Structure definitions */

COMMENT /* Page header format */
BSTRUCT(u_page_header)
    DHALF ( verrfc	)
    DHALF ( verusr	)
    DWORD ( state       )
    DHALF ( pag_count   )
    DHALF ( pag_this    )
    DWORD ( stmp1       )
    DWORD ( stmp2       )
ESTRUCT(u_page_header,U_PHSIZE)

COMMENT /* Message header format (page 0 only) */
BSTRUCT(u_data_header)
    DHALF ( flags       )
    DHALF ( qname       )
    DHALF ( qtype       )
    DHALF ( qclass      )
    DHALF ( rcode       )
    DHALF ( rname       )
    DWORD ( count       )
ESTRUCT(u_data_header,U_DHSIZE)


COMMENT /* Message RR header format */
BSTRUCT(u_rr_header)
    DWORD ( length      )
    DHALF ( type        )
    DHALF ( class       )
    DWORD ( ttl         )
ESTRUCT(u_rr_header,U_RHSIZE)

COMMENT /* End of USRDEF.D */
COMMENT /* RFCDEF.D -- Tokens and such specified in domain RFCs.
	 *
	 * Copyright (c) 1987,1988 Massachusetts Institute of Technology.
	 *
	 * Note that there is absolutely NO WARRANTY on this software.
	 * See the file COPYRIGHT.NOTICE for details and restrictions.
	 *
	 * See DSYMS.HLP for information on format.
	 *
	 * If you change anything in this file, be sure to increment
	 * RFCVER so that all the code will be able to detect it.
	 *
	 * A few symbol names (*INFO) have been shortened to make
	 * then unique when truncated to six characters.  Ugly but
	 * that's life.
	 */

COMMENT /* Version of this specification file. */
CONST(RFCVER,	3)

COMMENT /* Opcodes */
BTUPLE(op_table)
 TUPLE(OP_QUERY,	0,	"normal query"			)
 TUPLE(OP_IQUERY,	1,	"inverse query"			)
 TUPLE(OP_STATUS,	2,	"status request"		)
ETUPLE
CONST(OP_MAX,		2)

COMMENT /* Error codes */
BTUPLE(er_table)
 TUPLE(ER_OK,		0,	"no error"		)
 TUPLE(ER_FMT,		1,	"format error"		)
 TUPLE(ER_SRV,		2,	"server error"		)
 TUPLE(ER_NAM,		3,	"name error"		)
 TUPLE(ER_NIY,		4,	"not implemented"	)
 TUPLE(ER_REF,		5,	"refused"		)
ETUPLE
CONST(ER_MAX,		5)

COMMENT /* QTYPE */
BTUPLE(qt_table)
 TUPLE(QT_A,		1,	"A"		)
 TUPLE(QT_NS,		2,	"NS"		)
 TUPLE(QT_CNAME,	5,	"CNAME"		)
 TUPLE(QT_SOA,		6,	"SOA"		)
 TUPLE(QT_MB,		7,	"MB"		)
 TUPLE(QT_MG,		8,	"MG"		)
 TUPLE(QT_MR,		9,	"MR"		)
 TUPLE(QT_NULL,		10,	"NULL"		)
 TUPLE(QT_WKS,		11,	"WKS"		)
 TUPLE(QT_PTR,		12,	"PTR"		)
 TUPLE(QT_HINFO,	13,	"HINFO"		)
 TUPLE(QT_MINFO,	14,	"MINFO"		)
 TUPLE(QT_MX,		15,	"MX"		)
 TUPLE(QT_TXT,		16,	"TXT"		)
 TUPLE(QT_AXFR,		252,	"AXFR"		)
 TUPLE(QT_MAILB,	253,	"MAILB"		)
 TUPLE(QT_MAILA,	254,	"MAILA"		)
 TUPLE(QT_ANY,		255,	"*"		)
ETUPLE
CONST(QT_MAX,		15)

COMMENT /* QCLASS */
BTUPLE(qc_table)
 TUPLE(QC_IN,		1,	"IN"		)
 TUPLE(QC_CS,		2,	"CS"		)
 TUPLE(QC_CH,		3,	"CH"		)
 TUPLE(QC_HS,		4,	"HS"		)
 TUPLE(QC_ANY,		255,	"*"		)
ETUPLE
CONST(QC_MAX,		4)

COMMENT /* Maximum lengths of domain name and max length of a label */
CONST(MAXDNM,255)
CONST(MAXLAB,63)

COMMENT /*
	 * Definitions of RDATA fields.  Names are as in RFC883.
	 * Second field is format character as returned by rrfmt() (q.v.).
	 * If an RR format is not class-specific, use QC_ANY for class.
	 */

COMMENT /*
	 * SOA (Start Of Authority) RR.  See RFC883, page 65 for explanation.
	 * Note that SERIAL and MINIMUM were expanded to 32 bits as of RFC973.
	 */
BRDATA(QC_ANY,QT_SOA)
 RDATA(SOA_MNAME,	'd')
 RDATA(SOA_RNAME,	'd')
 RDATA(SOA_SERIAL,	'4')
 RDATA(SOA_REFRESH,	'4')
 RDATA(SOA_RETRY,	'4')
 RDATA(SOA_EXPIRE,	'4')
 RDATA(SOA_MINIMUM,	'4')
ERDATA(SOA_RDATA_LENGTH)

COMMENT /*
	 * CNAME (Cannonical NAME pointer) RR.
	 */
BRDATA(QC_ANY,QT_CNAME)
 RDATA(CNAME_CNAME,	'd')
ERDATA(CNAME_RDATA_LENGTH)

COMMENT /*
	 * NS (Name Server) RR.
	 */
BRDATA(QC_ANY,QT_NS)
 RDATA(NS_NSDNAME,	'd')
ERDATA(NS_RDATA_LENGTH)

COMMENT /*
	 * HINFO (Host INFOrmation) RR.
	 */
BRDATA(QC_ANY,QT_HINFO)
 RDATA(HINFO_CPU,	's')
ARDATA(HINFO_CPU, HINF_CPU )
 RDATA(HINFO_OS,	's')
ARDATA(HINFO_OS,  HINF_OS  )
ERDATA(HINFO_RDATA_LENGTH)

COMMENT /*
	 * MB (Mail Box) RR.
	 * MG (Mail Group) RR.
	 * MR (Mail Rename) RR.
	 */
BRDATA(QC_ANY,QT_MB)
 RDATA(MB_MADNAME,	'd')
ERDATA(MB_RDATA_LENGTH)
BRDATA(QC_ANY,QT_MG)
 RDATA(MG_MGMNAME,	'd')
ERDATA(MG_RDATA_LENGTH)
BRDATA(QC_ANY,QT_MR)
 RDATA(MR_NEWNAME,	'd')
ERDATA(MR_RDATA_LENGTH)

COMMENT /*
	 * MINFO (Mail INFOrmation) RR.
	 */
BRDATA(QC_ANY,QT_MINFO)
 RDATA(MINFO_RMAILBX,		'd')
ARDATA(MINFO_RMAILBX, MINF_RMAILBX )
 RDATA(MINFO_EMAILBX,		'd')
ARDATA(MINFO_EMAILBX, MINF_EMAILBX )
ERDATA(MINFO_RDATA_LENGTH)

COMMENT /*
	 * MD (Mail Drop) RR, superseded by MX RR, removed per RFC1035.
	 * MF (Mail Forwarder) RR, ditto.
	 */

COMMENT /*
	 * MX (Mail eXchange) RR.
	 */
BRDATA(QC_ANY,QT_MX)
 RDATA(MX_PREFERENCE,	'2')
 RDATA(MX_AGENT,	'd')
ERDATA(MX_RDATA_LENGTH)

COMMENT /*
	 * NULL (totally meaningless) RR.  No defined content!
	 */
BRDATA(QC_ANY,QT_NULL)
ERDATA(NULL_RDATA_LENGTH)

COMMENT /*
	 * PTR (PoinTeR) RR.
	 */
BRDATA(QC_ANY,QT_PTR)
 RDATA(PTR_PTRDNAME,	'd')
ERDATA(PTR_RDATA_LENGTH)

COMMENT /*
	 * A (Address) RR, classes IN and CH.
	 */
BRDATA(QC_IN,QT_A)
 RDATA(IN_A_ADDRESS,	'i')
ERDATA(IN_A_RDATA_LENGTH)
BRDATA(QC_CH,QT_A)
 RDATA(CH_A_DNAME,	'd')
 RDATA(CH_A_ADDRESS,	'c')
ERDATA(CH_A_RDATA_LENGTH)

COMMENT /*
	 * WKS (Well Known Service) RR, class IN.
	 * There is such a thing as a class CH WKS RR, but
	 * I haven't been able to find a specification for it.
	 */
BRDATA(QC_IN,QT_WKS)
 RDATA(IN_WKS_ADDRESS,	'i')
 RDATA(IN_WKS_VECTOR,	'w')
ERDATA(IN_WKS_RDATA_LENGTH)

COMMENT /*
	 * Length of WKS RDATA in bytes.
	 * DSYMS format isn't up to doing the arithmetic inline,
	 * so observe the following relationships:
	 *   MAX_BITS     = BITVECTOR_LENGTH * 8;
	 *   TOTAL_LENGTH = PROTOCOL_LENGTH + BITVECTOR_LENGTH.
	 */
CONST(IN_WKS_PROTOCOL_LENGTH,	1)
CONST(IN_WKS_MAX_BITS,		256)
CONST(IN_WKS_BITVECTOR_LENGTH,	32)
CONST(IN_WKS_TOTAL_LENGTH,	33)

COMMENT /*
	 * TXT data isn't supported yet because it's a bear to fit into
	 * our format character scheme.
	 */

COMMENT /*
	 * Largest number of fields in a single RDATA portion.  At present,
	 * the largest is SOA.  This is crosschecked in the rrfmt() code.
	 */
CONST(MAX_RDATA_FIELDS,		7)


COMMENT /* End of RFCDEF.D */
;;; DSYMS2.MAC -- tidy up a DSYMS file.  See DSYMS1.MAC.
;;;
;;; Copyright (c) 1987 Massachusetts Institute of Technology.
;;;
;;; Note that there is absolutely NO WARRANTY on this software.
;;; See the file COPYRIGHT.NOTICE for details and restrictions.

; Constant stuff
	PURGE	BCONST,DCONST,OCONST,ECONST

; Structure stuff
	PURGE	BSTRUCT,DFIELD,DHALF,DFILL,DWORD,DWORDS,ESTRUCT

; Tuple stuff
	PURGE	BTUPLE,TUPLE,ATUPLE,ETUPLE

; RDATA stuff
	PURGE	BRDATA,RDATA,ARDATA,ERDATA

; Internal symbols
	PURGE	$$$CVT,$$$EQV
	IFDEF	$$$WRD,<PURGE $$$WRD>
	IFDEF	$$$FLD,<PURGE $$$FLD>

	END
