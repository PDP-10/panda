Info file elisp, produced by Makeinfo, -*- Text -*- from input file
elisp.texi.

   This file documents GNU Emacs Lisp.

   This is edition 1.03 of the GNU Emacs Lisp Reference Manual,   for
Emacs Version 18.

   Published by the Free Software Foundation, 675 Massachusetts
Avenue,  Cambridge, MA 02139 USA

   Copyright (C) 1990 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Foundation.



File: elisp,  Node: Index,  Prev: Standard Hooks,  Up: Top

Index
*****

* Menu:

* %: Arithmetic Operations.
* &optional: Argument List.
* &rest: Argument List.
* *: Arithmetic Operations.
* +: Arithmetic Operations.
* ,: Backquote.
* ,@: Backquote.
* -: Arithmetic Operations.
* /: Arithmetic Operations.
* /=: Comparison of Numbers.
* 1+: Arithmetic Operations.
* 1-: Arithmetic Operations.
* <: Comparison of Numbers.
* <=: Comparison of Numbers.
* =: Comparison of Numbers.
* >: Comparison of Numbers.
* >=: Comparison of Numbers.
* EMACSLOADPATH environment variable: How Programs Do Loading.
* HOME environment variable: Subprocess Creation.
* PATH environment variable: Subprocess Creation.
* TERM environment variable: Terminal-Specific.
* apply, and debugging: Internals of Debugger.
* arith-error example: Handling Errors.
* arith-error in division: Arithmetic Operations.
* commandp example: High-Level Completion.
* debug-on-error use: Processing of Errors.
* error in debug: Invoking the Debugger.
* eval, and debugging: Internals of Debugger.
* funcall, and debugging: Internals of Debugger.
* interactive, examples of using: Interactive Examples.
* isearch-forward quitting: Quitting.
* lambda in debug: Invoking the Debugger.
* lambda in keymap: Key Lookup.
* mode-class property: Major Mode Conventions.
* nil and lists: Cons Cells.
* nil in keymap: Key Lookup.
* nil in lists: List Type.
* nil input stream: Input Streams.
* nil output stream: Output Streams.
* nil, uses of: nil and t.
* quote-insert suppression: Changing Key Bindings.
* self-insert-command override: Changing Key Bindings.
* self-insert-command, and minor modes: Limits of Minor Modes.
* special: Major Mode Conventions.
* suspend-emacs, related to no-redraw-on-reenter: Screen Attributes.
* throw example: Recursive Editing.
* t and truth: nil and t.
* t input stream: Input Streams.
* t output stream: Output Streams.
* undefined in keymap: Key Lookup.
* user-variable-p example: High-Level Completion.
* .emacs: Init File.
* .emacs customization: Major Mode Conventions.
* DOC (documentation) file: Documentation Basics.
* default.el: Start-up Summary.
* emacs/etc/DOC-VERSION: Documentation Basics.
* etc/DOC-VERSION: Documentation Basics.
* lisp-mode.el: Example Major Modes.
* loadup.el: Building Emacs.
* startup.el: Start-up Summary.
* ? in minibuffer: Text from Minibuffer.
* C-c: Prefix Keys.
* C-g: Quitting.
* C-h: Prefix Keys.
* C-q: Flow Control.
* C-s: Flow Control.
* C-x 4: Prefix Keys.
* C-x: Prefix Keys.
* M-x: Interactive Call.
* ESC: Functions for Key Lookup.
* SPC in minibuffer: Text from Minibuffer.
* TAB in minibuffer: Text from Minibuffer.
* " in printing: Output Functions.
* " in strings: String Type.
* $ in display: Truncation.
* $ in regexp: Syntax of Regexps.
* % in format: Formatting Strings.
* & in replacement: Match Data.
* ' for quoting: Quoting.
* ' in regexp: Syntax of Regexps.
* (...) in lists: List Type.
* ( in regexp: Syntax of Regexps.
* ) in regexp: Syntax of Regexps.
* *scratch*: Auto Major Mode.
* * in interactive: Using Interactive.
* * in regexp: Syntax of Regexps.
* + in regexp: Syntax of Regexps.
* . in lists: Dotted Pair Notation.
* . in regexp: Syntax of Regexps.
* ; in comment: Comments.
* ? in character constant: Character Type.
* ? in regexp: Syntax of Regexps.
* [ in regexp: Syntax of Regexps.
* \< in regexp: Syntax of Regexps.
* \> in regexp: Syntax of Regexps.
* \N in replacement: Match Data.
* \B in regexp: Syntax of Regexps.
* \S in regexp: Syntax of Regexps.
* \W in regexp: Syntax of Regexps.
* \b: Character Type.
* \b in regexp: Syntax of Regexps.
* \e: Character Type.
* \f: Character Type.
* \n: Character Type.
* \n in print: Output Functions.
* \r: Character Type.
* \s in regexp: Syntax of Regexps.
* \t: Character Type.
* \v: Character Type.
* \w in regexp: Syntax of Regexps.
* \ in character constant: Character Type.
* \ in display: Truncation.
* \ in printing: Output Functions.
* \ in regexp: Syntax of Regexps.
* \ in replacement: Match Data.
* \ in strings: String Type.
* \ in symbols: Symbol Type.
* ] in regexp: Syntax of Regexps.
* ^ in regexp: Syntax of Regexps.
* ^ in regexp: Syntax of Regexps.
* ` in regexp: Syntax of Regexps.
* | in regexp: Syntax of Regexps.
* CBREAK: Flow Control.
* PTYs: Asynchronous Processes.
* character quote: Syntax Class Table.
* close parenthesis character: Syntax Class Table.
* comment ender: Syntax Class Table.
* comment starter: Syntax Class Table.
* escape: Syntax Class Table.
* expression prefix: Syntax Class Table.
* open parenthesis character: Syntax Class Table.
* paired delimiter: Syntax Class Table.
* punctuation character: Syntax Class Table.
* string quote: Syntax Class Table.
* symbol constituent: Syntax Class Table.
* whitespace character: Syntax Class Table.
* word constituent: Syntax Class Table.
* ASCII character codes: Character Type.
* Auto Fill mode: Auto Filling.
* Buffer-menu-mode-map: Standard Keymaps.
* Common Lisp: Lisp History.
* Control-X-prefix: Prefix Keys.
* ESC-prefix: Prefix Keys.
* Emacs character standard notation: Describing Characters.
* Fundamental mode: Major Modes.
* Helper-describe-bindings: Help Functions.
* Helper-help: Help Functions.
* Helper-help-map: Standard Keymaps.
* Info-edit-map: Standard Keymaps.
* Info-mode-map: Standard Keymaps.
* Lisp debugger: Debugger.
* Lisp expression motion: List Motion.
* Lisp history: Lisp History.
* Lisp interpreter: Evaluation.
* Lisp library: Loading.
* Lisp nesting error: Eval.
* Lisp object: Types of Lisp Object.
* Lisp printer: Output Functions.
* Lisp reader: Streams Intro.
* Lisp symbol completion: Lisp Symbol Completion.
* Maclisp: Lisp History.
* Outline mode: Substitution.
* Shell mode mode-line-format: Mode Line Data.
* Snarf-documentation: Accessing Documentation.
* TCP: TCP.
* X Window System: Window Systems.
* `: Backquote.
* abbrev: Abbrevs.
* abbrev table: Abbrevs.
* abbrev tables in modes: Major Mode Conventions.
* abbrev-all-caps: Abbrev Expansion.
* abbrev-expansion: Abbrev Expansion.
* abbrev-file-name: Abbrev Files.
* abbrev-mode: Abbrev Mode.
* abbrev-start-location: Abbrev Expansion.
* abbrev-start-location-buffer: Abbrev Expansion.
* abbrev-symbol: Abbrev Expansion.
* abbrev-table-name-list: Abbrev Tables.
* abbrevs-changed: Abbrev Files.
* abort-recursive-edit: Recursive Editing.
* aborting: Recursive Editing.
* absolute file name: Relative File Names.
* accept-process-output: Accepting Output.
* accessibility of a file: Testing Accessibility.
* accessible portion (of a buffer): Narrowing.
* accessible-keymaps: Scanning Keymaps.
* add-abbrev: Defining Abbrevs.
* add-name-to-file: Changing File Attributes.
* address field of register: List Type.
* after-find-file: Subroutines of Visiting.
* alist: Association Lists.
* all-completions: Basic Completion.
* and: Combining Conditions.
* anonymous function: Anonymous Functions.
* apostrophe for quoting: Quoting.
* append: Building Lists.
* append-to-file: Writing to Files.
* append-to-register: Registers.
* apply: Calling Functions.
* apropos: Help Functions.
* aref: Array Functions.
* argument binding: Argument List.
* argument descriptors: Using Interactive.
* argument evaluation form: Using Interactive.
* argument prompt: Using Interactive.
* arguments, reading: Minibuffers.
* arithmetic shift: Bitwise Operations.
* array: Arrays.
* array elements: Array Functions.
* arrayp: Array Functions.
* aset: Array Functions.
* ash: Bitwise Operations.
* ask-user-about-lock: File Locks.
* ask-user-about-supersession-threat: Modification Time.
* asking the user questions: Yes-or-No Queries.
* assoc: Association Lists.
* association list: Association Lists.
* assq: Association Lists.
* asynchronous subprocess: Asynchronous Processes.
* atom: List-related Predicates.
* atom: List Type.
* atoms: List-related Predicates.
* auto-fill-hook: Auto Filling.
* auto-mode-alist: Auto Major Mode.
* auto-save-default: Auto-Saving.
* auto-save-file-name-p: Auto-Saving.
* auto-save-interval: Auto-Saving.
* auto-save-mode: Auto-Saving.
* auto-save-visited-file-name: Auto-Saving.
* auto-saving: Auto-Saving.
* autoload: Autoload.
* autoload: Autoload.
* autoload errors: Autoload.
* automatically buffer-local: Intro to Buffer-Local.
* back-to-indentation: Motion by Indent.
* backquote (list substitution): Backquote.
* backslash in character constant: Character Type.
* backslash in strings: String Type.
* backslash in symbols: Symbol Type.
* backspace: Character Type.
* backtrace: Internals of Debugger.
* backtrace-debug: Internals of Debugger.
* backup file: Backup Files.
* backup files, how to make them: Rename or Copy.
* backup-buffer: Making Backups.
* backup-by-copying: Rename or Copy.
* backup-by-copying-when-linked: Rename or Copy.
* backup-by-copying-when-mismatch: Rename or Copy.
* backup-file-name-p: Backup Names.
* backward-char: Character Motion.
* backward-delete-char-untabify: Deletion.
* backward-list: List Motion.
* backward-prefix-chars: Parsing Expressions.
* backward-sexp: List Motion.
* backward-to-indentation: Motion by Indent.
* backward-word: Word Motion.
* balancing parentheses: Blinking.
* barf-if-buffer-read-only: Read Only Buffers.
* batch mode: Batch Mode.
* batch-byte-compile: Compilation Functions.
* baud-rate: Terminal Output.
* beep: Beeping.
* beeping: Beeping.
* before point, insertion: Insertion.
* beginning of line: Text Lines.
* beginning of line in regexp: Syntax of Regexps.
* beginning-of-buffer: Buffer End Motion.
* beginning-of-line: Text Lines.
* bell: Beeping.
* binding arguments: Argument List.
* binding local variables: Local Variables.
* binding of a key: Keymap Terms.
* bitwise and: Bitwise Operations.
* bitwise exclusive or: Bitwise Operations.
* bitwise not: Bitwise Operations.
* bitwise or: Bitwise Operations.
* blink-matching-open: Blinking.
* blink-matching-paren: Blinking.
* blink-matching-paren-distance: Blinking.
* blink-paren-function: Blinking.
* blink-paren-hook: Blinking.
* blinking: Blinking.
* bobp: Near Point.
* body of function: Lambda Components.
* bolp: Near Point.
* boolean: nil and t.
* boundp: Void Variables.
* box diagrams, for lists: List Type.
* box representation for lists: Lists as Boxes.
* break: Debugger.
* bucket (in obarray): Creating Symbols.
* buffer: Buffers.
* buffer contents: Text.
* buffer file name: Buffer File Name.
* buffer input stream: Input Streams.
* buffer internals: Buffer Internals.
* buffer list: The Buffer List.
* buffer modification: Buffer Modification.
* buffer names: Buffer Names.
* buffer output stream: Output Streams.
* buffer text notation: Buffer Text Notation.
* buffer, read-only: Read Only Buffers.
* buffer-auto-save-file-name: Auto-Saving.
* buffer-backed-up: Making Backups.
* buffer-enable-undo: Undo.
* buffer-end: Point.
* buffer-file-name: Buffer File Name.
* buffer-file-name: Buffer File Name.
* buffer-flush-undo: Undo.
* buffer-list: The Buffer List.
* buffer-local variables: Buffer-Local Variables.
* buffer-local variables in modes: Major Mode Conventions.
* buffer-local-variables: Creating Buffer-Local.
* buffer-modified-p: Buffer Modification.
* buffer-name: Buffer Names.
* buffer-offer-save: Saving Buffers.
* buffer-read-only: Read Only Buffers.
* buffer-read-only: Read Only Buffers.
* buffer-read-only: Deletion.
* buffer-read-only: Using Interactive.
* buffer-saved-size: Point.
* buffer-size: Point.
* buffer-string: Buffer Contents.
* buffer-substring: Buffer Contents.
* bufferp: Buffer Basics.
* buffers, controlled in windows: Buffers and Windows.
* buffers, creating: Creating Buffers.
* buffers, killing: Killing Buffers.
* building Emacs: Building Emacs.
* building lists: Building Lists.
* built-in function: What Is a Function.
* bury-buffer: The Buffer List.
* byte-code: Byte Compilation.
* byte-code: Compilation Functions.
* byte-code interpreter: Compilation Functions.
* byte-compile: Compilation Functions.
* byte-compile-file: Compilation Functions.
* byte-compiling require: Features.
* byte-compiling macros: Compiling Macros.
* byte-recompile-directory: Compilation Functions.
* bytes: Strings and Characters.
* c-mode-abbrev-table: Standard Abbrev Tables.
* c-mode-map: Standard Keymaps.
* c-mode-syntax-table: Standard Syntax Tables.
* call stack: Internals of Debugger.
* call-interactively: Interactive Call.
* call-process: Synchronous Processes.
* call-process-region: Synchronous Processes.
* calling a function: Calling Functions.
* cancel-debug-on-entry: Function Debugging.
* capitalization: Character Case.
* capitalize: Character Case.
* capitalize-region: Case Changes.
* capitalize-word: Case Changes.
* car: List Elements.
* car-safe: List Elements.
* case changes: Case Changes.
* case in replacements: Match Data.
* case-fold-search: Searching and Case.
* case-replace: Searching and Case.
* catch: Catch and Throw.
* cdr: List Elements.
* cdr-safe: List Elements.
* centering point: Vertical Scrolling.
* changing key bindings: Changing Key Bindings.
* changing to another buffer: Current Buffer.
* changing window size: Resizing Windows.
* char-after: Near Point.
* char-equal: Text Comparison.
* char-or-string-p: Predicates for Strings.
* char-syntax: Syntax Table Functions.
* char-to-string: String Conversion.
* character arrays: Strings and Characters.
* character case: Character Case.
* character insertion: Commands for Insertion.
* character printing: Describing Characters.
* character set (in regexp): Syntax of Regexps.
* character to string: String Conversion.
* character width: Columns.
* characters: Strings and Characters.
* characters for interactive codes: Interactive Codes.
* child process: Processes.
* cleanup forms: Cleanups.
* clear-abbrev-table: Abbrev Tables.
* clear-visited-file-modtime: Modification Time.
* close parenthesis: Blinking.
* codes, interactive, description of: Interactive Codes.
* columns: Columns.
* command: What Is a Function.
* command descriptions: A Sample Function Description.
* command history: Command History.
* command in keymap: Key Lookup.
* command line arguments: Command Line Arguments.
* command line options: Command Line Arguments.
* command loop: Command Loop.
* command loop, recursive: Recursive Editing.
* command-execute: Interactive Call.
* command-history: Command History.
* command-history-map: Standard Keymaps.
* command-line: Command Line Arguments.
* command-line-args: Command Line Arguments.
* command-line-processed: Command Line Arguments.
* command-switch-alist: Command Line Arguments.
* commandp: Interactive Call.
* commands, defining: Defining Commands.
* comment syntax: Syntax Class Table.
* comments: Comments.
* comparison of modification time: Modification Time.
* compilation: Byte Compilation.
* compilation functions: Compilation Functions.
* complete key: Keymap Terms.
* completing-read: Minibuffer Completion.
* completion: Completion.
* completion, Lisp symbol: Lisp Symbol Completion.
* completion, file name: File Name Completion.
* completion-auto-help: Completion Commands.
* completion-ignore-case: Basic Completion.
* completion-ignored-extensions: File Name Completion.
* complex arguments: Minibuffers.
* complex command: Command History.
* concat: Creating Strings.
* concatenating lists: Rearrangement.
* concatenating strings: Creating Strings.
* cond: Conditionals.
* condition name: Error Names.
* condition-case: Handling Errors.
* conditional evaluation: Conditionals.
* cons: Building Lists.
* cons cell as box: Lists as Boxes.
* cons cells: Building Lists.
* consing: Building Lists.
* consp: List-related Predicates.
* continuation lines: Truncation.
* continue-process: Signals to Processes.
* control character key constants: Changing Key Bindings.
* control character printing: Describing Characters.
* control characters: Character Type.
* control characters in display: Control Char Display.
* control characters, reading: Keyboard Input.
* control structures: Control Structures.
* conventions for writing minor modes: Minor Mode Conventions.
* conversion of strings: String Conversion.
* copy-alist: Association Lists.
* copy-file: Changing File Attributes.
* copy-keymap: Creating Keymaps.
* copy-marker: Creating Markers.
* copy-rectangle-to-register: Registers.
* copy-region-as-kill: Kill Functions.
* copy-sequence: Sequence Functions.
* copy-syntax-table: Syntax Table Functions.
* copy-to-register: Registers.
* copying alists: Association Lists.
* copying files: Changing File Attributes.
* copying lists: Building Lists.
* copying sequences: Sequence Functions.
* copying strings: Creating Strings.
* copying vectors: Vectors.
* count-lines: Text Lines.
* count-loop: A Sample Function Description.
* counting columns: Columns.
* create-file-buffer: Subroutines of Visiting.
* creating buffers: Creating Buffers.
* creating keymaps: Creating Keymaps.
* ctl-arrow: Control Char Display.
* ctl-x-4-map: Prefix Keys.
* ctl-x-map: Prefix Keys.
* current binding: Local Variables.
* current buffer: Current Buffer.
* current buffer excursion: Excursions.
* current buffer mark: The Mark.
* current buffer position: Point.
* current command: Command Loop Info.
* current stack frame: Using Debugger.
* current-buffer: Current Buffer.
* current-column: Columns.
* current-global-map: Global and Local Keymaps.
* current-indentation: Primitive Indent.
* current-local-map: Global and Local Keymaps.
* current-prefix-arg: Prefix Command Arguments.
* current-time-string: System Environment.
* current-window-configuration: Window Configurations.
* cursor-in-echo-area: The Echo Area.
* cyclic ordering of windows: Cyclic Window Ordering.
* data type: Types of Lisp Object.
* debug: Invoking the Debugger.
* debug-on-entry: Function Debugging.
* debug-on-error: Error Debugging.
* debug-on-next-call: Internals of Debugger.
* debug-on-quit: Infinite Loops.
* debugger: Internals of Debugger.
* debugger: Debugger.
* debugger command list: Debugger Commands.
* debugger-mode-map: Standard Keymaps.
* debugging errors: Error Debugging.
* debugging specific functions: Function Debugging.
* decrement field of register: List Type.
* deep binding: Impl of Scope.
* default argument string: Interactive Codes.
* default init file: Init File.
* default value: Default Value.
* default-abbrev-mode: Abbrev Mode.
* default-case-fold-search: Searching and Case.
* default-ctl-arrow: Control Char Display.
* default-directory: File Name Expansion.
* default-directory: Subprocess Creation.
* default-fill-column: Filling.
* default-major-mode: Auto Major Mode.
* default-mode-line-format: Mode Line Variables.
* default-subprocess-input-handler: VMS Subprocesses.
* default-truncate-lines: Truncation.
* default-value: Default Value.
* defconst: Defining Variables.
* define-abbrev: Defining Abbrevs.
* define-abbrev-table: Abbrev Tables.
* define-key: Changing Key Bindings.
* define-prefix-command: Prefix Keys.
* defining a function: Defining Functions.
* defining commands: Defining Commands.
* defining-kbd-macro: Keyboard Macros.
* definition of a symbol: Definitions.
* defmacro: Defining Macros.
* defun: Defining Functions.
* defvar: Defining Variables.
* delete previous char: Deletion.
* delete-auto-save-file-if-necessary: Auto-Saving.
* delete-auto-save-files: Auto-Saving.
* delete-backward-char: Deletion.
* delete-blank-lines: User-Level Deletion.
* delete-char: Deletion.
* delete-exited-processes: Deleting Processes.
* delete-file: Changing File Attributes.
* delete-horizontal-space: User-Level Deletion.
* delete-indentation: User-Level Deletion.
* delete-other-windows: Deleting Windows.
* delete-process: Deleting Processes.
* delete-region: Deletion.
* delete-window: Deleting Windows.
* delete-windows-on: Deleting Windows.
* deleting files: Changing File Attributes.
* deleting processes: Deleting Processes.
* deleting whitespace: User-Level Deletion.
* deleting windows: Deleting Windows.
* deletion of elements: Sets And Lists.
* deletion vs killing: Deletion.
* delq: Sets And Lists.
* describe-bindings: Scanning Keymaps.
* describe-mode: Mode Help.
* describe-syntax: Syntax Table Functions.
* description for interactive codes: Interactive Codes.
* description format: Format of Descriptions.
* diagrams, boxed, for lists: List Type.
* digit-argument: Prefix Command Arguments.
* ding: Beeping.
* directory name: Directory Names.
* directory part (of file name): File Name Components.
* directory-file-name: Directory Names.
* directory-files: Contents of Directories.
* directory-oriented functions: Contents of Directories.
* dired-kept-versions: Numbered Backups.
* dired-mode-map: Standard Keymaps.
* disable undo: Undo.
* disable-command: Disabling Commands.
* disabled: Disabling Commands.
* disabled command: Disabling Commands.
* disabled-command-hook: Disabling Commands.
* disassemble: Disassembly.
* disassembled byte-code: Disassembly.
* discard input: Keyboard Input.
* discard-input: Keyboard Input.
* display columns: Screen Attributes.
* display lines: Screen Attributes.
* display-buffer: Displaying Buffers.
* display-completion-list: Completion Commands.
* displaying a buffer: Displaying Buffers.
* do-auto-save: Auto-Saving.
* doctor-mode-map: Standard Keymaps.
* documentation: Accessing Documentation.
* documentation conventions: Documentation Basics.
* documentation for major mode: Mode Help.
* documentation notation: Evaluation Notation.
* documentation of function: Function Documentation.
* documentation strings: Documentation.
* documentation, keys in: Keys in Documentation.
* documentation-property: Accessing Documentation.
* dotted pair notation: Dotted Pair Notation.
* double-quote in strings: String Type.
* down-list: List Motion.
* downcase: Character Case.
* downcase-region: Case Changes.
* downcase-word: Case Changes.
* downcasing in lookup-key: Keyboard Input.
* dribble file: Terminal Input.
* dump-emacs: Building Emacs.
* dynamic scoping: Variable Scoping.
* echo area: The Echo Area.
* echo-keystrokes: Command Loop Info.
* edit-abbrevs-map: Standard Keymaps.
* edit-and-eval-command: Object from Minibuffer.
* edit-tab-stops-map: Standard Keymaps.
* editing types: Editing Types.
* editor command loop: Command Loop.
* electric-buffer-menu-mode-map: Standard Keymaps.
* electric-future-map: A Sample Variable Description.
* electric-history-map: Standard Keymaps.
* element (of list): Lists.
* elements of sequences: Sequence Functions.
* elt: Sequence Functions.
* emacs-build-time: Building Emacs.
* emacs-lisp-mode-map: Standard Keymaps.
* emacs-lisp-mode-syntax-table: Standard Syntax Tables.
* emacs-version: Building Emacs.
* emacs-version: Building Emacs.
* empty list: List Type.
* enable-command: Disabling Commands.
* enable-recursive-minibuffers: Minibuffer Misc.
* end of buffer marker: Creating Markers.
* end-of-buffer: Buffer End Motion.
* end-of-file: Input Functions.
* end-of-file: Parsing Expressions.
* end-of-file: Parsing Expressions.
* end-of-line: Text Lines.
* enlarge-window: Resizing Windows.
* enlarge-window-horizontally: Resizing Windows.
* environment: Intro Eval.
* environment variable access: System Environment.
* environment variables and subprocesses: Subprocess Creation.
* eobp: Near Point.
* eolp: Near Point.
* eq: Equality Predicates.
* equal: Equality Predicates.
* equality: Equality Predicates.
* erase-buffer: Deletion.
* error: Signaling Errors.
* error cleanup: Cleanups.
* error debugging: Error Debugging.
* error display: The Echo Area.
* error handler: Handling Errors.
* error message notation: Error Messages.
* error name: Error Names.
* error symbol: Error Names.
* error-conditions: Error Names.
* errors: Errors.
* esc-map: Prefix Keys.
* escape: Character Type.
* escape characters: Output Functions.
* escape characters in printing: Output Functions.
* escape sequence: Character Type.
* eval: Eval.
* eval-current-buffer: Eval.
* eval-minibuffer: Object from Minibuffer.
* eval-region: Eval.
* evaluated expression argument: Interactive Codes.
* evaluation: Evaluation.
* evaluation error: Local Variables.
* evaluation notation: Evaluation Notation.
* evaluation of buffer contents: Eval.
* examining windows: Buffers and Windows.
* examples of using interactive: Interactive Examples.
* excursion: Excursions.
* exec-directory: Subprocess Creation.
* exec-path: Subprocess Creation.
* execute program: Subprocess Creation.
* execute with prefix argument: Interactive Call.
* execute-extended-command: Interactive Call.
* execute-kbd-macro: Keyboard Macros.
* executing-macro: Keyboard Macros.
* exit: Recursive Editing.
* exit recursive editing: Recursive Editing.
* exit-minibuffer: Minibuffer Misc.
* exit-recursive-edit: Recursive Editing.
* exiting Emacs: Getting Out.
* expand-file-name: File Name Expansion.
* expansion of file names: File Name Expansion.
* expansion of macros: Expansion.
* expression: Intro Eval.
* extent: Variable Scoping.
* false: nil and t.
* fboundp: Function Cells.
* featurep: Features.
* features: Features.
* features: Features.
* field width: Formatting Strings.
* file accessibility: Testing Accessibility.
* file age: Testing Accessibility.
* file attributes: File Attributes.
* file hard link: Changing File Attributes.
* file locks: File Locks.
* file mode specification error: Auto Major Mode.
* file modification time: Testing Accessibility.
* file name completion subroutines: File Name Completion.
* file name of buffer: Buffer File Name.
* file name of directory: Directory Names.
* file names: File Names.
* file names in directory: Contents of Directories.
* file open error: Subroutines of Visiting.
* file symbolic links: Kinds of Files.
* file with multiple names: Changing File Attributes.
* file-already-exists: Changing File Attributes.
* file-attributes: File Attributes.
* file-directory-p: Kinds of Files.
* file-error: How Programs Do Loading.
* file-exists-p: Testing Accessibility.
* file-locked: File Locks.
* file-locked-p: File Locks.
* file-modes: File Attributes.
* file-name-absolute-p: Relative File Names.
* file-name-all-completions: File Name Completion.
* file-name-all-versions: Contents of Directories.
* file-name-as-directory: Directory Names.
* file-name-completion: File Name Completion.
* file-name-directory: File Name Components.
* file-name-nondirectory: File Name Components.
* file-name-sans-versions: File Name Components.
* file-newer-than-file-p: Testing Accessibility.
* file-nlinks: File Attributes.
* file-precious-flag: Saving Buffers.
* file-readable-p: Testing Accessibility.
* file-supersession: Modification Time.
* file-symlink-p: Kinds of Files.
* file-writable-p: Testing Accessibility.
* fill-column: Filling.
* fill-individual-paragraphs: Filling.
* fill-paragraph: Filling.
* fill-region: Filling.
* fill-region-as-paragraph: Filling.
* fillarray: Array Functions.
* filling a paragraph: Filling.
* filling, automatic: Auto Filling.
* filling, explicit: Filling.
* filter function: Filter Functions.
* find-alternate-file: Visiting Functions.
* find-backup-file-name: Backup Names.
* find-file: Visiting Functions.
* find-file-hooks: Visiting Functions.
* find-file-noselect: Visiting Functions.
* find-file-not-found-hooks: Visiting Functions.
* find-file-other-window: Visiting Functions.
* find-file-read-only: Visiting Functions.
* finding files: Visiting Files.
* finding windows: Selecting Windows.
* fixup-whitespace: User-Level Deletion.
* floating point: Number Type.
* flow control characters: Flow Control.
* flow control example: Terminal Input.
* flush input: Keyboard Input.
* fmakunbound: Function Cells.
* following-char: Near Point.
* fonts: Some Terms.
* foo: A Sample Function Description.
* for: Argument Evaluation.
* forcing redisplay: Waiting.
* format: Formatting Strings.
* format specification: Formatting Strings.
* formatting strings: Formatting Strings.
* formfeed: Character Type.
* forms: Intro Eval.
* forward-char: Character Motion.
* forward-line: Text Lines.
* forward-list: List Motion.
* forward-sexp: List Motion.
* forward-to-indentation: Motion by Indent.
* forward-word: Word Motion.
* free list: Garbage Collection.
* fset: Function Cells.
* ftp-login: Cleanups.
* full keymap: Creating Keymaps.
* funcall: Calling Functions.
* function: Anonymous Functions.
* function: What Is a Function.
* function call: Function Forms.
* function call debugging: Function Debugging.
* function cell: Symbol Components.
* function cell in autoload: Autoload.
* function definition: Function Names.
* function descriptions: A Sample Function Description.
* function form evaluation: Function Forms.
* function input stream: Input Streams.
* function invocation: Calling Functions.
* function keys: Terminal-Specific.
* function name: Function Names.
* function output stream: Output Streams.
* function quoting: Anonymous Functions.
* function-keymap: Standard Keymaps.
* functionals: Calling Functions.
* functions in modes: Major Mode Conventions.
* functions, making them interactive: Defining Commands.
* fundamental-mode: Auto Major Mode.
* fundamental-mode-abbrev-table: Standard Abbrev Tables.
* fundamental-mode-map: Standard Keymaps.
* garbage collection protection: Writing Emacs Primitives.
* garbage collector: Garbage Collection.
* garbage-collect: Garbage Collection.
* gc-cons-threshold: Garbage Collection.
* generate-new-buffer: Creating Buffers.
* get: Property Lists.
* get-buffer: Buffer Names.
* get-buffer-create: Creating Buffers.
* get-buffer-process: Process Buffers.
* get-buffer-window: Buffers and Windows.
* get-file-buffer: Buffer File Name.
* get-file-char: Input Streams.
* get-largest-window: Selecting Windows.
* get-lru-window: Selecting Windows.
* get-process: Process Information.
* get-register: Registers.
* getenv: System Environment.
* global binding: Local Variables.
* global keymap: Global and Local Keymaps.
* global variable: Global Variables.
* global-abbrev-table: Standard Abbrev Tables.
* global-key-binding: Global and Local Keymaps.
* global-map: Global and Local Keymaps.
* global-mode-string: Mode Line Variables.
* global-set-key: Key Binding Commands.
* global-unset-key: Key Binding Commands.
* goal column: Vertical Motion.
* goal-column: Vertical Motion.
* goto-char: Character Motion.
* goto-line: Text Lines.
* hack-local-variables: Auto Major Mode.
* handling errors: Handling Errors.
* hash notation: Printed Representation.
* hashing: Creating Symbols.
* help for major mode: Mode Help.
* help-char: Help Functions.
* help-command: Help Functions.
* help-form: Help Functions.
* help-map: Help Functions.
* help-map: Prefix Keys.
* highlighting: Screen Attributes.
* history of commands: Command History.
* hook: Hooks.
* horizontal position: Columns.
* horizontal scrolling: Horizontal Scrolling.
* horizontal split lines: Truncation.
* identity: Calling Functions.
* if: Conditionals.
* ignore: Calling Functions.
* implicit progn: Sequencing.
* inc: Simple Macro.
* indent-according-to-mode: Mode-Specific Indent.
* indent-for-tab-command: Mode-Specific Indent.
* indent-line-function: Mode-Specific Indent.
* indent-region: Region Indent.
* indent-region-function: Region Indent.
* indent-relative: Relative Indent.
* indent-relative-maybe: Relative Indent.
* indent-rigidly: Region Indent.
* indent-tabs-mode: Primitive Indent.
* indent-to: Primitive Indent.
* indent-to-left-margin: Mode-Specific Indent.
* indentation: Indentation.
* indenting with parentheses: Parsing Expressions.
* indirection: Classifying Lists.
* infinite loops: Infinite Loops.
* infinite recursion: Local Variables.
* inhibit-default-init: Init File.
* inhibit-local-variables: Auto Major Mode.
* inhibit-quit: Quitting.
* inhibit-startup-message: Start-up Summary.
* init file: Init File.
* initial-major-mode: Auto Major Mode.
* initialization: Start-up Summary.
* innermost containing parentheses: Parsing Expressions.
* input stream: Input Streams.
* input-pending-p: Keyboard Input.
* insert: Insertion.
* insert-abbrev-table-description: Abbrev Tables.
* insert-before-markers: Insertion.
* insert-buffer: Commands for Insertion.
* insert-buffer-substring: Insertion.
* insert-char: Insertion.
* insert-default-directory: Reading File Names.
* insert-file: Reading from Files.
* insert-file-contents: Reading from Files.
* insert-register: Registers.
* inserting killed text: Yank Commands.
* insertion before point: Insertion.
* insertion of text: Insertion.
* inside comment: Parsing Expressions.
* inside string: Parsing Expressions.
* int-to-string: String Conversion.
* integer to decimal: String Conversion.
* integer to hexadecimal: Formatting Strings.
* integer to octal: Formatting Strings.
* integer to string: String Conversion.
* integer-or-marker-p: Predicates on Markers.
* integerp: Predicates on Numbers.
* integers: Numbers.
* interactive: Using Interactive.
* interactive call: Interactive Call.
* interactive code description: Interactive Codes.
* interactive completion: Interactive Codes.
* interactive function: Defining Commands.
* interactive-p: Interactive Call.
* intern: Creating Symbols.
* intern-soft: Creating Symbols.
* internals, of buffer: Buffer Internals.
* internals, of process: Process Internals.
* internals, of window: Window Internals.
* interning: Creating Symbols.
* interpreter: Evaluation.
* interrupt-process: Signals to Processes.
* invalid function: Classifying Lists.
* invalid prefix characters error: Changing Key Bindings.
* invalid-function: Key Lookup.
* invalid-function: Classifying Lists.
* invalid-read-syntax: Printed Representation.
* invalid-regexp: Syntax of Regexps.
* inverse-video: Screen Attributes.
* iteration: Iteration.
* joining lists: Rearrangement.
* just-one-space: User-Level Deletion.
* justify-current-line: Filling.
* kept-new-versions: Numbered Backups.
* kept-old-versions: Numbered Backups.
* key: Keymap Terms.
* key binding: Keymap Terms.
* key lookup: Key Lookup.
* key sequence: Keyboard Input.
* key sequence error: Changing Key Bindings.
* key-binding: Global and Local Keymaps.
* key-description: Describing Characters.
* keyboard macro execution: Interactive Call.
* keyboard macro termination: Beeping.
* keyboard macros: Keyboard Macros.
* keyboard-quit: Quitting.
* keyboard-translate-table: Terminal Input.
* keymap: Keymaps.
* keymap entry: Key Lookup.
* keymap in keymap: Key Lookup.
* keymapp: Creating Keymaps.
* keymaps in modes: Major Mode Conventions.
* keys in documentation strings: Keys in Documentation.
* keystroke: Keymap Terms.
* keystroke command: What Is a Function.
* kill command repetition: Command Loop Info.
* kill ring: The Kill Ring.
* kill-all-local-variables: Creating Buffer-Local.
* kill-buffer: Killing Buffers.
* kill-emacs: Killing Emacs.
* kill-emacs-hook: Killing Emacs.
* kill-line: Kill Functions.
* kill-local-variable: Creating Buffer-Local.
* kill-process: Signals to Processes.
* kill-region: Kill Functions.
* kill-ring: Kill Ring Internals.
* kill-ring-max: Kill Ring Internals.
* kill-ring-yank-pointer: Kill Ring Internals.
* killing Emacs: Killing Emacs.
* killing buffers: Killing Buffers.
* lambda expression: Lambda Expressions.
* lambda expression in hook: Hooks.
* lambda list: Lambda Components.
* last-abbrev: Abbrev Expansion.
* last-abbrev-location: Abbrev Expansion.
* last-abbrev-text: Abbrev Expansion.
* last-command: Command Loop Info.
* last-command-char: Command Loop Info.
* last-input-char: Keyboard Input.
* last-kbd-macro: Keyboard Macros.
* left-margin: Mode-Specific Indent.
* length: Sequence Functions.
* let: Local Variables.
* let*: Local Variables.
* lexical comparison: Text Comparison.
* library: Loading.
* library compilation: Compilation Functions.
* line wrapping: Truncation.
* lines: Text Lines.
* lines in region: Text Lines.
* linking files: Changing File Attributes.
* lisp-complete-symbol: Lisp Symbol Completion.
* lisp-interaction-mode-map: Standard Keymaps.
* lisp-mode-abbrev-table: Standard Abbrev Tables.
* lisp-mode-map: Standard Keymaps.
* list: Building Lists.
* list: Lists.
* list elements: List Elements.
* list form evaluation: Classifying Lists.
* list in keymap: Key Lookup.
* list length: Sequence Functions.
* list motion: List Motion.
* list-buffers: The Buffer List.
* list-directory: Contents of Directories.
* list-directory-brief-switches: Contents of Directories.
* list-directory-verbose-switches: Contents of Directories.
* list-processes: Process Information.
* listp: List-related Predicates.
* lists and cons cells: Cons Cells.
* lists as sets: Sets And Lists.
* lists represented as boxes: Lists as Boxes.
* literal evaluation: Self-Evaluating Forms.
* ln: Changing File Attributes.
* load: How Programs Do Loading.
* load error with provide: Features.
* load errors: How Programs Do Loading.
* load-average: System Environment.
* load-in-progress: How Programs Do Loading.
* load-path: How Programs Do Loading.
* load-path: How Programs Do Loading.
* loading: Loading.
* loadst: Subprocess Creation.
* local binding: Local Variables.
* local keymap: Global and Local Keymaps.
* local variables: Local Variables.
* local-abbrev-table: Standard Abbrev Tables.
* local-key-binding: Global and Local Keymaps.
* local-set-key: Key Binding Commands.
* local-unset-key: Key Binding Commands.
* lock-buffer: File Locks.
* logand: Bitwise Operations.
* logical and: Bitwise Operations.
* logical exclusive or: Bitwise Operations.
* logical inclusive or: Bitwise Operations.
* logical not: Bitwise Operations.
* logical shift: Bitwise Operations.
* logior: Bitwise Operations.
* lognot: Bitwise Operations.
* logxor: Bitwise Operations.
* looking-at: Regexp Search.
* lookup-key: Functions for Key Lookup.
* loops, infinite: Infinite Loops.
* lower case: Character Case.
* ls: Contents of Directories.
* lsh: Bitwise Operations.
* macro: What Is a Function.
* macro argument evaluation: Argument Evaluation.
* macro call: Expansion.
* macro call evaluation: Macro Forms.
* macro compilation: Compilation Functions.
* macro descriptions: A Sample Function Description.
* macro expansion: Expansion.
* macroexpand: Expansion.
* macros: Macros.
* major mode: Major Modes.
* major mode keymap: Global and Local Keymaps.
* major-mode: Mode Help.
* make-abbrev-table: Abbrev Tables.
* make-auto-save-file-name: Auto-Saving.
* make-backup-file-name: Backup Names.
* make-backup-files: Making Backups.
* make-keymap: Creating Keymaps.
* make-list: Building Lists.
* make-local-variable: Creating Buffer-Local.
* make-marker: Creating Markers.
* make-sparse-keymap: Creating Keymaps.
* make-string: Creating Strings.
* make-symbol: Creating Symbols.
* make-symbolic-link: Changing File Attributes.
* make-syntax-table: Syntax Table Functions.
* make-temp-name: Unique File Names.
* make-variable-buffer-local: Creating Buffer-Local.
* make-vector: Vectors.
* makunbound: Void Variables.
* mapatoms: Creating Symbols.
* mapcar: Mapping Functions.
* mapconcat: Mapping Functions.
* mapping functions: Mapping Functions.
* mark: The Mark.
* mark excursion: Excursions.
* mark ring: The Mark.
* mark, the: The Mark.
* mark-marker: The Mark.
* mark-ring: The Mark.
* mark-ring-max: The Mark.
* marker argument: Interactive Codes.
* marker garbage collection: Overview of Markers.
* marker input stream: Input Streams.
* marker output stream: Output Streams.
* marker relocation: Overview of Markers.
* marker-buffer: Information from Markers.
* marker-position: Information from Markers.
* markerp: Predicates on Markers.
* markers: Markers.
* markers as numbers: Overview of Markers.
* match-beginning: Match Data.
* match-data: Saving Match Data.
* match-end: Match Data.
* max: Comparison of Numbers.
* max-lisp-eval-depth: Eval.
* max-specpdl-size: Local Variables.
* membership in a list: Sets And Lists.
* memory allocation: Garbage Collection.
* memq: Sets And Lists.
* message: The Echo Area.
* meta character key constants: Changing Key Bindings.
* meta character printing: Describing Characters.
* meta characters: Character Type.
* meta characters in keys: Creating Keymaps.
* meta-flag: Terminal Input.
* meta-prefix-char: Functions for Key Lookup.
* min: Comparison of Numbers.
* minibuffer: Minibuffers.
* minibuffer input: Recursive Editing.
* minibuffer window: Cyclic Window Ordering.
* minibuffer-complete: Completion Commands.
* minibuffer-complete-and-exit: Completion Commands.
* minibuffer-complete-word: Completion Commands.
* minibuffer-completion-confirm: Completion Commands.
* minibuffer-completion-help: Completion Commands.
* minibuffer-completion-predicate: Completion Commands.
* minibuffer-completion-table: Completion Commands.
* minibuffer-depth: Minibuffer Misc.
* minibuffer-help-form: Minibuffer Misc.
* minibuffer-local-completion-map: Completion Commands.
* minibuffer-local-map: Text from Minibuffer.
* minibuffer-local-must-match-map: Completion Commands.
* minibuffer-local-ns-map: Text from Minibuffer.
* minibuffer-scroll-window: Minibuffer Misc.
* minibuffer-window: Minibuffer Misc.
* minimum window size: Resizing Windows.
* minor mode: Minor Modes.
* minor mode conventions: Minor Mode Conventions.
* minor-mode-alist: Mode Line Variables.
* mode: Modes.
* mode help: Mode Help.
* mode line: Mode Line Format.
* mode line construct: Mode Line Data.
* mode loading: Major Mode Conventions.
* mode-line-buffer-identification: Mode Line Variables.
* mode-line-format: Mode Line Data.
* mode-line-inverse-video: Screen Attributes.
* mode-line-modified: Mode Line Variables.
* mode-line-process: Mode Line Variables.
* mode-name: Mode Line Variables.
* mode-specific-map: Prefix Keys.
* modification flag (of buffer): Buffer Modification.
* modification of lists: Rearrangement.
* modification time, comparison of: Modification Time.
* modify-syntax-entry: Syntax Table Functions.
* modulus: Arithmetic Operations.
* momentary-string-display: Temporary Displays.
* mouse-map: Standard Keymaps.
* move-marker: Changing Markers.
* move-to-column: Columns.
* move-to-window-line: Screen Lines.
* multiple windows: Basic Windows.
* named function: Function Names.
* narrow-to-page: Narrowing.
* narrow-to-region: Narrowing.
* narrowing: Narrowing.
* natnump: Predicates on Numbers.
* natural numbers: Predicates on Numbers.
* nconc: Rearrangement.
* negative-argument: Prefix Command Arguments.
* new file message: Subroutines of Visiting.
* newline: Commands for Insertion.
* newline: Character Type.
* newline and Auto Fill mode: Commands for Insertion.
* newline in print: Output Functions.
* newline in strings: String Type.
* newline-and-indent: Mode-Specific Indent.
* next input: Keyboard Input.
* next-line: Vertical Motion.
* next-screen-context-lines: Vertical Scrolling.
* next-window: Cyclic Window Ordering.
* nil: Constant Variables.
* nlistp: List-related Predicates.
* no-catch: Catch and Throw.
* no-redraw-on-reenter: Screen Attributes.
* nondirectory part (of file name): File Name Components.
* noninteractive: Batch Mode.
* noninteractive use: Batch Mode.
* nonlocal exits: Nonlocal Exits.
* nonprinting characters, reading: Keyboard Input.
* normal-mode: Auto Major Mode.
* not: Combining Conditions.
* not-modified: Buffer Modification.
* nreverse: Rearrangement.
* nth: List Elements.
* nthcdr: List Elements.
* null: List-related Predicates.
* number equality: Comparison of Numbers.
* numbers: Numbers.
* numeric prefix: Formatting Strings.
* numeric prefix argument: Prefix Command Arguments.
* numeric prefix argument usage: Interactive Codes.
* obarray: Creating Symbols.
* obarray: Creating Symbols.
* obarray in completion: Basic Completion.
* object: Types of Lisp Object.
* object internals: Object Internals.
* object to string: Output Functions.
* obsolete buffer: Modification Time.
* occur-mode-map: Standard Keymaps.
* octal character code: Character Type.
* octal character input: Keyboard Input.
* octal to character: Commands for Insertion.
* one-window-p: Splitting Windows.
* only-global-abbrevs: Defining Abbrevs.
* open-dribble-file: Terminal Input.
* open-line: Commands for Insertion.
* open-network-stream: TCP.
* open-termscript: Terminal Output.
* operating system environment: System Environment.
* option descriptions: A Sample Variable Description.
* optional arguments: Argument List.
* options on command line: Command Line Arguments.
* or: Combining Conditions.
* ordering of windows, cyclic: Cyclic Window Ordering.
* other-buffer: The Buffer List.
* other-window: Cyclic Window Ordering.
* output from processes: Output from Processes.
* output stream: Output Streams.
* overflow: Number Basics.
* overlay arrow: Overlay Arrow.
* overlay-arrow-position: Overlay Arrow.
* overlay-arrow-string: Overlay Arrow.
* overwrite-mode: Commands for Insertion.
* overwrite-mode: Commands for Insertion.
* padding: Formatting Strings.
* page-delimiter: Standard Regexps.
* paragraph-separate: Standard Regexps.
* paragraph-start: Standard Regexps.
* parent process: Processes.
* parenthesis: List Type.
* parenthesis depth: Parsing Expressions.
* parenthesis matching: Blinking.
* parenthesis syntax: Syntax Class Table.
* parse state: Parsing Expressions.
* parse-partial-sexp: Parsing Expressions.
* parse-sexp-ignore-comments: Parsing Expressions.
* parsing: Syntax Tables.
* pausing: Waiting.
* peculiar error: Error Names.
* peeking at input: Keyboard Input.
* percent symbol in mode line: Mode Line Data.
* permission: File Attributes.
* pipes: Asynchronous Processes.
* plist: Property Lists.
* point: Point.
* point: Point.
* point excursion: Excursions.
* point in window: Window Point.
* point with narrowing: Point.
* point-marker: Creating Markers.
* point-max: Point.
* point-max-marker: Creating Markers.
* point-min: Point.
* point-min-marker: Creating Markers.
* point-to-register: Registers.
* pop-mark: The Mark.
* pop-to-buffer: Displaying Buffers.
* pop-up-windows: Displaying Buffers.
* pos-visible-in-window-p: Window Start.
* position (in buffer): Positions.
* position argument: Interactive Codes.
* position in window: Window Point.
* preceding-char: Near Point.
* predicates: Type Predicates.
* prefix argument: Prefix Command Arguments.
* prefix argument unreading: Keyboard Input.
* prefix command: Prefix Keys.
* prefix key: Prefix Keys.
* prefix-arg: Prefix Command Arguments.
* prefix-numeric-value: Prefix Command Arguments.
* prepend-to-register: Registers.
* preventing prefix key: Key Lookup.
* previous complete subexpression: Parsing Expressions.
* previous-line: Vertical Motion.
* previous-window: Cyclic Window Ordering.
* primitive: What Is a Function.
* primitive function internals: Writing Emacs Primitives.
* primitive type: Types of Lisp Object.
* prin1: Output Functions.
* prin1-to-string: Output Functions.
* princ: Output Functions.
* print: Output Functions.
* print example: Output Streams.
* print name cell: Symbol Components.
* print-escape-newlines: Output Functions.
* print-help-return-message: Help Functions.
* print-length: Output Functions.
* printed representation: Printed Representation.
* printed representation for characters: Character Type.
* printing: Streams Intro.
* printing limits: Output Functions.
* printing notation: Printing Notation.
* process: Processes.
* process filter: Filter Functions.
* process input: Input to Processes.
* process internals: Process Internals.
* process output: Output from Processes.
* process sentinel: Sentinels.
* process signals: Signals to Processes.
* process-buffer: Process Buffers.
* process-command: Process Information.
* process-connection-type: Asynchronous Processes.
* process-environment: Subprocess Creation.
* process-exit-status: Process Information.
* process-filter: Filter Functions.
* process-id: Process Information.
* process-kill-without-query: Deleting Processes.
* process-list: Process Information.
* process-mark: Process Buffers.
* process-name: Process Information.
* process-send-eof: Input to Processes.
* process-send-region: Input to Processes.
* process-send-string: Input to Processes.
* process-sentinel: Sentinels.
* process-status: Process Information.
* processp: Processes.
* prog1: Sequencing.
* prog2: Sequencing.
* progn: Sequencing.
* program arguments: Subprocess Creation.
* program directories: Subprocess Creation.
* programmed completion: Programmed Completion.
* programming types: Programming Types.
* property list: Property Lists.
* property list cell: Symbol Components.
* property lists vs association lists: Property Lists.
* protected forms: Cleanups.
* provide: Features.
* providing features: Features.
* pure storage: Pure Storage.
* pure-bytes-used: Pure Storage.
* purecopy: Pure Storage.
* purify-flag: Pure Storage.
* push-mark: The Mark.
* put: Property Lists.
* querying the user: Yes-or-No Queries.
* question mark in character constant: Character Type.
* quietly-read-abbrev-file: Abbrev Files.
* quit-flag: Quitting.
* quit-process: Signals to Processes.
* quitting: Quitting.
* quitting from infinite loop: Infinite Loops.
* quote: Quoting.
* quote character: Parsing Expressions.
* quoted-insert: Commands for Insertion.
* quoting: Quoting.
* quoting characters in printing: Output Functions.
* quoting using apostrophe: Quoting.
* random: Random Numbers.
* random numbers: Random Numbers.
* rassq: Association Lists.
* raw prefix argument: Prefix Command Arguments.
* raw prefix argument usage: Interactive Codes.
* re-search-backward: Regexp Search.
* re-search-forward: Regexp Search.
* read: Input Functions.
* read command name: Interactive Call.
* read syntax: Printed Representation.
* read syntax for characters: Character Type.
* read-buffer: High-Level Completion.
* read-char: Keyboard Input.
* read-command: High-Level Completion.
* read-file-name: Reading File Names.
* read-from-minibuffer: Text from Minibuffer.
* read-from-string: Input Functions.
* read-key-sequence: Keyboard Input.
* read-minibuffer: Object from Minibuffer.
* read-no-blanks-input: Text from Minibuffer.
* read-only buffer: Read Only Buffers.
* read-quoted-char: Keyboard Input.
* read-string: Text from Minibuffer.
* read-variable: High-Level Completion.
* reading: Streams Intro.
* reading interactive arguments: Interactive Codes.
* reading symbols: Creating Symbols.
* reals: Number Type.
* rearrangement of lists: Rearrangement.
* rebinding: Changing Key Bindings.
* recent-auto-save-p: Auto-Saving.
* recent-keys: Terminal Input.
* recenter: Vertical Scrolling.
* record command history: Interactive Call.
* recover-file: Reverting.
* recursion: Iteration.
* recursion-depth: Recursive Editing.
* recursive command loop: Recursive Editing.
* recursive editing level: Recursive Editing.
* recursive evaluation: Intro Eval.
* recursive-edit: Recursive Editing.
* redo: Undo.
* redraw-display: Refresh Screen.
* regexp: Regular Expressions.
* regexp alternative: Syntax of Regexps.
* regexp grouping: Syntax of Regexps.
* regexp searching: Regexp Search.
* regexp-quote: Syntax of Regexps.
* region argument: Interactive Codes.
* region, the: The Region.
* region-beginning: The Region.
* region-end: The Region.
* register-alist: Registers.
* register-to-point: Registers.
* registers: Registers.
* regular expression: Regular Expressions.
* regular expression searching: Regexp Search.
* regular expressions used standardly in editing: Standard Regexps.
* reindent-then-newline-and-indent: Mode-Specific Indent.
* relative file name: Relative File Names.
* rename-auto-save-file: Auto-Saving.
* rename-buffer: Buffer Names.
* rename-file: Changing File Attributes.
* renaming files: Changing File Attributes.
* repeat-complex-command-map: Command History.
* repeated loading: Repeated Loading.
* replace bindings: Changing Key Bindings.
* replace characters: Substitution.
* replace-buffer-in-windows: Buffers and Windows.
* replace-match: Match Data.
* require: Features.
* require-final-newline: Saving Buffers.
* requiring features: Features.
* resize redisplay: Screen Attributes.
* rest arguments: Argument List.
* restriction (in a buffer): Narrowing.
* resume, related to no-redraw-on-reenter: Screen Attributes.
* return: Character Type.
* reverse: Building Lists.
* reversing a list: Rearrangement.
* revert-buffer: Reverting.
* revert-buffer-function: Reverting.
* rm: Changing File Attributes.
* rotate-yank-pointer: Kill Ring Internals.
* rplaca: Modifying Lists.
* rplacd: Modifying Lists.
* run time stack: Internals of Debugger.
* run-hooks: Hooks.
* save-abbrevs: Abbrev Files.
* save-buffer: Saving Buffers.
* save-buffers-kill-emacs: Saving Buffers.
* save-excursion: Excursions.
* save-restriction: Narrowing.
* save-some-buffers: Saving Buffers.
* save-window-excursion: Window Configurations.
* saving window information: Window Configurations.
* scan-lists: Parsing Expressions.
* scan-sexps: Parsing Expressions.
* scope: Variable Scoping.
* screen attributes: Screen Attributes.
* screen layout: Window Configuration Type.
* screen of terminal: Basic Windows.
* screen size: Screen Attributes.
* screen-height: Screen Attributes.
* screen-width: Screen Attributes.
* scroll-down: Vertical Scrolling.
* scroll-left: Horizontal Scrolling.
* scroll-other-window: Vertical Scrolling.
* scroll-right: Horizontal Scrolling.
* scroll-step: Vertical Scrolling.
* scroll-up: Vertical Scrolling.
* scrolling vertically: Vertical Scrolling.
* search-backward: String Search.
* search-failed: String Search.
* search-forward: String Search.
* searching: Searching and Matching.
* searching and case: Searching and Case.
* searching for regexp: Regexp Search.
* select-window: Selecting Windows.
* selected window: Basic Windows.
* selected-window: Selecting Windows.
* selecting a buffer: Current Buffer.
* selecting windows: Selecting Windows.
* selective display: Selective Display.
* selective-display: Selective Display.
* selective-display-ellipses: Selective Display.
* self-evaluating form: Self-Evaluating Forms.
* self-insert-and-exit: Minibuffer Misc.
* self-insert-command: Commands for Insertion.
* self-insertion: Commands for Insertion.
* send-command-to-subprocess: VMS Subprocesses.
* send-string-to-terminal: Terminal Output.
* sending signals: Signals to Processes.
* sentence-end: Standard Regexps.
* sentinel: Sentinels.
* sequence: Sequences Arrays Vectors.
* sequence length: Sequence Functions.
* sequencep: Sequence Functions.
* set: Setting Variables.
* set-auto-mode: Auto Major Mode.
* set-buffer: Current Buffer.
* set-buffer-auto-saved: Auto-Saving.
* set-buffer-modified-p: Buffer Modification.
* set-default: Default Value.
* set-file-modes: Changing File Attributes.
* set-goal-column: Vertical Motion.
* set-input-mode: Terminal Input.
* set-mark: The Mark.
* set-mark-command: The Mark.
* set-marker: Changing Markers.
* set-process-buffer: Process Buffers.
* set-process-filter: Filter Functions.
* set-process-sentinel: Sentinels.
* set-register: Registers.
* set-screen-height: Screen Attributes.
* set-screen-width: Screen Attributes.
* set-syntax-table: Syntax Table Functions.
* set-visited-file-name: Buffer File Name.
* set-window-buffer: Buffers and Windows.
* set-window-configuration: Window Configurations.
* set-window-hscroll: Horizontal Scrolling.
* set-window-point: Window Point.
* set-window-start: Window Start.
* setcar: Setcar.
* setcdr: Setcdr.
* setplist: Property Lists.
* setprv: System Environment.
* setq: Setting Variables.
* setq-default: Default Value.
* sets: Sets And Lists.
* setting modes of files: Changing File Attributes.
* setting-constant: Constant Variables.
* sexp motion: List Motion.
* shadowing of variables: Local Variables.
* shallow binding: Impl of Scope.
* shrink-window: Resizing Windows.
* shrink-window-horizontally: Resizing Windows.
* side effect: Intro Eval.
* signal: Signaling Errors.
* signaling errors: Signaling Errors.
* signals: Signals to Processes.
* single-key-description: Describing Characters.
* sit-for: Waiting.
* size of window: Size of Window.
* skip-chars-backward: Skipping Characters.
* skip-chars-forward: Skipping Characters.
* skipping characters: Skipping Characters.
* skipping comments: Parsing Expressions.
* sleep-for: Waiting.
* sort: Rearrangement.
* sort-columns: Sorting.
* sort-fields: Sorting.
* sort-lines: Sorting.
* sort-numeric-fields: Sorting.
* sort-pages: Sorting.
* sort-paragraphs: Sorting.
* sort-regexp-fields: Sorting.
* sort-subr: Sorting.
* sorting lists: Rearrangement.
* sorting text: Sorting.
* sparse keymap: Creating Keymaps.
* spawn-subprocess: VMS Subprocesses.
* special form descriptions: A Sample Function Description.
* special form evaluation: Special Forms.
* special forms: Primitive Function Type.
* special forms for control structures: Control Structures.
* splicing (with backquote): Backquote.
* split-height-threshold: Displaying Buffers.
* split-line: Commands for Insertion.
* split-window: Splitting Windows.
* split-window-horizontally: Splitting Windows.
* split-window-vertically: Splitting Windows.
* splitting windows: Splitting Windows.
* stable sort: Rearrangement.
* stack trace: Internals of Debugger.
* stack-trace-on-error: Internals of Debugger.
* standard regular expressions used in editing: Standard Regexps.
* standard-input: Input Functions.
* standard-output: Output Functions.
* standard-syntax-table: Standard Syntax Tables.
* start up of Emacs: Start-up Summary.
* start-process: Asynchronous Processes.
* stop-process: Signals to Processes.
* stop-subprocess: VMS Subprocesses.
* stopping an infinite loop: Infinite Loops.
* store-match-data: Saving Match Data.
* stream (for printing): Output Streams.
* stream (for reading): Input Streams.
* string equality: Text Comparison.
* string in keymap: Key Lookup.
* string input stream: Input Streams.
* string length: Sequence Functions.
* string search: String Search.
* string to character: String Conversion.
* string to integer: String Conversion.
* string to object: Input Functions.
* string, writing a documentation string: Documentation Basics.
* string-equal: Text Comparison.
* string-lessp: Text Comparison.
* string-match: Regexp Search.
* string-to-char: String Conversion.
* string-to-int: String Conversion.
* string<: Text Comparison.
* string=: Text Comparison.
* stringp: Predicates for Strings.
* strings: Strings and Characters.
* strings, formatting them: Formatting Strings.
* subprocess: Processes.
* subr: What Is a Function.
* subrp: What Is a Function.
* subst-char-in-region: Substitution.
* substitute-command-keys: Keys in Documentation.
* substitute-in-file-name: File Name Expansion.
* substitute-key-definition: Changing Key Bindings.
* substituting keys in documentation: Keys in Documentation.
* substring: Creating Strings.
* suppress-keymap: Changing Key Bindings.
* suspend evaluation: Recursive Editing.
* suspend-emacs: Suspending Emacs.
* suspend-hook: Suspending Emacs.
* suspend-resume-hook: Suspending Emacs.
* suspending Emacs: Suspending Emacs.
* switch-to-buffer: Displaying Buffers.
* switch-to-buffer-other-window: Displaying Buffers.
* switches on command line: Command Line Arguments.
* switching to a buffer: Displaying Buffers.
* symbol: Symbols.
* symbol completion, Lisp: Lisp Symbol Completion.
* symbol components: Symbol Components.
* symbol equality: Creating Symbols.
* symbol evaluation: Symbol Forms.
* symbol function indirection: Classifying Lists.
* symbol in keymap: Key Lookup.
* symbol name hashing: Creating Symbols.
* symbol-function: Function Cells.
* symbol-name: Creating Symbols.
* symbol-plist: Property Lists.
* symbol-value: Accessing Variables.
* symbolp: Symbols.
* synchronous subprocess: Synchronous Processes.
* syntax classes: Syntax Descriptors.
* syntax descriptor: Syntax Descriptors.
* syntax flags: Syntax Flags.
* syntax for characters: Character Type.
* syntax table: Syntax Tables.
* syntax table example: Example Major Modes.
* syntax table internals: Syntax Table Internals.
* syntax tables in modes: Major Mode Conventions.
* syntax-table: Syntax Table Functions.
* syntax-table-p: Syntax Tables.
* system-name: System Environment.
* system-type: System Environment.
* t: Constant Variables.
* tab: Character Type.
* tab character width: Columns.
* tab deletion: Deletion.
* tab-stop-list: Indent Tabs.
* tab-to-tab-stop: Indent Tabs.
* tab-width: Control Char Display.
* tabs stops for indentation: Indent Tabs.
* tag on run time stack: Catch and Throw.
* temacs: Building Emacs.
* temp-buffer-show-hook: Temporary Displays.
* temporary-goal-column: Vertical Motion.
* term-file-prefix: Terminal-Specific.
* term-setup-hook: Terminal-Specific.
* termcap: Terminal-Specific.
* terminal input: Terminal Input.
* terminal output: Terminal Output.
* terminal screen: Basic Windows.
* terminal-specific initialization: Terminal-Specific.
* terminate keyboard macro: Keyboard Input.
* termscript file: Terminal Output.
* terpri: Output Functions.
* testing types: Type Predicates.
* text: Text.
* text insertion: Insertion.
* text parsing: Syntax Tables.
* text-char-description: Describing Characters.
* text-mode-abbrev-table: Standard Abbrev Tables.
* text-mode-map: Standard Keymaps.
* text-mode-syntax-table: Standard Syntax Tables.
* this-command: Command Loop Info.
* this-command-keys: Command Loop Info.
* throw: Catch and Throw.
* tiled windows: Basic Windows.
* toggle-read-only: Read Only Buffers.
* top-level: Recursive Editing.
* top-level form: Loading.
* track-eol: Vertical Motion.
* trim-versions-without-asking: Numbered Backups.
* true: nil and t.
* truncate-lines: Truncation.
* truncate-partial-width-windows: Truncation.
* truth value: nil and t.
* try-completion: Basic Completion.
* two's complement: Number Basics.
* type: Types of Lisp Object.
* type checking: Type Predicates.
* type checking internals: Object Internals.
* type predicates: Type Predicates.
* unbinding keys: Key Binding Commands.
* undefined: Functions for Key Lookup.
* undefined key: Keymap Terms.
* underline-region: Underlining.
* underlining: Underlining.
* undo: Undo.
* undo avoidance: Substitution.
* undo-boundary: Undo.
* undo-more: Undo.
* undo-start: Undo.
* unexec: Building Emacs.
* uninterned symbol: Creating Symbols.
* universal-argument: Prefix Command Arguments.
* unlock-buffer: File Locks.
* unread-command-char: Keyboard Input.
* ununderline-region: Underlining.
* unwind-protect: Cleanups.
* unwinding: Cleanups.
* up-list: List Motion.
* upcase: Character Case.
* upcase-region: Case Changes.
* upcase-word: Case Changes.
* upper case: Character Case.
* upper case key sequence: Keyboard Input.
* use-global-map: Global and Local Keymaps.
* use-local-map: Global and Local Keymaps.
* user option: Defining Variables.
* user-defined error: Error Names.
* user-full-name: System Environment.
* user-login-name: System Environment.
* user-real-login-name: System Environment.
* user-real-uid: System Environment.
* user-uid: System Environment.
* user-variable-p: Defining Variables.
* value cell: Symbol Components.
* value of expression: Evaluation.
* values: Eval.
* variable: Variables.
* variable descriptions: A Sample Variable Description.
* variable limit error: Local Variables.
* variable-documentation: Documentation Basics.
* variables, buffer-local: Buffer-Local Variables.
* vconcat: Vectors.
* vector: Vectors.
* vector: Vectors.
* vector evaluation: Self-Evaluating Forms.
* vector length: Sequence Functions.
* vectorp: Vectors.
* verify-visited-file-modtime: Modification Time.
* version number (in file name): File Name Components.
* version-control: Numbered Backups.
* vertical scrolling: Vertical Scrolling.
* vertical tab: Character Type.
* vertical text line motion: Vertical Motion.
* vertical-motion: Screen Lines.
* view-file: Visiting Functions.
* view-mode-map: Standard Keymaps.
* view-register: Registers.
* visible-bell: Beeping.
* visited file: Buffer File Name.
* visited file mode: Auto Major Mode.
* visiting files: Visiting Files.
* void function: Classifying Lists.
* void function cell: Function Cells.
* void variable: Void Variables.
* void-function: Function Cells.
* void-function: Classifying Lists.
* void-variable: Void Variables.
* waiting: Waiting.
* waiting for command key input: Keyboard Input.
* waiting-for-user-input-p: Sentinels.
* where-is-internal: Scanning Keymaps.
* while: Iteration.
* whitespace: Character Type.
* widen: Narrowing.
* widening: Narrowing.
* window: Basic Windows.
* window configurations: Window Configurations.
* window excursions: Excursions.
* window internals: Window Internals.
* window ordering, cyclic: Cyclic Window Ordering.
* window point: Window Point.
* window point internals: Window Internals.
* window position: Window Point.
* window resizing: Resizing Windows.
* window size: Size of Window.
* window size, changing: Resizing Windows.
* window splitting: Splitting Windows.
* window top line: Window Start.
* window-buffer: Buffers and Windows.
* window-edges: Size of Window.
* window-height: Size of Window.
* window-hscroll: Horizontal Scrolling.
* window-min-height: Resizing Windows.
* window-min-width: Resizing Windows.
* window-point: Window Point.
* window-setup-hook: Window Systems.
* window-start: Window Start.
* window-system: Window Systems.
* window-system-version: Window Systems.
* window-width: Size of Window.
* windowp: Basic Windows.
* windows, controlling precisely: Buffers and Windows.
* with-output-to-temp-buffer: Temporary Displays.
* word search: String Search.
* word-search-backward: String Search.
* word-search-forward: String Search.
* write-abbrev-file: Abbrev Files.
* write-char: Output Functions.
* write-file: Saving Buffers.
* write-file-hooks: Saving Buffers.
* write-region: Writing to Files.
* writing a documentation string: Documentation Basics.
* wrong-number-of-arguments: Argument List.
* wrong-type-argument: Type Predicates.
* xemacs: Building Emacs.
* y-or-n-p: Yes-or-No Queries.
* yank: Yank Commands.
* yank suppression: Changing Key Bindings.
* yank-pop: Yank Commands.
* yanking: Data in Kill Ring.
* yes-or-no questions: Yes-or-No Queries.
* yes-or-no-p: Yes-or-No Queries.
* zap-to-char: Kill Functions.
* zerop: Predicates on Numbers.


 
