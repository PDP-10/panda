.psect	code,nowrt,exe
.entry	parse, ^M<>
.title parsing routines

;	Wcc edit history
;
;[W1] Update cmdptr and cmdsiz in pararg [JGD 7-23-86]
;
;[W2] Make the command buffer and pointer uniform [JGD 7-25-83]
;
;	End of Wcc edit history

.page
.subtitle argument parser

;	Input:	cmdsiz = size of argument
;		cmdptr = pointer to argument
;		cmdtbl = pointer to key table
;	Output:	r0 = 0 error bad argument
;		r0 = -1 argument is numeric
;		r0 = 1 arguement is alphabetic
;		IF no argument was passed then r0 = 0 and (r9) = -1
;		IF argument is numeric the numbers are pushed on
;			the stack pointed to by r9  the stack ends with 
;			the number #unique
;		If the argument is alphabetic then the flag is pushed
;			onto the stack pointed to by r9
;[W1]	cmdptr and cmdsiz updated

pararg::tstw	cmdsiz					;any argument?
	bneq	5$
	clrl	r0					;signal no arg
	moval	stack2,r9				;point to a stack
	movl	#-1,(r9)					
	rsb
5$:	pushr	#^m<r1,r2,r3,r4,r5,r6,r7,r8,r10,r11>	;save some registers
	moval	stack1,r8				;r8 stack pointer 1
	moval	stack2,r9				;r9 stack pointer 2
	movl	#unique,(r8)+				;flag the top of stack
10$:	bsbw	getnum					;get a number
	tstl	r1					;r1 = zero means failure
	beql	70$					;if error try a keyword
	movl	r1,(r8)+				;push the number on the stack
	cmpb	(r2),#32				;only one number?
	beql	20$					;if not continue
	tstw	cmdsiz					;this the end?
	bneq	25$					;if not continue
20$:	jmp	110$
25$:	cmpb	(r2),#44				;is this a string of numbers?
	bneq	30$					;found "," 
	incl	cmdptr					;increment the pointer
	decw	cmdsiz					;bump down the count
	jmp	10$					;get another number

;	Here if we might have a range i.e. #:#

30$:	cmpb	(r2),#58				;is this a range ":"
	beql	40$
	jmp	140$					;if not fatal error
40$:	incl	cmdptr					;increment the pointer
	decw	cmdsiz					;bump down the count
	bsbw	getnum					;get a number
	tstl	r1					;r1 = zero means failure
	bneq	50$					;r1 = +# means a range
	jmp	140$					;if error it is fatal

;	Here we have a range of numbers

50$:	movl	r1,r0					;ending number in r0
	movl	-(r8),r1				;starting number in r1
	movl	-(r8),(r9)+				;remove/add the eos flag

60$:	movl	r0,(r9)+				;get the last number	
	decl	r0					;bump the count one
	cmpl	r0,r1					;are we there yet?
	bgeq	60$					;nope
	movl	#-1,r0					;signal numeric arg
	jmp	150$					;[W1] common return

;	Here we do not have a number check for a keyword

;	Set up to parse the argument

70$:	movl	cmdptr,r6			;point to the arg passed
	movzwl	cmdsiz,r7			;size of the argument
	bsbw	ucase				;upper case the arg  passed
	matchc	#1,#32,r7,(r6)			;[W1] check for a space
	bneq	75$				;[W1] if not there skip
	subw2	r2,r7				;[W1] size of arg were parsing
	decw	r7				;[W1] minus the space
	movl	r3,cmdptr			;[W1] pointer to next arg
	movw	r2,cmdsiz			;[W1] size of remaining args
75$:	clrl	r9				;clear a partial match flag
	movl	cmdtbl,r3			;point to allowable args
	movb	(r3)+,cmdcnt			;how many args to ckeck

;	Parse the argument

80$:	movzbl	(r3)+,r2			;get the length of this arg
	movq	r2,r4				;save pointer and size
	matchc	r7,(r6),r7,(r3)			;match must occur at start of arg
	movl	r0,r10				;save the status
	movq	r4,r2				;replace pointer and size
	matchc	r7,(r6),r2,(r3)			;check for partial match
	tstb	r10				;check previous results
	bneq	95$				;no match check next arg in tbl
	tstw	r2				;was it full or partial?
	bneq	90$				;full match means done
	movb	#1,r9				;signal a match
	movl	(r3),r8				;save the address
	jmp	100$				;quit

;	Found a partial match
	
90$:	tstb	r9				;check for a first match
	bneq	110$				;two p matchs is too many	
	movb	#1,r9				;set the partial match flag
	addl3	r4,r5,r3			;point to the address
	movl	(r3)+,r8			;save address (in case p match)
	decb	cmdcnt				;any args left in table?
	bleq	100$				;if so get the next arg in table
	jmp	80$				;try this arg

;	No match on this argument

95$:	decb	cmdcnt				;any args left in table?
	bleq	100$				;if so get the next arg in table
	addl3	r4,r5,r3			;point to the address
	addl2	#4,r3				;get past the address
	jmp	80$				;try this arg

;	Exhausted all arguments did we do it?

100$:	tstb	r9				;did we find a match?
	bneq	103$				;if not return error

;	Return an error

	moval	stack2,r9			;point to a stack
	clrl	(r9)				;send an error
	clrl	r0
	popr	#^m<r1,r2,r3,r4,r5,r6,r7,r8,r10,r11>;restore registers
	rsb

103$:	movl	r8,stack1			;save the flag offset
	moval	stack1,r9			;r9 stack pointer 
105$:	movb	r9,r0				;signal success/failure
	popr	#^m<r1,r2,r3,r4,r5,r6,r7,r8,r10,r11>;restore registers
	rsb


;	Here we have either one number or a sequence of noncontigeous numbers

110$:	movl	#unique,(r9)+				;get the eos flag
120$:	movl	-(r8),r1				;remove a number/flag
	cmpl	r1,#unique				;have we hit the flag?
	beql	130$					;if so stop
	movl	r1,(r9)+				;not the end add the number
	jmp	120$					;try again
130$:	movl	#-1,r0					;signal numeric arg
	jmp	150$					;[W1] common return

;	Here not a number or keyword.  Bad ending

140$:	clrl	r0					;signal bad argument
	popr	#^m<r1,r2,r3,r4,r5,r6,r7,r8,r10,r11>	;restore registers
	rsb

;[W1]	Common return for numeric args

150$:	movl	r0,r8					;[W1] save the flag
	tstw	cmdsiz					;[W1] anything left?
	beql	160$					;[W1] no then return
	decw	cmdsiz					;[W1] skip seperator
	incl	cmdptr					;[W1] and don't count it
160$:	movl	r8,r0					;[W1] restore the flag
	popr	#^m<r1,r2,r3,r4,r5,r6,r7,r8,r10,r11>	;restore registers
	rsb

.page
;	Input:	cmdsiz = size of string
;		cmdptr = pointer to string
;	Output:	r1 = zero means failure
;		r1 = number parsed
;		r2 = pointer to next character
;		on success updated cmdsiz and cmdptr

getnum::pushr	#^m<r3,r4,r5,r6,r7,r8,r9,r10,r11>		;save some registers
	clrl	r1					;zero a char counter
	movzwl	cmdsiz,r0				;size of the string	
	movl	cmdptr,r2				;point to the string
	movl	r2,r3					;save the pointer

;	Determine if numeric

10$:	cmpb	#48,(r2)				;is it numeric
	bgtr	20$					;if less than 0 error
	cmpb	#57,(r2)
	blss	20$					;if <= 9 its a number
	incl	r2					;bump up the pointer
	incl	r1					;bump up the char counter
	sobgtr	r0,10$					;examine the next ch

;	Here when we hit a non numeric character

20$:	tstl	r1					;did we find any numbers
	beql	30$					;zero means no

;	Here if we have a number r2 points to number, r1 is size of number
;	Make it binary and return the number

	movl	r2,cmdptr				;update the pointer
	subw2	r1,cmdsiz				;and size
	pushal	sbuf					;push binary descriptor
	pushal	(r3)					;pointer to ascii number
	pushl	r1					;size of ascii number
	calls	#3,g^lib$cvt_dtb			;convert it
	movzwl	sbuf,r1					;signal success
	popr	#^m<r3,r4,r5,r6,r7,r8,r9,r10,r11>	;restore registers
	rsb

;	Here on errors

30$:	clrl	r1					;signal error
	popr	#^m<r3,r4,r5,r6,r7,r8,r9,r10,r11>	;restore registers
	rsb


.page
.subtitle command parser

;	Command parsing routine.  The routine depends on the assumption
;	that all commands end with a space if the command has arguments
;	or a crlf if the command does not have any arguments.  

;	Input:	cmdbuf contains command string [W2]
;		cmdsiz size of command string [W2]
;		cmdtbl pointer to table of allowable commands
;	Output:	cmdsiz size of any arguments
;		cmdptr pointer to any arguments
;		r0 = zero on failure
;		r0 = address on success
;		r0 = -1 on no cmd
;		
;	Check for no command condition.  If a command seperate the command
;	from any arguments

parcmd::pushr	#^m<r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>	;save some registers
	clrb	r9				;partial match flag
	moval	cmdbuf,r8			;[W2] point to the cmd line
	cmpb	#cr,(r8)			;test for a blank line
	bneq	10$				;if blank return
	movl	#-1,r0				;signal no cmd
	popr	#^m<r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>	;restore registers
	rsb					;blank:	return
10$:	matchc	#1,#space,cmdsiz,(r8)		;[w2] any arguments to the cmd?
	bneq	20$				;if not no parameter

;	Account for the parameter

	subl3	r8,r3,r7			;size of the cmd passed
	decl	r7				;don't count the space
	movl	r3,cmdptr			;save the cmd ptr
	movl	r3,r8				;start of parameter
	matchc	#1,#cr,cmdsiz,(r8)		;valid terminator?
	beql	15$				;bad terminator
	jmp	110$				;bad term pass back error
15$:	subw3	r8,r3,cmdsiz			;size of the parameter passed
	decw	cmdsiz				;account for the cr
	jmp	40$				;parse the cmd

;	No parameter passed.

20$:	matchc	#1,#cr,cmdsiz,(r8)		;valid terminator?
	beql	30$				;bad terminator
	jmp	110$				;bad term pass back error
30$:	subl3	r8,r3,r7			;size of the cmd passed
	decl	r7				;don't count the cr
	clrw	cmdsiz				;no argument

;	Set up to parse the command

40$:	moval	cmdbuf,r6			;[W2] pointer to cmd passed
	bsbw	ucase				;upper case the cmd passed
	movl	cmdtbl,r3			;get the start to the cmd table
	movb	(r3)+,cmdcnt			;how many cmds to ckeck

;	Parse the command

50$:	movzbl	(r3)+,r2			;get the length of this cmd
	movq	r2,r4				;save pointer and size
	matchc	r7,(r6),r7,(r3)			;match must occur at start of cmd
	movl	r0,r10				;save the status
	movq	r4,r2				;replace pointer and size
	matchc	r7,(r6),r2,(r3)			;check for partial match
	tstb	r10				;check previous results
	bneq	70$				;no match check next cmd in tbl
	tstw	r2				;was it full or partial?
	bneq	60$				;full match means done
	movb	#1,r9				;signal a match
	movl	(r3),r8				;save the address
	jmp	100$				;quit

;	Found a partial match
	
60$:	tstb	r9				;check for a first match
	bneq	110$				;two p matchs is too many	
	movb	#1,r9				;set the partial match flag
	addl3	r4,r5,r3			;point to the address
	movl	(r3)+,r8			;save address (in case p match)
	decb	cmdcnt				;any cmds left in table?
	bleq	100$				;if so get the next cmd in table
	jmp	50$				;try this cmd

;	No match on this command

70$:	decb	cmdcnt				;any cmds left in table?
	bleq	100$				;if so get the next cmd in table
	addl3	r4,r5,r3			;point to the address
	addl2	#4,r3				;get past the address
	jmp	50$				;try this cmd

;	Exhausted all commands did we do it?

100$:	tstb	r9				;did we find a match?
	beql	120$				;if not return error
	movl	r8,r0				;signal success return address
110$:	popr	#^m<r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>	;restore registers
	rsb
120$:	popr	#^m<r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>	;restore registers
	clrl	r0
	rsb


.psect	data,wrt,noexe
.page

unique	==	777777

stack1:	.blkl	50
stack2:	.blkl	50
sbuf:	.blkl	1

cmdtbl::.blkl	1

.end
