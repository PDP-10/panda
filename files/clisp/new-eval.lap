
;;; CLC v1.5 compiling SS:<CLISP>EVAL.CLISP.6

(IN-PACKAGE (QUOTE LISP)) 
(EXPORT (QUOTE (*EVALHOOK* *APPLYHOOK* PROCLAIM UNPROCLAIM PROG PROG* *PROMPT* ++ +++ ** *** // ///))) 
(%PUT (QUOTE %VENV%) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE %VENV%)) (SETQ %VENV% NIL)) 
(%PUT (QUOTE %VENV%) (QUOTE %VAR-DOCUMENTATION) (QUOTE "The interpreter's lexical environment for variables -- hands off!")) 
(QUOTE %VENV%) 
(%PUT (QUOTE %FENV%) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE %FENV%)) (SETQ %FENV% NIL)) 
(%PUT (QUOTE %FENV%) (QUOTE %VAR-DOCUMENTATION) (QUOTE "The interpreter's lexical environment for functions -- hands off!")) 
(QUOTE %FENV%) 
(%PUT (QUOTE %BENV%) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE %BENV%)) (SETQ %BENV% NIL)) 
(%PUT (QUOTE %BENV%) (QUOTE %VAR-DOCUMENTATION) (QUOTE "The interpreter's lexical environment for block names -- hands off!")) 
(QUOTE %BENV%) 
(%PUT (QUOTE %GENV%) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE %GENV%)) (SETQ %GENV% NIL)) 
(%PUT (QUOTE %GENV%) (QUOTE %VAR-DOCUMENTATION) (QUOTE "The interpreter's lexical environment for go tags -- hands off!")) 
(QUOTE %GENV%) 
(%PUT (QUOTE *EVALHOOK*) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE *EVALHOOK*)) (SETQ *EVALHOOK* NIL)) 
(%PUT (QUOTE *EVALHOOK*) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Used to substitute another function for EVAL, for use by STEP, etc.
  If *EVALHOOK* is not NIL, its value must be a function of the same
  form as *EVAL.  This function does the evaluation instead of EVAL.")) 
(QUOTE *EVALHOOK*) 
(%PUT (QUOTE *APPLYHOOK*) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE *APPLYHOOK*)) (SETQ *APPLYHOOK* NIL)) 
(%PUT (QUOTE *APPLYHOOK*) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Used to substitute another function for the implicit APPLY normally done
  within EVAL.  If *APPLYHOOK* is not NIL, its value must be a function 
  which takes as arguments the function to be applied, the list of arguments
  it is to be applied to, and additional environment arguments suitable for
  passing to *EVAL.  This function does the application instead of EVAL.")) 
(QUOTE *APPLYHOOK*) 
(%PUT (QUOTE *SKIP-EVALHOOK*) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE *SKIP-EVALHOOK*)) (SETQ *SKIP-EVALHOOK* NIL)) 
(%PUT (QUOTE *SKIP-EVALHOOK*) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Used with non-null *EVALHOOK* to suppress the use of the hook-function
  for one level of eval.")) 
(QUOTE *SKIP-EVALHOOK*) 
(%PUT (QUOTE *SKIP-APPLYHOOK*) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE *SKIP-APPLYHOOK*)) (SETQ *SKIP-APPLYHOOK* NIL)) 
(%PUT (QUOTE *SKIP-APPLYHOOK*) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Used with non-null *APPLYHOOK* to suppress the use of the hook function
  for one level of eval.")) 
(QUOTE *SKIP-APPLYHOOK*) 
(%PUT (QUOTE /) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE /)) (SETQ / NIL)) 
(%PUT (QUOTE /) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Holds a list of all the values returned by the most recent top-level EVAL.")) 
(QUOTE /) 
(%PUT (QUOTE //) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE //)) (SETQ // NIL)) 
(%PUT (QUOTE //) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Gets the previous value of / when a new value is computed.")) 
(QUOTE //) 
(%PUT (QUOTE ///) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE ///)) (SETQ /// NIL)) 
(%PUT (QUOTE ///) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Gets the previous value of // when a new value is computed.")) 
(QUOTE ///) 
(%PUT (QUOTE *) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE *)) (SETQ * NIL)) 
(%PUT (QUOTE *) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Holds the value of the most recent top-level EVAL.")) 
(QUOTE *) 
(%PUT (QUOTE **) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE **)) (SETQ ** NIL)) 
(%PUT (QUOTE **) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Gets the previous value of * when a new value is computed.")) 
(QUOTE **) 
(%PUT (QUOTE ***) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE ***)) (SETQ *** NIL)) 
(%PUT (QUOTE ***) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Gets the previous value of ** when a new value is computed.")) 
(QUOTE ***) 
(%PUT (QUOTE +) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE +)) (SETQ + NIL)) 
(%PUT (QUOTE +) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Holds the value of the most recent top-level READ.")) 
(QUOTE +) 
(%PUT (QUOTE ++) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE ++)) (SETQ ++ NIL)) 
(%PUT (QUOTE ++) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Gets the previous value of + when a new value is read.")) 
(QUOTE ++) 
(%PUT (QUOTE +++) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE +++)) (SETQ +++ NIL)) 
(%PUT (QUOTE +++) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Gets the previous value of ++ when a new value is read.")) 
(QUOTE +++) 
(%PUT (QUOTE -) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE -)) (SETQ - NIL)) 
(%PUT (QUOTE -) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Holds the form curently being evaluated.")) 
(QUOTE -) 
(%PUT (QUOTE *PROMPT*) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE *PROMPT*)) (SETQ *PROMPT* "CL>")) 
(%PUT (QUOTE *PROMPT*) (QUOTE %VAR-DOCUMENTATION) (QUOTE "The top-level prompt string.")) 
(QUOTE *PROMPT*) 
(%PUT (QUOTE %TEMP%) (QUOTE GLOBALLY-SPECIAL) T) 
(OR (BOUNDP (QUOTE %TEMP%)) (SETQ %TEMP% NIL)) 
(%PUT (QUOTE %TEMP%) (QUOTE %VAR-DOCUMENTATION) (QUOTE "Random temporary, clobbered by top level loop.")) 
(QUOTE %TEMP%) 
(%PUT (QUOTE %TOP-LEVEL) (QUOTE %FUN-DOCUMENTATION) (QUOTE "Top-level READ-EVAL-PRINT loop.  Do not call this.")) 

#_(LAP #0_%TOP-LEVEL EXPR
       (ENTRY-POINTS (1 2-MANY 2-MANY 2-MANY 2-MANY 2-MANY 2-MANY))
       #0_(* ** *** - + ++ +++ /// // / %TEMP% TOP-LEVEL-CATCHER BREAK-LOOP-CATCHER *EVALHOOK* *APPLYHOOK* *PRINT-CIRCLE* *PRINT-PRETTY* *PROMPT* "Go on, but set * to NIL." "Eval returned an unbound marker.")
       (CODE-START)
(LABEL 1)    (ADJSP Q 15)
             (MOVEM NIL -14 Q)
             (MOVEM NIL -13 Q)
             (MOVEM NIL -12 Q)
             (MOVEM NIL -11 Q)
             (MOVEM NIL -10 Q)
             (MOVEM NIL -9 Q)
             (MOVEM NIL -8 Q)
             (MOVEM NIL -7 Q)
             (MOVEM NIL -6 Q)
             (MOVEM NIL -5 Q)
             (MOVEM NIL -4 Q)
             (MOVEM NIL -3 Q)
             (MOVE O1 -13 Q)
             (SPEC-BIND (SPECIAL 0))
             (MOVEM O1 (SPECIAL 0))
             (MOVE O1 -12 Q)
             (SPEC-BIND (SPECIAL 1))
             (MOVEM O1 (SPECIAL 1))
             (MOVE O1 -11 Q)
             (SPEC-BIND (SPECIAL 2))
             (MOVEM O1 (SPECIAL 2))
             (MOVE O1 -10 Q)
             (SPEC-BIND (SPECIAL 3))
             (MOVEM O1 (SPECIAL 3))
             (MOVE O1 -9 Q)
             (SPEC-BIND (SPECIAL 4))
             (MOVEM O1 (SPECIAL 4))
             (MOVE O1 -8 Q)
             (SPEC-BIND (SPECIAL 5))
             (MOVEM O1 (SPECIAL 5))
             (MOVE O1 -7 Q)
             (SPEC-BIND (SPECIAL 6))
             (MOVEM O1 (SPECIAL 6))
             (MOVE O1 -6 Q)
             (SPEC-BIND (SPECIAL 7))
             (MOVEM O1 (SPECIAL 7))
             (MOVE O1 -5 Q)
             (SPEC-BIND (SPECIAL 8))
             (MOVEM O1 (SPECIAL 8))
             (MOVE O1 -4 Q)
             (SPEC-BIND (SPECIAL 9))
             (MOVEM O1 (SPECIAL 9))
             (MOVE O1 -3 Q)
             (SPEC-BIND (SPECIAL 10))
             (MOVEM O1 (SPECIAL 10))
(LABEL 7)    (MOVE O1 (CONSTANT 11))
             (ICALL CCATCH)
             (JRST 8)
             (MOVE O1 (CONSTANT 12))
             (ICALL CCATCH)
             (JRST 9)
             (MOVEM NIL (SPECIAL 13))
             (MOVEM NIL (SPECIAL 14))
(LABEL 14)   (CALL FRESH-LINE 0)
             (MOVEM NIL -2 Q)
             (MOVEM NIL -1 Q)
             (MOVE O1 -2 Q)
             (SPEC-BIND (SPECIAL 15))
             (MOVEM O1 (SPECIAL 15))
             (MOVE O1 -1 Q)
             (SPEC-BIND (SPECIAL 16))
             (MOVEM O1 (SPECIAL 16))
             (MOVE O1 (SPECIAL 17))
             (CALL PRINC 1)
             (UNBIND 2)
             (MOVE O6 (SPECIAL 5))
             (MOVEM O6 (SPECIAL 6))
             (MOVE O6 (SPECIAL 4))
             (MOVEM O6 (SPECIAL 5))
             (MOVE O6 (SPECIAL 3))
             (MOVEM O6 (SPECIAL 4))
             (CALL READ 0)
             (MOVEM O1 (SPECIAL 3))
             (MOVE O1 (SPECIAL 3))
             (CALL EVAL 1)
             (ICALL VALUES-TO-LIST)
             (MOVEM O1 -14 Q)
             (MOVE O6 (SPECIAL 8))
             (MOVEM O6 (SPECIAL 7))
             (MOVE O6 (SPECIAL 9))
             (MOVEM O6 (SPECIAL 8))
             (MOVE O6 -14 Q)
             (MOVEM O6 (SPECIAL 9))
             (MOVE O1 -14 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 (SPECIAL 10))
             (MOVE O1 (CONSTANT 10))
             (CALL BOUNDP 1)
             (JUMPN O1 16)
             (MOVEM NIL (SPECIAL 10))
             (MOVE O2 (CONSTANT 19))
             (MOVE O1 (CONSTANT 18))
             (CALL CERROR 2)
(LABEL 16)   (MOVE O6 (SPECIAL 1))
             (MOVEM O6 (SPECIAL 2))
             (MOVE O6 (SPECIAL 0))
             (MOVEM O6 (SPECIAL 1))
             (MOVE O6 (SPECIAL 10))
             (MOVEM O6 (SPECIAL 0))
             (MOVE O6 -14 Q)
             (MOVEM O6 -2 Q)
             (MOVE O1 -2 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -1 Q)
(LABEL 22)   (MOVE O1 -2 Q)
             (CALL ATOM 1)
             (JUMPE O1 23)
             (JRST 18)
(LABEL 23)   (CALL FRESH-LINE 0)
             (MOVE O1 -1 Q)
             (CALL PRIN1 1)
             (MOVE O1 -2 Q)
             (MOVE O1 1 O1)
             (MOVEM O1 -2 Q)
             (MOVE O1 -2 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -1 Q)
             (JRST 22)
(LABEL 18)   (CALL TERPRI 0)
             (JRST 14)
             (POPJ P)
(LABEL 9)    (POPJ P)
(LABEL 8)    (JRST 7)
             (UNBIND 11)
             (ADJSP Q -15)
             (POPJ P)
)

(%PUT (QUOTE %TOP-LEVEL) (QUOTE %ARGS-DOCUMENTATION) (QUOTE NIL)) 
(%PUT (QUOTE %TOP-LEVEL) (QUOTE %SOURCE-DOCUMENTATION) (QUOTE "SS:<CLISP>EVAL.CLISP.6")) 
(%PUT (QUOTE PROCLAIM) (QUOTE %FUN-DOCUMENTATION) (QUOTE "PROCLAIM is a top-level form used to pass assorted information to the
  compiler.  This interpreter ignores proclamations except for those
  declaring variables to be SPECIAL.")) 

#_(LAP #0_PROCLAIM EXPR
       (ENTRY-POINTS (2-FEW 1 2-MANY 2-MANY 2-MANY 2-MANY 2-MANY))
       #0_(SPECIAL GLOBALLY-SPECIAL T)
       (CODE-START)
(LABEL 1)    (ADJSP Q 6)
             (MOVEM O1 -5 Q)
             (MOVE O1 -5 Q)
             (CALL LISTP 1)
             (JUMPE O1 5)
             (MOVE O1 -5 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -4 Q)
             (MOVE O2 (CONSTANT 0))
             (MOVE O1 -4 Q)
             (CALL EQ 2)
             (SKIPN NIL O1)
(LABEL 5)    (JRST 3)
             (MOVE O1 -5 Q)
             (MOVE O1 1 O1)
             (MOVEM O1 -4 Q)
(LABEL 11)   (MOVE O1 -4 Q)
             (CALL ATOM 1)
             (JUMPE O1 12)
             (MOVE O1 NIL)
             (MOVEI N 1)
             (JRST 7)
(LABEL 12)   (MOVE O1 -4 Q)
             (MOVE O1 0 O1)
             (CALL SYMBOLP 1)
             (JUMPE O1 14)
             (MOVE O1 -4 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -3 Q)
             (MOVE O3 (CONSTANT 2))
             (MOVE O1 -3 Q)
             (MOVE O2 (CONSTANT 1))
             (CALL %PUT 3)
(LABEL 14)   (MOVE O1 -4 Q)
             (MOVE O1 1 O1)
             (MOVEM O1 -4 Q)
             (JRST 11)
(LABEL 7)    (JRST 4)
(LABEL 3)    (MOVE O1 NIL)
             (MOVEI N 1)
(LABEL 4)    (ADJSP Q -6)
             (POPJ P)
)

(%PUT (QUOTE PROCLAIM) (QUOTE %ARGS-DOCUMENTATION) (QUOTE (PROCLAMATION))) 
(%PUT (QUOTE PROCLAIM) (QUOTE %SOURCE-DOCUMENTATION) (QUOTE "SS:<CLISP>EVAL.CLISP.6")) 
(%PUT (QUOTE UNPROCLAIM) (QUOTE %FUN-DOCUMENTATION) (QUOTE "Undoes the effect of certain proclamations.")) 

#_(LAP #0_UNPROCLAIM EXPR
       (ENTRY-POINTS (2-FEW 1 2-MANY 2-MANY 2-MANY 2-MANY 2-MANY))
       #0_(SPECIAL GLOBALLY-SPECIAL)
       (CODE-START)
(LABEL 1)    (ADJSP Q 5)
             (MOVEM O1 -4 Q)
             (MOVE O1 -4 Q)
             (CALL LISTP 1)
             (JUMPE O1 5)
             (MOVE O1 -4 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -3 Q)
             (MOVE O2 (CONSTANT 0))
             (MOVE O1 -3 Q)
             (CALL EQ 2)
             (SKIPN NIL O1)
(LABEL 5)    (JRST 3)
             (MOVE O1 -4 Q)
             (MOVE O1 1 O1)
             (MOVEM O1 -3 Q)
(LABEL 11)   (MOVE O1 -3 Q)
             (CALL ATOM 1)
             (JUMPE O1 12)
             (MOVE O1 NIL)
             (MOVEI N 1)
             (JRST 7)
(LABEL 12)   (MOVE O1 -3 Q)
             (MOVE O1 0 O1)
             (CALL SYMBOLP 1)
             (JUMPE O1 14)
             (MOVE O1 -3 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -2 Q)
             (MOVE O2 (CONSTANT 1))
             (MOVE O1 -2 Q)
             (CALL REMPROP 2)
(LABEL 14)   (MOVE O1 -3 Q)
             (MOVE O1 1 O1)
             (MOVEM O1 -3 Q)
             (JRST 11)
(LABEL 7)    (JRST 4)
(LABEL 3)    (MOVE O1 NIL)
             (MOVEI N 1)
(LABEL 4)    (ADJSP Q -5)
             (POPJ P)
)

(%PUT (QUOTE UNPROCLAIM) (QUOTE %ARGS-DOCUMENTATION) (QUOTE (PROCLAMATION))) 
(%PUT (QUOTE UNPROCLAIM) (QUOTE %SOURCE-DOCUMENTATION) (QUOTE "SS:<CLISP>EVAL.CLISP.6")) 

#_(LAP #0_PARSE-BODYE EXPR
       (ENTRY-POINTS (2-FEW 1 2-MANY 2-MANY 2-MANY 2-MANY 2-MANY))
       #0_(DECLARE)
       (CODE-START)
(LABEL 1)    (ADJSP Q 9)
             (MOVEM O1 -8 Q)
             (MOVE O6 -8 Q)
             (MOVEM O6 -7 Q)
             (MOVEM NIL -6 Q)
             (MOVEM NIL -5 Q)
(LABEL 7)    (SKIPE NIL -7 Q)
             (JRST 8)
             (MOVE O1 -6 Q)
             (CALL NREVERSE 1)
             (MOVEM O1 -4 Q)
             (MOVE O2 NIL)
             (MOVE O1 -4 Q)
             (CALL LIST 2)
             (JRST 3)
(LABEL 8)    (MOVE O1 -7 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -5 Q)
             (MOVE O1 -5 Q)
             (CALL LISTP 1)
             (JUMPN O1 11)
             (MOVE O1 -6 Q)
             (CALL NREVERSE 1)
             (MOVEM O1 -4 Q)
             (MOVE O2 -7 Q)
             (MOVE O1 -4 Q)
             (CALL LIST 2)
             (JRST 3)
(LABEL 11)   (MOVE O1 -5 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -4 Q)
             (MOVE O2 (CONSTANT 0))
             (MOVE O1 -4 Q)
             (CALL EQ 2)
             (JUMPE O1 12)
             (MOVE O1 -5 Q)
             (MOVE O1 1 O1)
             (MOVEM O1 -4 Q)
             (MOVE O1 -4 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -3 Q)
(LABEL 17)   (MOVE O1 -4 Q)
             (CALL ATOM 1)
             (JUMPE O1 18)
             (JRST 13)
(LABEL 18)   (MOVE O2 -6 Q)
             (MOVE O1 -3 Q)
             (CALL CONS 2)
             (MOVEM O1 -6 Q)
             (MOVE O1 -4 Q)
             (MOVE O1 1 O1)
             (MOVEM O1 -4 Q)
             (MOVE O1 -4 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -3 Q)
             (JRST 17)
(LABEL 13)   (JRST 10)
(LABEL 12)   (MOVE O1 -6 Q)
             (CALL NREVERSE 1)
             (MOVEM O1 -4 Q)
             (MOVE O2 -7 Q)
             (MOVE O1 -4 Q)
             (CALL LIST 2)
             (JRST 3)
(LABEL 10)   (MOVE O1 -7 Q)
             (MOVE O1 1 O1)
             (MOVEM O1 -7 Q)
             (JRST 7)
(LABEL 3)    (ADJSP Q -9)
             (POPJ P)
)

(%PUT (QUOTE PARSE-BODYE) (QUOTE %ARGS-DOCUMENTATION) (QUOTE (BODY))) 
(%PUT (QUOTE PARSE-BODYE) (QUOTE %SOURCE-DOCUMENTATION) (QUOTE "SS:<CLISP>EVAL.CLISP.6")) 

#_(LAP #0_PROG* MACRO
       (ENTRY-POINTS (2-FEW 1 2-MANY 2-MANY 2-MANY 2-MANY 2-MANY))
       #0_(LET* DECLARE BLOCK TAGBODY)
       (CODE-START)
(LABEL 1)    (ADJSP Q 12)
             (MOVEM O1 -11 Q)
             (MOVE O1 -11 Q)
             (MOVE O1 1 O1)
             (MOVE O1 1 O1)
             (CALL LISP::PARSE-BODYE 1)
             (MOVEM O1 -10 Q)
             (MOVE O1 -10 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -9 Q)
             (MOVE O1 -10 Q)
             (MOVE O1 1 O1)
             (MOVE O1 0 O1)
             (MOVEM O1 -8 Q)
             (MOVE O1 -11 Q)
             (MOVE O1 1 O1)
             (MOVE O1 0 O1)
             (MOVEM O1 -6 Q)
             (MOVE O2 -9 Q)
             (MOVE O1 (CONSTANT 1))
             (CALL CONS 2)
             (MOVEM O1 -5 Q)
             (MOVE O2 -8 Q)
             (MOVE O1 (CONSTANT 3))
             (CALL CONS 2)
             (MOVE O3 O1)
             (MOVE O1 (CONSTANT 2))
             (MOVE O2 NIL)
             (CALL LIST 3)
             (MOVE O4 O1)
             (MOVE O1 (CONSTANT 0))
             (MOVE O2 -6 Q)
             (MOVE O3 -5 Q)
             (CALL LIST 4)
             (ADJSP Q -12)
             (POPJ P)
)

(%PUT (QUOTE PROG*) (QUOTE %ARGS-DOCUMENTATION) (QUOTE (L))) 
(%PUT (QUOTE PROG*) (QUOTE %SOURCE-DOCUMENTATION) (QUOTE "SS:<CLISP>EVAL.CLISP.6")) 

#_(LAP #0_PROG MACRO
       (ENTRY-POINTS (2-FEW 1 2-MANY 2-MANY 2-MANY 2-MANY 2-MANY))
       #0_(LET DECLARE BLOCK TAGBODY)
       (CODE-START)
(LABEL 1)    (ADJSP Q 12)
             (MOVEM O1 -11 Q)
             (MOVE O1 -11 Q)
             (MOVE O1 1 O1)
             (MOVE O1 1 O1)
             (CALL LISP::PARSE-BODYE 1)
             (MOVEM O1 -10 Q)
             (MOVE O1 -10 Q)
             (MOVE O1 0 O1)
             (MOVEM O1 -9 Q)
             (MOVE O1 -10 Q)
             (MOVE O1 1 O1)
             (MOVE O1 0 O1)
             (MOVEM O1 -8 Q)
             (MOVE O1 -11 Q)
             (MOVE O1 1 O1)
             (MOVE O1 0 O1)
             (MOVEM O1 -6 Q)
             (MOVE O2 -9 Q)
             (MOVE O1 (CONSTANT 1))
             (CALL CONS 2)
             (MOVEM O1 -5 Q)
             (MOVE O2 -8 Q)
             (MOVE O1 (CONSTANT 3))
             (CALL CONS 2)
             (MOVE O3 O1)
             (MOVE O1 (CONSTANT 2))
             (MOVE O2 NIL)
             (CALL LIST 3)
             (MOVE O4 O1)
             (MOVE O1 (CONSTANT 0))
             (MOVE O2 -6 Q)
             (MOVE O3 -5 Q)
             (CALL LIST 4)
             (ADJSP Q -12)
             (POPJ P)
)

(%PUT (QUOTE PROG) (QUOTE %ARGS-DOCUMENTATION) (QUOTE (L))) 
(%PUT (QUOTE PROG) (QUOTE %SOURCE-DOCUMENTATION) (QUOTE "SS:<CLISP>EVAL.CLISP.6")) 