(FILECREATED " 5-MAY-83 12:17:15" /lisp/ddyer/lisp/init/EDITREC.;2   23709

      changes to:  (RECORDS HARRAYP HASHARRAY)

      previous date: "12-APR-83 12:27:30" /lisp/ddyer/lisp/init/EDITREC)


(PRINT (QUOTE EDITRECCOMS) T T)

(RPAQQ EDITRECCOMS ((ADDVARS (OldTypes))
		    (FILES EDITHIST)
		    (FNS * EDITRECFNS)
		    (EDITHIST * EDITRECEDITHIST)
		    (ADDVARS (LASTEDITX))
		    (RECORDS * EDITRECRECORDS)
		    (VARS * EDITRECVARS)
		    (DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)
											  (NLAML)
											  (LAMA)))
		    (IFPROP HELP EDITX SHOWX)))

(ADDTOVAR OldTypes )
(FILESLOAD EDITHIST)

(RPAQQ EDITRECFNS (CompatableRecords EDITX EDITX1 EditxRecordChange FetchArrayContents 
				     FetchFunctionPointers FetchStackVariables GetTypeToEdit 
				     HashTableContents MAKEDTD MAKEREC REMAKEDTD REMAKEREC 
				     RecordType? ReplaceArrayContents ReplaceFunctionPointers 
				     ReplaceStackVariables SHOWX SetHashTableContents SetupInfoRec 
				     SimilarP SimilarlyConsed))
(DEFINEQ

(CompatableRecords
  [LAMBDA (OBJ)                                             (* DD: "29-MAR-83 13:03")
    (UNION (for X N in USERRECLST
	      eachtime (SETQ N (CADR X))
		       (AND (LISTP N)
			    (SETQ N (CAR N)))
	      when (RecordType? OBJ N X) collect N)
	   (for X in OldTypes when (RecordType? OBJ X) collect X])

(EDITX
  [LAMBDA (OBJECT TYPE)                                     (* DD: "29-DEC-82 10:37")
    (EDITX1 OBJECT TYPE (QUOTE EDIT])

(EDITX1
  [LAMBDA (OBJECT TYPE ACTION)                              (* DD: " 8-APR-83 11:44")
    (PROG (MADEREC DESCRIPTORS DESCRIPTORTYPE)
          [COND
	    ((NULL OBJECT)
	      (SETQ OBJECT (CAR LASTEDITX))
	      (OR TYPE (SETQ TYPE (CADR LASTEDITX]
          (first (SELECTQ TYPE
			  (? (SETQ TYPE NIL))
			  (NIL (SETQ TYPE (fetch PASTTYPES of OBJECT)))
			  NIL)
	     while (NOT DESCRIPTORTYPE)
	     do (OR TYPE (SETQ TYPE (GetTypeToEdit OBJECT)))
		(COND
		  ((NULL TYPE)
		    (printout T "Sorry, no type info is available for " OBJECT T)
		    (RETURN))
		  [(TYPENUMBERFROMNAME TYPE)                (* the requested type is a datatype)
		    [COND
		      [(NEQ TYPE (QUOTE LISTP))
			(SETQ DESCRIPTORS (fetch RECLOOK of TYPE))
			(COND
			  ((FMEMB (CAR DESCRIPTORS)
				  (QUOTE (DATATYPE BLOCKRECORD ACCESSFNS)))
			    (SETQ DESCRIPTORTYPE (QUOTE RECORD)))
			  (T (SETQ DESCRIPTORS (GETDESCRIPTORS TYPE))
			     (SETQ DESCRIPTORTYPE (QUOTE DATATYPE]
		      (T (SETQ DESCRIPTORTYPE (QUOTE LISTP]
		    (COND
		      ((NOT (TYPENAMEP OBJECT TYPE))
			(printout T "Warning! the object is of type " (TYPENAME OBJECT)
				  T "but you are using it as " TYPE T]
		  ((for X in FILEPKGTYPES thereis (OR (EQ X TYPE)
						      (EQ (CAR (LISTP X))
							  TYPE)))
                                                            (* specified a FILEPKGTYPE)
		    (SETQ DESCRIPTORTYPE (QUOTE FILEPKGTYPE)))
		  ((SETQ DESCRIPTORS (fetch RECLOOK of TYPE))
                                                            (* a record definition)
		    (SETQ DESCRIPTORTYPE (QUOTE RECORD)))
		  (T (printout T "I can't find a descriptor for type " TYPE T)
		     (SETQ TYPE)))
	     finally (replace PASTTYPES of OBJECT with TYPE))
          (SETQ LASTEDITX (LIST OBJECT TYPE))
          (RETURN (COND
		    ((NULL TYPE)
		      OBJECT)
		    (T (SELECTQ ACTION
				(EDIT (SELECTQ DESCRIPTORTYPE
					       (LISTP (EDITE OBJECT))
					       (DATATYPE (SETQ MADEREC (MAKEDTD OBJECT TYPE 
										DESCRIPTORS))
							 (REMAKEDTD OBJECT TYPE
								    (EDITE MADEREC
									   (QUOTE (-1 TTY:)))
								    DESCRIPTORS))
					       (FILEPKGTYPE (PUTDEF OBJECT TYPE
								    (EDITX1 (GETDEF OBJECT TYPE)
									    NIL ACTION)))
					       (RECORD (SETQ MADEREC (MAKEREC OBJECT TYPE DESCRIPTORS)
							 )
						       (REMAKEREC OBJECT TYPE
								  (EDITE MADEREC (QUOTE (-1 TTY:)))
								  DESCRIPTORS))
					       (SHOULDNT)))
				(SHOW (SELECTQ DESCRIPTORTYPE
					       (DATATYPE (MAKEDTD OBJECT TYPE DESCRIPTORS))
					       (RECORD (MAKEREC OBJECT TYPE DESCRIPTORS))
					       (FILEPKGTYPE (GETDEF OBJECT TYPE))
					       OBJECT))
				(SHOULDNT])

(EditxRecordChange
  [LAMBDA (RECNAME RECFIELDS OLDFLG)                        (* DD: " 8-APR-83 13:29")
    [PROG ((OLDINFO (fetch EditRecInfo of RECNAME))
	   (OLDNAME (QUOTE {old}))
	   RD)
          (COND
	    (OLDINFO [COND
		       [(EQ (CAR (SETQ RD (fetch RecordDef of OLDINFO)))
			    (QUOTE DATATYPE))
			 (SETQ OLDNAME (TYPENAMEFROMNUMBER (fetch DataType of OLDINFO)))
			 (AND OLDNAME (LITATOM OLDNAME)
			      (replace RecordDef of OLDINFO with (BQUOTE (DATATYPE , OLDNAME ,@
										   (CDDR RD]
		       (T (while (fetch EditRecInfo of (SETQ OLDNAME (PACK* OLDNAME RECNAME)))
			     as N from 1 do (SETQ OLDNAME (PACK* "{old-" N "}"]
		     (/replace EditRecInfo of OLDNAME with OLDINFO)
                                                            (* rename old instances)
		     [MAPHASH PASTTYPES (FUNCTION (LAMBDA (VAL KEY)
				  (AND (EQ VAL RECNAME)
				       (/PUTHASH KEY OLDNAME PASTTYPES]
		     (/push OldTypes OLDNAME]
    (/replace EditRecInfo of RECNAME with NIL)
    (AND PreviousRecordChangeFn (APPLY* PreviousRecordChangeFn RECNAME RECFIELDS OLDFLG])

(FetchArrayContents
  [LAMBDA (ARR)                                             (* DD: "19-JAN-83 00:04")
    (PROG ((TYPE (ARRAYTYP ARR))
	   (ORIG (ARRAYORIG ARR))
	   (SIZE (ARRAYSIZE ARR))
	   SETDLIMIT)
          [COND
	    ((AND (FIXP TYPE)
		  (ILESSP TYPE SIZE))
	      (SETQ SETDLIMIT (IPLUS ORIG TYPE)))
	    ((EQ TYPE (QUOTE DOUBLEPOINTER))
	      (SETQ SETDLIMIT -1))
	    (T (SETQ SETDLIMIT (IPLUS SIZE ORIG 1]
          (RETURN (for I TMP from (ARRAYORIG ARR) to (SUB1 (IPLUS (ARRAYSIZE ARR)
								  (ARRAYORIG ARR)))
		     collect (PROGN NIL)
			     (BQUOTE (, I , (ELT ARR I)
					,@
					(COND
					  ((ILEQ SETDLIMIT I)
					    (CONS (ELTD ARR I)))
					  (T NIL])

(FetchFunctionPointers
  [LAMBDA (FN)                                              (* DD: "27-MAR-83 08:41")
    (AND (CCODEP FN)
	 (SELECTQ (SYSTEMTYPE)
		  [VAX (for I from 0 to (IDIFFERENCE (fetch (SEQUENCE OFFSET) of FN)
						     4)
			  by 4 as J FIRSTCONST FIRSTGLOB FIRSTFREE FIRSTBIND FIRSTFUN K from 0
			  first (\VAXFNINFO FN)
				[SETQ K (BQUOTE ((args . 0)
						  (calls ,@ FIRSTFUN)
						  (binds ,@ FIRSTBIND)
						  (uses ,@ FIRSTFREE)
						  (globals ,@ FIRSTGLOB)
						  (constants ,@ FIRSTCONST]
			  join (NCONC1 [COND
					 ((EQ J (CDAR K))
					   (bind VAL VALN
					      do (SETQ VAL (CAR K))
						 (SETQ VALN (CDR VAL))
						 (SETQ VAL (CONS (CAR VAL)))
						 (SETQ K (CDR K))
					      repeatwhile (EQ VALN (CDAR K)) finally (RETURN VAL]
				       (LIST J (0GetBasePtr FN I T]
		  NIL])

(FetchStackVariables
  [LAMBDA (DATUM)                                           (* DD: "16-SEP-82 20:59")
    (for X in (VARIABLES DATUM) as Y in (STKARGS DATUM) as Z from 1 collect (LIST Z X Y])

(GetTypeToEdit
  [LAMBDA (OBJ)                                             (* DD: " 8-APR-83 11:37")
    (PROG (TYPES TN)
          [SETQ TYPES (COND
	      ((LITATOM OBJ)
		(SETQ TYPES (TYPESOF OBJ))
		(OR (BOUNDP OBJ)
		    (SETQ TYPES (DREMOVE (QUOTE VARS)
					 TYPES)))
		(NCONC1 TYPES (QUOTE ATOM)))
	      ((CompatableRecords OBJ))
	      ((AND (NEQ (SETQ TN (TYPENAME OBJ))
			 (QUOTE **DEALLOC**))
		    TN
		    (LITATOM TN))
		(CONS TN]
          (SETQ TYPES (NCONC TYPES (LDIFFERENCE (MKLIST (fetch PASTTYPES of OBJ))
						TYPES)))
          [COND
	    ((IGREATERP (LENGTH TYPES)
			1)
	      (SETQ TYPES (MKLIST (ASKUSER 20 (CAR TYPES)
					   (LIST "which type in" TYPES "should I use")
					   (MAKEKEYLST TYPES (CAR TYPES)
						       NIL T]
          (RETURN (CAR TYPES])

(HashTableContents
  [LAMBDA (H)                                               (* DD: "28-OCT-82 23:36")
    (PROG (X)
          [MAPHASH H (FUNCTION (LAMBDA (A B)
		       (push X (LIST B A]
          (RETURN X])

(MAKEDTD
  [LAMBDA (OBJECT TYPE TYPEDEF)                             (* DD: "31-JUL-82 14:22")
    (OR TYPEDEF (SETQ TYPEDEF (GETDESCRIPTORS TYPE)))
    (for X in TYPEDEF as I from 1 collect (LIST I (FFETCHFIELD X OBJECT))
       finally (RETURN (LIST OBJECT TYPE $$VAL])

(MAKEREC
  [LAMBDA (OBJECT TYPE TYPEDEF)                             (* DD: "29-MAR-83 12:17")
    (OR TYPEDEF (SETQ TYPEDEF (fetch RECLOOK of TYPE)))
    (for X in (RECORDFIELDNAMES TYPEDEF) collect (LIST X (RECORDACCESS X OBJECT TYPEDEF (QUOTE FETCH))
						       )
       finally (RETURN (LIST OBJECT TYPE $$VAL])

(REMAKEDTD
  [LAMBDA (OBJECT TYPE NEWOBJECT TYPEDEF)                   (* DD: "31-JUL-82 14:24")
    (OR TYPEDEF (SETQ TYPEDEF (GETDESCRIPTORS TYPE)))
    (for X RV in (CADDR NEWOBJECT) do (COND
					((NLISTP X))
					((NOT (EQUAL (CADR X)
						     (FFETCHFIELD (CAR (NTH TYPEDEF (CAR X)))
								  OBJECT)))
					  (/REPLACEFIELD (CAR (NTH TYPEDEF (CAR X)))
							 OBJECT
							 (CADR X))
					  (SETQ RV T)))
       finally (RETURN RV))
    OBJECT])

(REMAKEREC
  [LAMBDA (OBJECT TYPE NEWOBJECT TYPEDEF)                   (* DD: "29-MAR-83 12:17")
    (OR TYPEDEF (SETQ TYPEDEF (fetch RECLOOK of TYPE)))
    (for X RV OLDVAL in (CADDR NEWOBJECT) do (COND
					       ((NLISTP X))
					       ([NOT (EQUAL (CADR X)
							    (SETQ OLDVAL (RECORDACCESS (CAR X)
										       OBJECT TYPEDEF
										       (QUOTE FETCH]
						 (UNDOSAVE (LIST (QUOTE RECORDACCESS)
								 (CAR X)
								 OBJECT TYPEDEF (QUOTE REPLACE)
								 OLDVAL))
                                                            (* we do the undosave explicitly, because the /REPLACE 
							    option of RECORDACCESS is not undoable!)
						 (RECORDACCESS (CAR X)
							       OBJECT TYPEDEF (QUOTE REPLACE)
							       (CADR X))
						 (SETQ RV T)))
       finally (RETURN RV))
    OBJECT])

(RecordType?
  [LAMBDA (X TYPE DEC)                                      (* DD: " 8-APR-83 10:40")
    (PROG (DATATYPE)
          (RETURN (AND (OR DEC (SETQ DEC (fetch RECLOOK of TYPE)))
		       (EQ (SETQ DATATYPE (NTYP X))
			   (fetch DATATYPE of TYPE))
		       (COND
			 ((EQ (CAR DEC)
			      (QUOTE DATATYPE))
			   T)
			 ((EQ (CAR DEC)
			      (QUOTE HASHLINK))
			   NIL)
			 (DEC (SimilarP DATATYPE X (fetch SAMPLE of TYPE)
					TYPE DEC])

(ReplaceArrayContents
  [LAMBDA (ARR NEWVAL)                                      (* DD: " 9-FEB-83 12:48")
    (for X (ORIG _(ARRAYORIG ARR))
	 (END _(IPLUS (ARRAYORIG ARR)
		      (ARRAYSIZE ARR)))
       in NEWVAL when (LISTP X) do (/SETA ARR (CAR X)
					  (CADR X))
				   (AND (CDDR X)
					(/SETD ARR (CAR X)
					       (CADDR X])

(ReplaceFunctionPointers
  [LAMBDA (FN PTRS)                                         (* DD: " 9-FEB-83 17:45")
    (AND (CCODEP FN)
	 (SELECTQ (SYSTEMTYPE)
		  [VAX (bind (SZ _(LSH (fetch (SEQUENCE OFFSET) of FN)
				       -2))
			     OFF OLDVAL for X in PTRS
			  do (COND
			       ((NLISTP X))
			       [(AND (FIXP (CAR X))
				     (IGEQ (CAR X)
					   0)
				     (ILESSP (CAR X)
					     SZ))
				 (COND
				   ((NEQ (SETQ OLDVAL (0GetBasePtr FN (SETQ OFF (LSH (CAR X)
										     2))
								   T))
					 (CADR X))
				     (UNDOSAVE (LIST (QUOTE 0SetBasePtr)
						     FN OFF OLDVAL T))
				     (0SetBasePtr FN OFF (CADR X)
						  T]
			       (T (ERROR "bad function pointer spec" X]
		  NIL])

(ReplaceStackVariables
  [LAMBDA (DATUM NEWVALUE)                                  (* DD: " 9-FEB-83 13:38")
    (for X OLDVAL in NEWVALUE do [COND
				   ((NEQ (SETQ OLDVAL (STKARG (CAR X)
							      DATUM))
					 (CADDR X))
				     (UNDOSAVE (LIST (QUOTE SETSTKARG)
						     (CAR X)
						     DATUM OLDVAL))
				     (SETSTKARG (CAR X)
						DATUM
						(CADDR X]
				 (COND
				   ((NEQ (SETQ OLDVAL (STKARGNAME (CAR X)
								  DATUM))
					 (CADR X))
				     (UNDOSAVE (LIST (QUOTE SETSTKARGNAME)
						     (CAR X)
						     DATUM OLDVAL))
				     (SETSTKARGNAME (CAR X)
						    DATUM
						    (CADR X])

(SHOWX
  [LAMBDA (OBJECT TYPE)                                     (* DD: "29-DEC-82 10:42")
    (EDITX1 OBJECT TYPE (QUOTE SHOW])

(SetHashTableContents
  [LAMBDA (H NEW)                                           (* DD: "28-OCT-82 23:35")
    (for X in NEW when (NEQ (CADR X)
			    (GETHASH (CAR X)
				     H))
       do (/PUTHASH (CAR X)
		    (CADR X)
		    H))
    (PROG (X)
          [MAPHASH H (FUNCTION (LAMBDA (A B)                (* REMOVE UNWANTED ITEMS)
		       (OR (FASSOC B NEW)
			   (/PUTHASH B NIL H]
          (RETURN H])

(SetupInfoRec
  [LAMBDA (TYPE)                                            (* DD: "12-APR-83 12:04")
    (AND TYPE (PROG ((INFO (fetch EditRecInfo of TYPE))
		     INST DEC TYP SAMPLE)
		    [COND
		      ((NULL INFO)
			(SETQ DEC (RECLOOK TYPE))
			[SETQ TYP (SELECTQ (CAR DEC)
					   ((RECORD TYPERECORD PROPRECORD ASSOCRECORD)
					     (QUOTE LISTP))
					   ((HASHLINK HASHRECORD)
					     (QUOTE HARRAYP))
					   ((ACCESSFN ACCESSFNS CACCESSFNS ATOMRECORD BLOCKRECORD 
						      SYNONYM)
					     T)
					   ((ARRAYRECORD ARRAYBLOCK)
					     (QUOTE ARRAYP))
					   (DATATYPE (CADR DEC))
					   (COND
					     (INST (TYPENAME INST))
					     (T T]
			[AND (FMEMB TYP (QUOTE (LISTP ARRAYP)))
			     (SETQ SAMPLE (COND
				 ((LISTP (ERRORSET (BQUOTE (SETQ INST (CREATE , TYPE)))
						   (QUOTE NOBREAK)))
				   INST)
				 (T (QUOTE NO]
			(replace EditRecInfo of TYPE
			   with (SETQ INFO (create EditRecInfo
						   RecordDef _ DEC
						   Sample _ SAMPLE
						   DataType _(COND
						     ((EQ TYP (QUOTE HARRAYP))
						       TYP)
						     (T (TYPENUMBERFROMNAME TYP]
		    (RETURN INFO])

(SimilarP
  [LAMBDA (DATATYPE X SAM TYPE DEC)                         (* DD: "12-APR-83 12:25")
    (SELECTC DATATYPE
	     ((TYPENUMBERFROMNAME (QUOTE LISTP))
	       (SELECTQ (CAR DEC)
			[ASSOCRECORD (bind (NAMES _(RECORDFIELDNAMES (OR DEC TYPE))) for ITEM
					in X always (AND (LISTP ITEM)
							 (FMEMB (CAR ITEM)
								NAMES]
			(PROPRECORD (bind (NAMES _(RECORDFIELDNAMES (OR DEC TYPE))) for ITEM
				       in X BY CDDR always (FMEMB ITEM NAMES)))
			[RECORD (COND
				  ((type? HASHARRAY X)
				    (EQ (CADR DEC)
					(QUOTE HASHARRAY)))
				  (T (SimilarlyConsed X SAM]
			(TYPERECORD (AND (EQ (CAR X)
					     (CAR SAM))
					 (SimilarlyConsed X SAM)))
			NIL))
	     [(TYPENUMBERFROMNAME (QUOTE ARRAYP))
	       (AND (EQ (ARRAYSIZE X)
			(ARRAYSIZE SAM))
		    (EQ (ARRAYTYP X)
			(ARRAYTYP SAM]
	     ((QUOTE HARRAYP)
	       T)
	     NIL])

(SimilarlyConsed
  [LAMBDA (X Y)                                             (* DD: "29-DEC-82 12:46")
    (OR (AND (LISTP X)
	     (LISTP Y)
	     (SimilarlyConsed (CAR X)
			      (CAR Y))
	     (SimilarlyConsed (CDR X)
			      (CDR Y)))
	(AND (NLISTP X)
	     (NLISTP Y])
)

(RPAQQ EDITRECEDITHIST (EDITREC.LISP))
(DECLARE: DONTCOPY 

(ADDTOVAR EDITHISTALIST (EDITREC.LISP (("19-Nov-80 15:48:19" . " 1-Nov-80 02:50:21")
				       DD:
				       (<DDYER>EDITREC.LISP.6 . <DDYER>EDITREC.LISP.2)
				       (EDITRECLISPXMACROS EDITRECCOMS EDITRECFNS MAKEREC 
							   EDITRECEDITHIST EDITX REMAKECURRENT 
							   REMAKEREC)
				       (added logic to mark objects changed when appropriate))
				      ("28-Nov-80 18:35:59" DD: <DDYER>EDITREC.LISP.7 (MAKEREC 
											REMAKEREC)
							    (changed to use definitions explicitly))
				      ((" 1-Dec-80 19:36:04" . " 1-Dec-80 17:41:19")
				       DD:
				       (<DDYER>EDITREC.LISP.10 . <DDYER>EDITREC.LISP.9)
				       (EDITX)
				       (changed to improve callability))
				      (("29-DEC-82 13:22:30" . " 1-Dec-80 19:38:05")
				       DD:
				       (/lisp/ddyer/lisp/init.4/EDITREC.;4 . <DDYER>EDITREC.LISP.11)
				       (CompatableRecords MakeSampleInstance RecordType? 
							  SimilarlyConsed SimilarP RecordDataType 
							  EditxRecordChange SHOWX EDITX1
							  (FNS SetHashTableContents HashTableContents)
							  ReplaceStackVariables FetchStackVariables 
							  STACKP ReplaceArrayContents 
							  FetchArrayContents ARRAYP CODEP 
							  FetchFunctionPointers EDITREC.LISP 
							  ReplaceFunctionPointers FunctionHeader 
							  FetchFunctionHeader EDITRECLISPXMACROS 
							  SetHashTableContents HashTableContents 
							  HARRAYP MAKEDTD REMAKEDTD EDITRECRECORDS
							  (HASHLINK PASTTYPES)
							  (HASHLINK (PASTTYPES PASTTYPES))
							  GETOBJECTANDTYPE EDITRECFNS GetTypeToEdit 
							  MAKEREC REMAKEREC EDITX EDITRECCOMS 
							  EDITRECUSERMACROS)
				       (added extra smarts to sort out compatable records and present 
					      them as alternatives. Also, added SHOWX corresponding 
					      to EDITX, but just prints))
				      (("12-Jan-83 13:42:56" . "29-DEC-82 13:36:18")
				       DD:
				       (<DDYER>EDITREC..9 . /lisp/ddyer/lisp/init.4/EDITREC.;5)
				       (FetchArrayContents RecordType? RecordDataType EDITX1 
							   GetTypeToEdit)
				       (fixed a bug which showed no ELTD elements of arrays))
				      ((" 3-FEB-83 10:49:37" . "19-JAN-83 00:10:10")
				       DD:
				       (/lisp/ddyer/lisp/init.4/EDITREC.;4 . 
					 /lisp/ddyer/lisp/init.4/EDITREC.;2)
				       (EDITX1 FetchArrayContents))
				      (" 3-FEB-83 10:55:52" DD: /lisp/ddyer/lisp/init.4/EDITREC.;5
							    (GetTypeToEdit))
				      (" 9-FEB-83 12:48:53" DD: /lisp/ddyer/lisp/init/EDITREC.;2
							    (ReplaceArrayContents))
				      (" 9-FEB-83 13:41:43" DD: /lisp/ddyer/lisp/init/EDITREC.;3
							    (REMAKEREC ReplaceFunctionPointers 
								       ReplaceStackVariables))
				      (" 9-FEB-83 17:46:46" DD: /lisp/ddyer/lisp/init/EDITREC.;4
							    (REMAKEREC ReplaceFunctionPointers)
							    (make things undoable as advertised.))
				      ("27-MAR-83 08:42:36" DD: /lisp/ddyer/lisp/init/EDITREC.;2
							    (FetchFunctionPointers))
				      ("29-MAR-83 12:00:34" DD: /lisp/ddyer/lisp/init/EDITREC.;3
							    (EditxRecordChange MakeSampleInstance))
				      ("29-MAR-83 12:30:25" DD: /lisp/ddyer/lisp/init/EDITREC.;4
							    (EDITX1 MAKEREC REMAKEREC RecordType?))
				      ("29-MAR-83 13:07:09" DD: /lisp/ddyer/lisp/init/EDITREC.;5
							    (EditxRecordChange RecordType? 
									       SetupInfoRecord 
									       CompatableRecords))
				      ("29-MAR-83 13:10:21" DD: /lisp/ddyer/lisp/init/EDITREC.;6
							    (EditxRecordChange))
				      ("29-MAR-83 13:24:29" DD: /lisp/ddyer/lisp/init/EDITREC.;8
							    (SetupInfoRecord))
				      ("30-MAR-83 08:50:10" DD: /lisp/ddyer/lisp/init/EDITREC.;9
							    (SetupInfoRec))
				      (" 8-APR-83 10:41:12" DD: /lisp/ddyer/lisp/init/EDITREC.;10
							    (RecordType? SetupInfoRec))
				      (" 8-APR-83 11:52:04" DD: /lisp/ddyer/lisp/init/EDITREC.;11
							    (EDITX1 GetTypeToEdit))
				      (" 8-APR-83 13:31:20" DD: /lisp/ddyer/lisp/init/EDITREC.;12
							    (EditxRecordChange))
				      ("11-APR-83 16:21:38" DD: /lisp/ddyer/lisp/init/EDITREC.;13
							    (SimilarP SetupInfoRec))
				      ("12-APR-83 12:27:37" DD: /lisp/ddyer/lisp/init/EDITREC.;14
							    (SetupInfoRec SimilarP))))
)

(ADDTOVAR LASTEDITX )

(RPAQQ EDITRECRECORDS (ARRAYP CODEP HARRAYP STACKP HASHARRAY (HASHLINK (EditRecInfo EditRecInfo)
								       (SUBRECORD EditRecInfo))
			      [RECORD EditRecInfo (RecordDef Sample DataType)
				      (ACCESSFNS EditRecInfo ((SAMPLE (fetch (EditRecInfo Sample)
									     of
									     (SetupInfoRec DATUM)))
						  (DATATYPE (fetch (EditRecInfo DataType)
								   of
								   (SetupInfoRec DATUM)))
						  (RECLOOK (fetch (EditRecInfo RecordDef)
								  of
								  (SetupInfoRec DATUM]
			      (HASHLINK (PASTTYPES PASTTYPES))))
[DECLARE: EVAL@COMPILE 

(ACCESSFNS ARRAYP ((Size ARRAYSIZE)
		   (Type ARRAYTYP)
		   (Origin ARRAYORIG)
		   (Contents FetchArrayContents ReplaceArrayContents)))

(ACCESSFNS CODEP ((NumberOfArgs NARGS)
		  (FunctionType FNTYP)
		  (CodeLength (IDIFFERENCE (fetch (SEQUENCE LENGTH) of DATUM)
					   (fetch (SEQUENCE OFFSET) of DATUM)))
		  (FunctionPointers (FetchFunctionPointers DATUM)
				    (ReplaceFunctionPointers DATUM NEWVALUE))))

(ACCESSFNS HARRAYP ((Size (HARRAYSIZE DATUM))
		    (Contents (HashTableContents DATUM)
			      (SetHashTableContents DATUM NEWVALUE))))

(ACCESSFNS STACKP ((FrameName STKNAME SETSTKNAME)
		   (NumberOfArgs (STKNARGS DATUM))
		   (Arguments FetchStackVariables ReplaceStackVariables)
		   (AccessLink (STKNTHNAME 1 DATUM))
		   (ControlLink (STKNTHNAME -1 DATUM))
		   (Blips (GETBLIPS DATUM))
		   (RealFramep? (REALFRAMEP DATUM))
		   (InterpFramep? (REALFRAMEP DATUM T))))

(RECORD HASHARRAY (HARRAYP . GROWTH)
		  [ACCESSFNS ((Size (HARRAYSIZE (fetch (HASHARRAY HARRAYP) of DATUM)))
			      (Contents (fetch (HARRAYP Contents) of (fetch (HASHARRAY HARRAYP)
									of DATUM))
					(replace (HARRAYP Contents) of (fetch (HASHARRAY HARRAYP)
									  of DATUM]
		  [TYPE? (AND (LISTP DATUM)
			      (HARRAYP (fetch (HASHARRAY HARRAYP) OF DATUM))
			      (NLISTP (fetch (HASHARRAY GROWTH) OF DATUM])
(HASHLINK (EditRecInfo EditRecInfo)
	  (SUBRECORD EditRecInfo))
[RECORD EditRecInfo (RecordDef Sample DataType)
	(ACCESSFNS EditRecInfo ((SAMPLE (fetch (EditRecInfo Sample) of (SetupInfoRec DATUM)))
		    (DATATYPE (fetch (EditRecInfo DataType) of (SetupInfoRec DATUM)))
		    (RECLOOK (fetch (EditRecInfo RecordDef) of (SetupInfoRec DATUM]
(HASHLINK (PASTTYPES PASTTYPES))
]

(RPAQQ EDITRECVARS ((PreviousRecordChangeFn (QUOTE CHANGERECORD))
		    (RECORDCHANGEFN (QUOTE EditxRecordChange))))

(RPAQQ PreviousRecordChangeFn CHANGERECORD)

(RPAQQ RECORDCHANGEFN EditxRecordChange)
(DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )

(ADDTOVAR LAMA )
)

(PUTPROPS EDITX HELP (allows you to edit most any object usig the standard LISP editor. Optional TYPE 
			     lets you specify how to represent the object, otherwise the resonable 
			     choices are presented. TYPE can be a DATATYPE, RECORD name or 
			     FILEPKGTYPE.))

(PUTPROPS SHOWX HELP (similar to EDITX but just returns the record that would have been edited.))
(DECLARE: DONTCOPY
  (FILEMAP (NIL (1088 16106 (CompatableRecords 1100 . 1485) (EDITX 1489 . 1633) (EDITX1 1637 . 4516) (EditxRecordChange 4520 . 5729) (
FetchArrayContents 5733 . 6465) (FetchFunctionPointers 6469 . 7381) (FetchStackVariables 7385 . 7619) (GetTypeToEdit 7623 . 8458) (
HashTableContents 8462 . 8692) (MAKEDTD 8696 . 9003) (MAKEREC 9007 . 9361) (REMAKEDTD 9365 . 9858) (REMAKEREC 9862 . 10740) (
RecordType? 10744 . 11246) (ReplaceArrayContents 11250 . 11621) (ReplaceFunctionPointers 11625 . 12394) (ReplaceStackVariables 12398
 . 13061) (SHOWX 13065 . 13209) (SetHashTableContents 13213 . 13662) (SetupInfoRec 13666 . 14853) (SimilarP 14857 . 15799) (
SimilarlyConsed 15803 . 16103)))))
STOP

