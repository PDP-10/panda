(FILECREATED " 5-May-83 01:22:05" <DDYER>TPSTK..25 30506  

      changes to:  (FNS COUNTCALLERSPRINT)
		   (VARS TPSTKCOMS)

      previous date: " 5-May-83 01:05:56" <DDYER>TPSTK..23)


(PRETTYCOMPRINT TPSTKCOMS)

(RPAQQ TPSTKCOMS [(FILES (SYSLOAD COMPILED FROM VALUEOF (FILENAMEFIELD (INPUT)
								       (QUOTE DIRECTORY)))
			 PRINTOPT)
		  (FNS * TPSTKFNS)
		  (EDITHIST * TPSTKEDITHIST)
		  (VARS * TPSTKVARS)
		  (LISPXMACROS * TPSTKLISPXMACROS)
		  (IFPROP HELP TR BR TPSTK TPQ BREAKEXIT SPLICEXIT SPLICEME COUNTCALLERS 
			  COUNTCALLERSPRINT COUNTCALLERSINIT)
		  (ALISTS (BREAKMACROS BREAKEXIT))
		  [DECLARE: DONTCOPY (RECORDS CCREC (HASHLINK (CALLERSPLIST CALLERSPLIST]
		  (DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA)
											(NLAML 
										   COUNTCALLERSFN)
											(LAMA)))
		  (IFPROP HELP TPB)
		  (BLOCKS (TPSTKBLOCK GETBLIPS MAKEREALBNAMES PRODUCEFRAME SHOWFRAME TPB TPBINDING 												     |
				      TPSTK (ENTRIES TPSTK TPB GETBLIPS)												     |
				      (SPECVARS TPSTKPREVIOUS))												     |
			  (COUNTCALLERSBLOCK COUNTCALLERS COUNTCALLERSPRINT COUNTCALLERSINIT 												     |
					     COUNTCALLERSFN COUNTCALLERSSUBFN												     |
					     (ENTRIES COUNTCALLERS COUNTCALLERSPRINT COUNTCALLERSINIT 												     |
						      COUNTCALLERSFN COUNTCALLERSSUBFN])
(FILESLOAD (SYSLOAD COMPILED FROM VALUEOF (FILENAMEFIELD (INPUT)
							 (QUOTE DIRECTORY)))
	   PRINTOPT)

(RPAQQ TPSTKFNS (BREAKEXIT BREAKEXITFN COUNTCALLERS COUNTCALLERSFN COUNTCALLERSINIT COUNTCALLERSPRINT 
			   COUNTCALLERSSUBFN GETBLIPS MAKEREALBNAMES PRODUCEFRAME SHOWFRAME SPLICEME 
			   SPLICEXIT SPLICEX1 TPB TPBINDING TPQ TPSTK))
(DEFINEQ

(BREAKEXIT
  [LAMBDA (POS)                                             (* DD: " 3-MAY-83 16:19")
    (APPLY* (QUOTE BREAK1)
	    NIL T POS (BQUOTE ((BREAKEXITFN (QUOTE , POS])

(BREAKEXITFN
  [LAMBDA (POS)                                             (* DD: " 3-MAY-83 16:31")
    (PROG [(NAME (COND
		   ((STACKP POS)
		     (STKNAME POS))
		   (T POS]
          (DECLARE (LOCALVARS . T))
          [SETQ BRKVALUE (CONS (SETQ !VALUE (SPLICEME POS (QUOTE BREAK1)
						      NIL NIL (STKNTH -1 (QUOTE BREAKEXIT))
						      T]
          (SETQ LASTPOS (BRKLASTPOS))
          (printout BRKFIL "Exit of " NAME T])

(COUNTCALLERS
  [LAMBDA (FNS1 FNS2 WHEN OPTIONS)                          (* DD: " 4-MAY-83 13:44")
    (OR (EQMEMB (QUOTE NOINIT)
		OPTIONS)
	(COUNTCALLERSINIT))
    (for A inside FNS1 join (for B inside (OR FNS2 (QUOTE (NIL)))
			       collect (BREAK0 (COND
						 (B (LIST A (QUOTE IN)
							  B))
						 (T A))
					       (OR WHEN T)
					       OPTIONS
					       (FUNCTION COUNTCALLERSFN])

(COUNTCALLERSFN
  [NLAMBDA (BRKEXP BRKWHEN BRKFN BRKCOMS BRKTYPE)           (* DD: " 4-MAY-83 20:20")
    [COND
      ((OR (EQ BRKWHEN T)
	   (EVAL BRKWHEN))
	(bind (ME _ BRKFN)
	      ALIST ITEM NAME POS (REAL _(NOT (EQMEMB (QUOTE ANY)
						      BRKCOMS)))
	      (N _(OR (for J inside BRKCOMS thereis (FIXP J))
		      1))
	   first [COND
		   ((AND (LITATOM POS)
			 (SETQ POS (STRPOS "-IN-" ME)))
		     (SETQ ME (SUBATOM ME 1 (SUB1 POS]
		 [SETQ ALIST (OR (fetch CALLERSPLIST of ME)
				 (replace CALLERSPLIST of ME with (create CCREC
									  CCNAME _ ME]
		 (add (fetch CCOUNT of ALIST)
		      1)
	   for I from -2 by -1
	   eachtime (SETQ NAME (STKNTHNAME I (QUOTE COUNTCALLERSFN)))
		    [COND
		      ((AND (LITATOM NAME)
			    (SETQ POS (STRPOS "-IN-" NAME)))
			(SETQ NAME (SUBATOM NAME 1 (SUB1 POS]
	   while (AND (IGREATERP N 0)
		      (NEQ NAME T))
	   when (COND
		  (REAL (REALFRAMEP NAME))
		  (T T))
	   do (add N -1)
	      (OR (SETQ ITEM (FASSOC NAME (fetch CREST of ALIST)))
		  (change (fetch CREST of ALIST)
			  (CONS (SETQ ITEM (create CCREC
						   CCNAME _ NAME))
				DATUM)))
	      (add (fetch CCOUNT of ITEM)
		   1)
	      (SETQ ALIST ITEM)
	      (SETQ ME NAME]
    (EVAL BRKEXP])

(COUNTCALLERSINIT
  [LAMBDA (A)                                               (* DD: "25-FEB-83 13:47")
    (INITHASH CALLERSPLIST])

(COUNTCALLERSPRINT
  [LAMBDA (OPTIONS)                                         (* DD: " 5-May-83 01:22")												     |
    (PROG (SOURCEFNS (SORTFN T)												     |
		     N)												     |
          (DECLARE (SPECVARS SOURCEFNS SORTFN))												     |
          [COND												     |
	    ((EQMEMB (QUOTE MOST)												     |
		     OPTIONS)												     |
	      (SETQ SORTFN (FUNCTION (LAMBDA (A B)												     |
		    (ILESSP (fetch CCOUNT of A)												     |
			    (fetch CCOUNT of B]												     |
          (SETQ N (for I inside OPTIONS thereis (FIXP I)))												     |
          (MAPHASH CALLERSPLIST (FUNCTION COUNTCALLERSSUBFN))												     |
          (SORT SOURCEFNS SORTFN)												     |
          (COND												     |
	    (N (RPLACD (NTH SOURCEFNS N)												     |
		       NIL)))												     |
          (COND												     |
	    ((EQMEMB (QUOTE RETURN)												     |
		     OPTIONS)												     |
	      (RETURN SOURCEFNS))												     |
	    (T (PRINTDEF SOURCEFNS)												     |
	       (TERPRI])

(COUNTCALLERSSUBFN
  [LAMBDA (VAL KEY)                                         (* DD: " 4-MAY-83 14:01")
    (change (fetch CREST of VAL)
	    (for X in (fetch CREST of VAL) collect (COUNTCALLERSSUBFN X) finally (SORT $$VAL SORTFN)))
    (COND
      (KEY (push SOURCEFNS VAL)))
    VAL])

(GETBLIPS
  [LAMBDA (SP)                                              (* DD: "17-MAR-83 22:57")
    (SELECTQ (SYSTEMTYPE)
	     [VAX (for X VAL CELL TMP from (BLIPVAL (QUOTE *ANY*)
						    SP T)
		     to 1 by -1
		     do (BLIPVAL (QUOTE *ANY*)
				 SP X (SETQ CELL (CONS)))
			(push VAL CELL)
			[COND
			  ([AND (EQ (CDR CELL)
				    (fetch (BLIP BlipCONT)))
				(LISTP (SETQ TMP (\FINDWHERE (LOC (CAR CELL))
							     SP]
			    (RPLACA CELL (PACK* (CAR TMP)
						"+"
						(CDR TMP]
			(RPLNODE CELL (SELECTC (CDR CELL)
					       ((fetch (BLIP BlipFORM))
						 (QUOTE *FORM*))
					       ((fetch (BLIP BlipTAIL))
						 (QUOTE *TAIL*))
					       ((fetch (BLIP BlipFN))
						 (QUOTE *FN*))
					       ((fetch (BLIP BlipARGVAL))
						 (QUOTE *ARGVAL*))
					       ((fetch (BLIP BlipCONT))
						 (QUOTE *continue*))
					       ((fetch (BLIP BlipCACHE))
						 (QUOTE *cache*))
					       ((fetch (BLIP BlipFIXP))
						 (QUOTE *fixp*))
					       ((fetch (BLIP BlipLOCAL))
						 (QUOTE *local*))
					       (SHOULDNT))
				 (CAR CELL))
		     finally (RETURN (DREVERSE VAL]
	     (PROG (*FN* *TAIL* *FORM* *ARGVAL* RES)
	           (DECLARE (SPECVARS *FORM* *TAIL* *FN* *ARGVAL*))
                                                            (* gather four lists of blips.)
	           [for CB in (QUOTE (*FN* *TAIL* *FORM* *ARGVAL*))
		      do (SET CB (for I from 1 to (BLIPVAL CB SP T)
				    collect (CONS CB (BLIPVAL CB SP I]
                                                            (* now attempt to organize them rationally)
	           (SETQ RES (NCONC (SETQ RES (for X in *FORM* as Y in *TAIL*
						 join (LIST X Y)))
				    (LDIFFERENCE (NCONC *FORM* *TAIL*)
						 RES)))     (* try to insert *fn* blips in places they beling in, 
							    after *form* blips)
	           [SETQ RES (for X in RES join (COND
						  [(EQ (CAR X)
						       (QUOTE *FORM*))
						    (for Y in *FN* when (EQ (CDR Y)
									    (CADR X))
						       do (RETURN (LIST Y X]
						  (T (LIST X]
                                                            (* Try to insert the *argval* blips in the appropriate 
							    places, between *fn* and the following *tail* blip)
	           [SETQ RES (for (A X Y Z) on RES
				eachtime (SETQ X (CAR A))
					 (SETQ Y (CADR A))
					 (SETQ Z (CADDR A))
				join (COND
				       [(AND (EQ (CAR X)
						 (QUOTE *TAIL*))
					     (EQ (CAR Y)
						 (QUOTE *FN*))
					     (EQ (CAR Z)
						 (QUOTE *FORM*))
					     (TAILP (CDR X)
						    (CDR Z))
					     (for (EE FF) on (CDR Z)
						while (AND *ARGVAL*(NEQ (CDR X)
									EE))
						do (SETQ FF (CONS (CAR *ARGVAL*)
								  FF))
						   (SETQ *ARGVAL*(CDR *ARGVAL*))
						finally (RETURN (NCONC (LIST X)
								       (DREVERSE FF]
				       (T (LIST X]
	           (SETQ RES (NCONC RES (LDIFFERENCE (NCONC *FN* *ARGVAL*)
						     RES)))
	           (RETURN RES])

(MAKEREALBNAMES
  [LAMBDA (AL SN ACT)                                       (* DD: "14-Oct-80 16:57")
    (AND (MEMB NIL AL)
	 (FNTYP SN)
	 (for X on AL as Y in (ARGLIST SN) when (EQ (CAR X)
						    NIL)
	    do (RPLACA X (COND
			 (ACT (PACK* (QUOTE {)
				     Y
				     (QUOTE })))
			 (T Y])

(PRODUCEFRAME
  [LAMBDA (AC)                                              (* DD: "15-Dec-82 17:49")
    (PROG ((CSF AC))
          (while CSF
	     do (PRODUCE CSF)
		(SETQ CSF (STKNTH 1 CSF CSF])

(SHOWFRAME
  [LAMBDA (SP TYP)                                          (* DD: " 6-JAN-83 18:14")
    (PROG (NA AL AV BLIPS (SN (STKNAME SP))
	      (REAL (REALFRAMEP SP))
	      (INTERP (REALFRAMEP SP T))
	      TSP1 TSP2 (LL (LINELENGTH))
	      (NAMES (FMEMB (QUOTE NAMES)
			    TYP))
	      (FNFORM (FMEMB (QUOTE FN)
			     TYP))
	      (SHORT (FMEMB (QUOTE SHORT)
			    TYP)))
          [COND
	    ((NULL NAMES)
	      (SETQ NA (STKNARGS SP))
	      (SETQ AL (VARIABLES SP))
	      (SETQ AV (STKARGS SP))
	      (AND (MEMB (QUOTE BLIPS)
			 TYP)
		   (SETQ BLIPS (GETBLIPS SP]
          (OR SN (RETURN))
          (AND (INTERSECTION (QUOTE (INTERP REAL))
			     TYP)
	       (NOT REAL)
	       (RETURN))
          (AND (MEMB (QUOTE INTERP)
		     TYP)
	       (NOT INTERP)
	       (RETURN))
          (AND (MEMB (QUOTE DUMMY)
		     TYP)
	       REAL
	       (RETURN))
          (AND REAL (NOT NAMES)
	       (OR (NOT FNFORM)
		   SHORT)
	       (MAKEREALBNAMES AL SN (MEMB (QUOTE ACTUAL)
					   TYP)))
          [COND
	    ((AND FNFORM (NOT NAMES))
	      (PRINTOPTIMUM (CONS SN (COND
				    (SHORT AL)
				    (T AV)))
			    NIL T)
	      (TERPRI T))
	    (T (printout T (COND
			   ((LISTP SN)
			     (CAR SN))
			   (T SN)))
	       (COND
		 (NAMES (PRIN1 "  " T))
		 (T (printout T 13 (COND
				(REAL (FNTYP SN))
				(T (QUOTE dummy)))
			      21 .I2 NA)
		    (COND
		      ((NOT (EQUAL (STKNTH 1 SP TSP1)
				   (STKNTH -1 SP TSP2)))
			(PRIN1 (QUOTE /=)
			       T)))
		    [COND
		      ((AND (NULL AL)
			    (NULL BLIPS))
			(TERPRI T))
		      (SHORT (TAB 24)
			     (PRINTOPTIMUM AL (IDIFFERENCE LL 24)
					   T T)
			     (TERPRI T))
		      (T (for I in AL as J in AV
			    do (printout T 24 I 38)
			       (PRINTOPTIMUM J (IDIFFERENCE LL 38)
					     T T)
			       (TERPRI T))
			 (for I in BLIPS
			    do (printout T 24 (CAR I)
					 38)
			       (PRINTOPTIMUM (CDR I)
					     (IDIFFERENCE LL 38)
					     T T)
			       (TERPRI T]
		    (RELSTK TSP1)
		    (RELSTK TSP2]
          (RETURN T])

(SPLICEME
  [LAMBDA (WHERE FROM TO LINKS RESUMEAT RETFLG)             (* DD: " 4-MAY-83 10:30")
                                                            (* see HELP property of SPLICEME for documentation)
    (PROG ([TO (COND
		 (TO (STKNTH 0 TO))
		 (T (STKNTH -1 (QUOTE SPLICEME]
	   (FROM (STKNTH 0 FROM))
	   (TARGET (STKNTH 0 WHERE))
	   RET
	   (VAL T))
          [COND
	    ((EQMEMB LINKS (QUOTE (NIL BOTH C CLINK)))
	      (SETQ VAL (AND (SETQ RET (STKNTH -1 TARGET))
			     (SETCLINK FROM RET)
			     (SETCLINK TARGET TO)
			     (COND
			       ((NULL LINKS)
				 (SETALINK FROM (STKNTH 1 TARGET RET)))
			       (T T]
          [COND
	    ((EQMEMB LINKS (QUOTE (BOTH A ALINK)))
	      (SETQ VAL (AND VAL (SETQ RET (STKNTH 1 TARGET RET))
			     (SETALINK FROM RET)
			     (SETALINK TARGET TO]
          (AND VAL (SETQ VAL WHERE))
          (RELSTK RET)
          (RELSTK FROM)
          (RELSTK TARGET)
          (RELSTK TO)
          (COND
	    (RESUMEAT (RETTO RESUMEAT VAL RETFLG)))
          (RETURN VAL])

(SPLICEXIT
  [LAMBDA (WHERE FN ALINKFLG)                               (* DD: " 4-MAY-83 10:10")
    (DECLARE (SPECVARS . T))
    (PROG (!VALUE INS PREV SECOND)
          (DECLARE (SPECVARS . T))
          (SETQ INS (SPLICEX1 FN WHERE))
          (SETCLINK INS (SETQ PREV (STKNTH 1 WHERE)))
          (COND
	    ((EQ ALINKFLG WHERE)
	      (SETALINK INS PREV))
	    (ALINKFLG (SETALINK INS ALINKFLG)))
          (SETCLINK WHERE INS)
          (RELSTK INS)
          (RELSTK PREV])

(SPLICEX1
  [LAMBDA (!FN !WHERE !SECOND !VALUE)                       (* DD: " 4-MAY-83 09:46")

          (* this code only works compiled. When called, it returns a pointer to itself. When RESUMED, it calls !FN with 
	  !VALUE bound to the value or was resumed with. !WHERE is nominally bound to the name of the frame SPLICEX splices us
	  into.If !FN is an atom or a list whose CAR is LAMBDA, it is called with APPLY*, otherwise its CAR is APPLY'd to its 
	  CDR.)


    (SETQ !VALUE (STKNTH -1))
    (COND
      [!SECOND (COND
		 ((OR (NLISTP !FN)
		      (EQ (CAR !FN)
			  (QUOTE LAMBDA)))
		   (APPLY* !FN))
		 (T (APPLY (CAR !FN)
			   (CDR !FN]
      (T                                                    (* this is SET rather than SETQ because the bytecompiler
							    removes the setq as "dead")
	 (SET (QUOTE !SECOND)
	      T)))!VALUE])

(TPB
  [LAMBDA (ALIST)                                           (* DD: "11-DEC-81 19:22")
    (SETQ ALIST (MKLIST ALIST))
    (for X outof (PRODUCEFRAME (QUOTE TPB)) do (TPBINDING ALIST X))
    (for X in ALIST
       do (printout T "topval" 13 .FR 25 X " = ")
	  (PRINTOPTIMUM (GETTOPVAL X)
			(IDIFFERENCE (LINELENGTH)
				     28)
			T T)
	  (TERPRI T])

(TPBINDING
  [LAMBDA (VAR SP)                                          (* DD: "11-DEC-81 19:31")
    (PROG ((REAL (REALFRAMEP SP))
	   (NAMES (VARIABLES SP))
	   (REALNAMES (VARIABLES SP))
	   (SN (STKNAME SP))
	   (LEN (LENGTH VAR))
	   REALNAME PRINTED)
          [COND
	    (REAL (MAKEREALBNAMES NAMES SN NIL)
		  (MAKEREALBNAMES REALNAMES SN REAL))
	    (T (for I from -1 by -1 do (SETQ REALNAME (STKNTH I SP REALNAME)) repeatuntil
									       (REALFRAMEP REALNAME]
          [AND (INTERSECTION VAR NAMES)
	       (PROG ((ARGS (STKARGS SP))
		      (LL (LINELENGTH)))
		     (for X in NAMES as Y in REALNAMES as Z in ARGS
			do (COND
			     ((FMEMB X VAR)
			       [printout T # (COND
					   ((NOT PRINTED)
					     (PRIN1 SN)
					     [COND
					       ((NOT REAL)
						 (PRIN1 " in ")
						 (PRIN1 (STKNAME REALNAME]
					     (SETQ PRINTED T))
					   (T (PRIN1 "   ..."]
			       (COND
				 ((IGREATERP LEN 1)
				   (printout T .FR 25 Y)))
			       (TAB 25 T)
			       (PRIN1 " = " T)
			       (PRINTOPTIMUM Z (IDIFFERENCE LL 28)
					     T T)
			       (TERPRI T]
          (AND REALNAME (RELSTK REALNAME])

(TPQ
  [LAMBDA (OPTIONS)                                         (* DD: "15-DEC-82 15:58")
    (PROG ((TPSTKPREVIOUS (OR BTQPREVIOUS TPSTKPREVIOUS))
	   VAL)
          [SETQ VAL (TPSTK (APPEND OPTIONS (QUOTE (+ NAMES]
          (SETQ BTQPREVIOUS TPSTKPREVIOUS)
          (RETURN VAL])

(TPSTK
  [LAMBDA (OPTIONS)                                         (* DD: " 3-JAN-83 20:17")
    [RESETFORM (GCGAG)
	       (PROG (FROMFRAME TOFRAME OPT OPT1 JOINED FROMSP)
		     [SETQ TPSTKPREVIOUS
		       (COND
			 ((AND OPTIONS (SETQ OPT1 (for Y X on (MKLIST OPTIONS) eachtime
										(SETQ X (CAR Y))
										RETR
						     when (COND
							    ((FIXP X)
							      [COND
								((NULL TOFRAME)
								  (SETQ TOFRAME X)
								  (SETQ FROMFRAME 0))
								(T (SETQ FROMFRAME TOFRAME)
								   (SETQ TOFRAME
								     (COND
								       ((ILESSP X FROMFRAME)
									 X)
								       (T (IDIFFERENCE X FROMFRAME]
							      (SETQ X NIL))
							    ((EQ X (QUOTE TO))
							      (SETQ TOFRAME (CADR Y))
							      (SETQ Y (CDR Y))
							      (SETQ X NIL))
							    ((EQ X (QUOTE FROM))
							      (SETQ FROMFRAME (CADR Y))
							      (SETQ Y (CDR Y))
							      (SETQ X NIL))
							    ((FMEMB X TPSTKOPTIONS)
							      X)
							    ((SETQ X (FIXSPELL X TPSTKOPTIONS 70))
							      (GO RETR))
							    (T (printout T (CAR Y)
									 " isn't a TPSTK option" T)
							       (SETQ X NIL)))
						     collect X)))
			   (for X on OPT1
			      do [COND
				   [(EQ (CAR X)
					T)                  (* T appends default to the list)
				     (SETQ TPSTKPREVIOUS (SETQ OPT (UNION OPT TPSTKDEFAULT]
				   ((EQ (CAR X)
					(QUOTE +))          (* + appends previous to the remainder of the list)
				     (OR JOINED (SETQ OPT (UNION OPT TPSTKPREVIOUS)))
				     (SETQ JOINED T))
				   [(EQ (CAR X)
					(QUOTE -))          (* -
							    apends previous less the remainder of the list)
				     (OR JOINED (SETQ OPT (UNION OPT TPSTKPREVIOUS)))
				     (SETQ JOINED T)
				     (while [AND (CADR X)
						 (NOT (FMEMB (CADR X)
							     (QUOTE (+ - T]
					do (SETQ OPT (REMOVE (CADR X)
							     OPT))
					   (SETQ X (CDR X]
				   (T (OR (FMEMB (CAR X)
						 OPT)
					  (SETQ OPT (CONS (CAR X)
							  OPT]
			      finally (RETURN OPT)))
			 (T (OR TPSTKPREVIOUS TPSTKDEFAULT]
		     (PRIN1 "{" T)
		     (PRINTDEF TPSTKPREVIOUS NIL NIL T NIL T)
		     (PRIN1 "}" T)
		     (TERPRI T)
		     [SETQ FROMSP (COND
			 ((BOUNDP (QUOTE LASTPOS))
			   (STKNTH 0 LASTPOS))
			 (T (STKPOS (QUOTE TPSTK)
				    1]
		     [AND FROMFRAME (SETQ FROMSP (COND
			      ((FIXP FROMFRAME)
				(STKNTH FROMFRAME FROMSP))
			      (T (STKPOS FROMFRAME 0 FROMSP]
		     (COND
		       (FROMSP (for X PFLAG outof (PRODUCEFRAME FROMSP) do (SETQ PFLAG
									     (SHOWFRAME X 
										    TPSTKPREVIOUS))
				  repeatwhile (COND
						((NULL PFLAG))
						((NULL TOFRAME))
						((FIXP TOFRAME)
						  (IGREATERP (SETQ TOFRAME (SUB1 TOFRAME))
							     0))
						((NEQ (STKNAME FROMSP)
						      TOFRAME)))
				  finally (RELSTK FROMSP]
    (CONSTANT (MKATOM ""])
)

(RPAQQ TPSTKEDITHIST (TPSTK.LISP))
(DECLARE: DONTCOPY 

(ADDTOVAR EDITHISTALIST (TPSTK.LISP (("14-Oct-80 16:55:23" . "27-Sep-80 00:50:24")
				     DD:
				     (<DDYER>TPSTK.LISP.21 . T)
				     (TPSTKVARS TPSTKDEFAULT TPSTKOPTIONS TPSTKPREVIOUS 
						TPSTKLISPXMACROS (TR HELP)
						(BR HELP)
						(TPSTK HELP)
						(TPB HELP)
						BR TPSTK TR UNBR SHOWFRAME TPB TPBINDING NOBIND)
				     (rearranged to allow option of using PRIN2 in PRINTOPTIMUM and 
						 related functions))
				    ("14-Oct-80 16:58:02" DD: <DDYER>TPSTK.LISP.22 (MAKEREALBNAMES)
							  (made MAKEREALBNAMES defensive about 
								function names. Names with no 
								corresponding defintion CAN get 
								there!))
				    (("16-Oct-80 20:49:25" . "16-Oct-80 15:35:05")
				     DD:
				     (<DDYER>TPSTK.LISP.26 . <DDYER>TPSTK.LISP.23)
				     (TPSTKPREVIOUS (TPSTK HELP)
						    TPSTKOPTIONS TPSTK SHOWFRAME)
				     NIL)
				    (("17-Oct-80 15:36:14" . "17-Oct-80 14:33:59")
				     DD:
				     (<DDYER>TPSTK.LISP.28 . <DDYER>TPSTK.LISP.27)
				     (GETBLIPS)
				     (greatly improved GETBLIPS so blips printout))
				    (("11-Dec-80 21:17:17" . "17-Oct-80 15:45:29")
				     DD:
				     (<DDYER>TPSTK.LISP.30 . <DDYER>TPSTK.LISP.29)
				     (SHOWFRAME TPSTKPREVIOUS)
				     (fixed bug in printing interpreted LAMBDA expressions))
				    ("11-Dec-80 21:31:57" DD: <DDYER>TPSTK.LISP.31 (TPSTKCOMS)
							  (fixing blocks))
				    ((" 4-Dec-81 15:29:20" . "26-Dec-80 16:49:10")
				     DD:
				     (<DDYER>TPSTK..3 . <DDYER>TPSTK.LISP.32)
				     (GETBLIPS TPSTKFNS TPSTKVARS TPSTKPREVIOUS TPSTKCOMS)
				     (fixed a bug in BCOMPLing GETBLIPS))
				    ((" 9-DEC-81 00:36:45" . " 8-DEC-81 23:04:00")
				     edited:
				     (TPSTK.;5 . TPSTK.;2)
				     (TPSTKPREVIOUS TPSTKCOMS MAKEREALBNAMES PRODUCEFRAME SHOWFRAME 
						    TPBINDING GETBLIPS TPB TPSTK))
				    (("11-DEC-81 19:25:42" . "11-Dec-81 15:50:11")
				     DD:
				     (TPSTK.;7 . <DDYER>TPSTK..5)
				     (PRODUCEFRAME MAKEREALBNAMES TPB TPBINDING TPSTK)
				     (tweaked TPB format))
				    (("15-DEC-82 14:30:26" . "11-DEC-81 19:32:34")
				     DD:
				     (/lisp/ddyer/lisp/init.4/TPSTK.;2 . TPSTK.;8)
				     (GETBLIPS PRODUCEFRAME SHOWFRAME TPSTKCOMS TPSTK TPB TPBINDING)
				     (added options NAMES FROM and TO))
				    (("15-DEC-82 16:43:44" . "15-DEC-82 14:50:15")
				     DD:
				     (/lisp/ddyer/lisp/init.4/TPSTK.;6 . 
				       /lisp/ddyer/lisp/init.4/TPSTK.;3)
				     (SHOWFRAME TPQ BTQ TPSTK)
				     (added the option of function-format printing))
				    ("15-Dec-82 17:55:00" DD: <DDYER>TPSTK..14 (GETBLIPS PRODUCEFRAME 
											 TPB TPSTK))
				    ("15-Dec-82 18:06:54" DD: <DDYER>TPSTK..15 (GETBLIPS SHOWFRAME 
											 TPB TPSTK))
				    (" 3-JAN-83 20:18:26" DD: /lisp/ddyer/lisp/init.4/TPSTK.;2
							  (GETBLIPS TPB TPSTK))
				    (" 3-JAN-83 20:58:14" DD: /lisp/ddyer/lisp/init.4/TPSTK.;3
							  (TPB))
				    (" 6-JAN-83 18:15:16" DD: /lisp/ddyer/lisp/init.4/TPSTK.;2
							  (GETBLIPS SHOWFRAME TPB TPSTK))
				    (" 6-JAN-83 23:40:38" DD: /lisp/ddyer/lisp/init.4/TPSTK.;3
							  (TPB TPSTK))
				    ("17-MAR-83 12:14:48" ddyer /lisp/ddyer/lisp/init/TPSTK.;2
							  (GETBLIPS TPB TPSTK))
				    ("17-MAR-83 17:18:00" DD: /lisp/ddyer/lisp/init/TPSTK.;3
							  (GETBLIPS TPB TPSTK))
				    ("18-MAR-83 01:11:32" DD: /lisp/ddyer/lisp/init/TPSTK.;4
							  (GETBLIPS TPB TPSTK))
				    (" 3-MAY-83 16:56:09" DD: /lisp/ddyer/lisp/init/TPSTK.;2
							  (BREAKEXIT BREAKEXITFN SPLICEME))
				    (" 3-MAY-83 17:32:37" DD: /lisp/ddyer/lisp/init/TPSTK.;3
							  (SPLICEME SPLICEX SPLICEX1))
				    (" 3-MAY-83 20:26:54" DD: /lisp/ddyer/lisp/init/TPSTK.;4
							  (SPLICEX1))
				    (" 4-MAY-83 10:10:45" DD: /lisp/ddyer/lisp/init/TPSTK.;5
							  (SPLICEX1 SPLICEXIT))
				    (" 4-MAY-83 10:30:45" DD: /lisp/ddyer/lisp/init/TPSTK.;6
							  (SPLICEME))
				    (" 4-MAY-83 13:15:12" DD: /lisp/ddyer/lisp/init/TPSTK.;8
							  (COUNTCALLERS COUNTCALLERSFN 
									COUNTCALLERSINIT 
									COUNTCALLERSPRINT))
				    (" 4-MAY-83 14:28:53" DD: /lisp/ddyer/lisp/init/TPSTK.;9
							  (COUNTCALLERSPRINT COUNTCALLERSSUBFN 
									     COUNTCALLERS 
									     COUNTCALLERSFN))
				    (" 4-MAY-83 20:18:28" DD: /lisp/ddyer/lisp/init/TPSTK.;10
							  (COUNTCALLERSFN))
				    (" 4-MAY-83 20:21:17" DD: /lisp/ddyer/lisp/init/TPSTK.;11
							  (COUNTCALLERSFN))
				    (" 5-May-83 01:22:10" DD: <DDYER>TPSTK..25 (COUNTCALLERSPRINT))))
)

(RPAQQ TPSTKVARS (CALLERSPLIST TPSTKDEFAULT TPSTKOPTIONS (TPSTKPREVIOUS)
			       (BTQPREVIOUS)
			       (TRACECONSEDFNS)))

(RPAQQ CALLERSPLIST ({HARRAYP}#147032))

(RPAQQ TPSTKDEFAULT (SHORT REAL))

(RPAQQ TPSTKOPTIONS (NAMES SHORT REAL BLIPS DUMMY ACTUAL T + - FROM TO FN))

(RPAQQ TPSTKPREVIOUS NIL)

(RPAQQ BTQPREVIOUS NIL)

(RPAQQ TRACECONSEDFNS NIL)

(RPAQQ TPSTKLISPXMACROS (BR TPB TPSTK TR UNBR TPQ))

(ADDTOVAR LISPXMACROS (BR (DOFORFILEFNS (QUOTE BREAK)
					LISPXLINE))
		      (TPB (TPB LISPXLINE))
		      (TPSTK (TPSTK LISPXLINE))
		      (TR (DOFORFILEFNS (QUOTE TRACE)
					LISPXLINE))
		      (UNBR (DOFORFILEFNS (QUOTE UNBREAK)
					  LISPXLINE))
		      (TPQ (TPQ LISPXLINE)))

(ADDTOVAR LISPXCOMS BR)

(PUTPROPS TR HELP (is an addition to the standard break package. Given any atom, it traces ALL the 
		      functions found in the same file as that atom. See also: BR UNBR))

(PUTPROPS BR HELP (breaks all functions is the file containing its argument. See also: TR UNBR))

(PUTPROPS TPSTK HELP (is a superior replacement for BAKTRACE. OPTIONS is a list of options. NIL means 
			 use PREVIOUS options list. options are as follows:
			 ((T means append TPSTKDEFAULT options, plus rest of options list)
			  (+ means append TPSTKPREVIOUS options to the rest of the list)
			  (- means remove the following from TPSTKPREVIOUS)
			  (NAMES means show names of functions only)
			  (SHORT type arg names only. Otherwise type arg names and values.)
			  (REAL type REALFRAMEP frames only.)
			  (INTERP is REALFRAMEP T frames, which includes interpreted special forms)
			  (DUMMY means show dummy frames only)
			  (BLIPS means show blip fields)
			  (ACUAL means show local variables inside { })
			  (FROM XX shows frames starting at frame XX above LASTPOS. XX can be a frame 
				name or a number of frames)
			  (TO XX stops at frame XX above the first shown. XX can be a frame name or a 
			      number of frames. The FROM and TO specs are not remembered between 
			      calls to TPSTK)
			  (FN causes the printing to be formatted as function calls))))

(PUTPROPS TPQ HELP (is like TPSTK, except that it always adds option NAMES))

(PUTPROPS BREAKEXIT HELP (is both a function and a LISPXMACRO which sets an exit breakpoint on a 
			     function that has already been called. See also SPLICEXIT SPLICEME))

(PUTPROPS SPLICEXIT HELP (splices in an arbitrary function call after the exit of some existing stack 
				  frame. (WHERE is any valid stack locator)
				  (if FN is a non-list or a list whose CAR is LAMBDA, it is APPLY*'d 
				      with no arguments. Otherwise, (APPLY (CAR FN)
									   (CDR FN))
				      is done.)
				  (if ALINKFLG is non-NIL, the ALINK of the spliced computation is 
				      set as well. The most useful cases are T, which essentially 
				      specifies no access environment, and the same as WHERE, which 
				      specifies ALINK = CLINK. ALINKFLG=NIL leaves the ALINK chain of 
				      the spliced computation unchanged, which preserves the access 
				      environment of the splicer until the splice has been discarded.)
				  ))

(PUTPROPS SPLICEME HELP (splices a chunk of stack into a new environment. For example, it is used by 
				 BREAKEXIT to splice a breakpoint after the exit of a function that 
				 has already been called. WHERE is a stack locative for the function 
				 whose return is to be changed. FROM and TO designate the upper and 
				 lower limits of the stack segment to be spliced between WHERE and 
				 its caller. The default for TO is SPLICEME itself. LINKS specifies 
				 which links are to be smashed. NIL C or CLINK means set the CLINK 
				 only. ALINK or A means set ALINK only, BOTH means set both alink and 
				 clink If RESUMEAT is specified, SPLICEME exits by
				 (RETTO RESUMEAT VAL RETFLG)
				 SPLICEME returns T if all splicing operations succeeded))

(PUTPROPS COUNTCALLERS HELP (works like BRKDWN, but generates dynamic counts of who calls particular 
				   functions. (FNS1 can be a function name or list of functions)
				   (FNS2 can be a function name or a list of functions. If FNS2 is 
					 non-nil, countcallers set up to count ANY-IN-FNS1 called by 
					 ANY-IN-FNS2.)
				   (WHEN is a break condition similar to what BREAK accepts)
				   (OPTIONS are controls on the accounting process, which can be an 
					    atom ort a list of atoms. Current options are:
					    ((ANY to record any stack frame. Otherwise only 
						  REALFRAMEP frames are recorded.)
					     (a NUMBER in which case N callers are recorded rather 
						than just the immediate caller.))
					    (NOINIT supresses the reinitialization of the data 
						    collected))
				   See also COUNTCALLERSINIT and COUNTCALLERSPRINT))

(PUTPROPS COUNTCALLERSPRINT HELP (tabulates and prints the results gathered by COUNTCALLERS. OPTIONS 
					    can be an atom or a list of atoms. Current options are:
					    ((RETURN causes the data structure to be returned rather 
						     than printed.)
					     (a NUMBER truncates the structure to its first N items)
					     (MOST changes the sorting from alphabetical to by most 
						   calls))))

(PUTPROPS COUNTCALLERSINIT HELP (reinitializes the results COUNTCALLERS is gathering. Normally, 
					       COUNTCALLERSINIT is done by every call to COUNTCALLERS)
)

(ADDTOVAR BREAKMACROS (BREAKEXIT (BREAKEXIT (OR (BREAKREAD)
						LASTPOS))))
(DECLARE: DONTCOPY 
[DECLARE: EVAL@COMPILE 

(RECORD CCREC (CCNAME CCOUNT . CREST)
	      CCOUNT _ 0)
(HASHLINK (CALLERSPLIST CALLERSPLIST))
]
)
(DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML COUNTCALLERSFN)

(ADDTOVAR LAMA )
)

(PUTPROPS TPB HELP (ascends the stack printing the bindings for each variable listed. Local variables 
			    print in { }))
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
(BLOCK: TPSTKBLOCK GETBLIPS MAKEREALBNAMES PRODUCEFRAME SHOWFRAME TPB TPBINDING TPSTK
	(ENTRIES TPSTK TPB GETBLIPS)
	(SPECVARS TPSTKPREVIOUS))
(BLOCK: COUNTCALLERSBLOCK COUNTCALLERS COUNTCALLERSPRINT COUNTCALLERSINIT COUNTCALLERSFN 
	COUNTCALLERSSUBFN (ENTRIES COUNTCALLERS COUNTCALLERSPRINT COUNTCALLERSINIT COUNTCALLERSFN 
				   COUNTCALLERSSUBFN))
]
(DECLARE: DONTCOPY
  (FILEMAP (NIL (1765 19409 (BREAKEXIT 1777 . 1967) (BREAKEXITFN 1971 . 2436) (COUNTCALLERS 2440 . 2887)
 (COUNTCALLERSFN 2891 . 4284) (COUNTCALLERSINIT 4288 . 4430) (COUNTCALLERSPRINT 4434 . 5609) (
COUNTCALLERSSUBFN 5613 . 5958) (GETBLIPS 5962 . 9156) (MAKEREALBNAMES 9160 . 9500) (PRODUCEFRAME 9504 
. 9721) (SHOWFRAME 9725 . 11906) (SPLICEME 11910 . 12999) (SPLICEXIT 13003 . 13520) (SPLICEX1 13524 . 
14429) (TPB 14433 . 14843) (TPBINDING 14847 . 16087) (TPQ 16091 . 16393) (TPSTK 16397 . 19406)))))
STOP
