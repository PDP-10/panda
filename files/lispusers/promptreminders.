(FILECREATED "10-SEP-83 16:35:35" {PHYLUM}<LISPUSERS>PROMPTREMINDERS.;6   21732

      changes to:  (VARS PROMPTREMINDERSCOMS)
		   (FNS PERIODICALLYCHECKREMINDERS)

      previous date: "25-JUL-83 18:03:58" {PHYLUM}<LISPUSERS>PROMPTREMINDERS.;4)


(* Copyright (c) 1982, 1983 by Xerox Corporation)

(PRETTYCOMPRINT PROMPTREMINDERSCOMS)

(RPAQQ PROMPTREMINDERSCOMS ((* "Reminders" , which wake up periodically at PROMPTCHARS time, and 
			       notify you of an "urgent" message via the PROMPTWINDOW)
			    (COMS (* Next FNS ought to be elsewhere)
				  (DECLARE: DONTCOPY (MACROS NNLITATOM \CHECKTYPE \NULL.OR.FIXP 
							     \CHARS.OR.FIXP)
					    (PROP MACRO NCREATE)
					    (* FOO, following functionality ought to be with the 
					       DURATION stuff.)
					    (MACROS TIMERSUBTRACT))
				  (* Lossage to be sure TIMEREXPIRED? is defined)
				  (DECLARE: DONTEVAL@LOAD COPYWHEN (NEQ COMPILEMODE (QUOTE D))
					    (INITVARS (PROMPTWINDOW T)
						      (\RCLKSECOND 1000))))
			    (DECLARE: EVAL@COMPILE DONTCOPY (RECORDS PERIODIC.PROMPT.REMINDER))
			    (RECORDS \SHOWABLE.PROMPT.REMINDER)
			    (GLOBALRESOURCES (\REMINDER.HOLD.TIMER (SETUPTIMER 0 NIL (QUOTE TICKS)))
					     (\REMINDER.FLASH.TIMER (SETUPTIMER 0 NIL (QUOTE TICKS)))
					     (\REMINDER.LITTLE.TIMER (SETUPTIMER 0 NIL (QUOTE TICKS)))
					     )
			    (FNS SETREMINDER ACTIVEREMINDERNAMES INSPECTREMINDER 
				 REMINDER.NEXTREMINDDATE REMINDER.EXPIRATIONDATE REMINDER.PERIOD)
			    (FNS PERIODICALLYCHECKREMINDERS \PUTREMINDER \GETREMINDER \DELREMINDER)
			    (DECLARE: COPYWHEN (EQ COMPILEMODE (QUOTE D))
				      (FNS \PR.KBDChangedP)
				      (INITVARS (\PERIOD.SAVEDCARET NIL)))
			    (INITVARS (DEFAULT.REMINDER.DURATION 60)
				      (DEFAULT.REMINDER.WINKINGDURATION 10)
				      (PERIODIC.PROMPT.REMINDERS NIL))
			    (GLOBALVARS DEFAULT.REMINDER.DURATION DEFAULT.REMINDER.WINKINGDURATION 
					PERIODIC.PROMPT.REMINDERS \PERIOD.SAVEDCARET \EM.KBDAD0 
					DEFAULT.REMINDER.PERIOD)
			    (FILEPKGCOMS REMINDERS)
			    (ADDVARS (PROMPTCHARFORMS (PERIODICALLYCHECKREMINDERS)))
			    (DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
				      (ADDVARS (NLAMA)
					       (NLAML)
					       (LAMA REMINDER.PERIOD REMINDER.EXPIRATIONDATE 
						     REMINDER.NEXTREMINDDATE)))))



(* "Reminders" , which wake up periodically at PROMPTCHARS time, and notify you of an "urgent" 
message via the PROMPTWINDOW)




(* Next FNS ought to be elsewhere)

(DECLARE: DONTCOPY 
(DECLARE: EVAL@COMPILE 

(PUTPROPS NNLITATOM MACRO (OPENLAMBDA (X)
  (AND X (LITATOM X))))

(PUTPROPS \CHECKTYPE MACRO (X
  (PROG ((VAR (CAR X))
	 (PRED (CADR X)))
        (if (AND (LISTP PRED)
		 (MEMB (CAR PRED)
		       (QUOTE (QUOTE FUNCTION))))
	    then (SETQ PRED (LIST (CADR PRED)
				  VAR)))
        (RETURN (SUBPAIR (QUOTE (MSG VAR PRED))
			 (LIST (CONCAT "
 is not a suitable value for the variable:  " VAR)
			       VAR PRED)
			 (QUOTE (until PRED do (SETQ VAR (ERROR VAR MSG)))))))))

(PUTPROPS \NULL.OR.FIXP MACRO (OPENLAMBDA (X)
  (OR (NULL X)
      (FIXP X))))

(PUTPROPS \CHARS.OR.FIXP MACRO (OPENLAMBDA (X)
  (OR (FIXP X)
      (STRINGP X)
      (LITATOM X))))
)


(PUTPROPS NCREATE MACRO (X
  (if (EQUAL (CAR X)
	     (QUOTE (QUOTE FIXP)))
      then (QUOTE (IPLUS 1000000))
    else (QUOTE IGNOREMACRO))))




(* FOO, following functionality ought to be with the DURATION stuff.)


(DECLARE: EVAL@COMPILE 

(PUTPROPS TIMERSUBTRACT DMACRO (OPENLAMBDA (TIMER OLDTIMER)
  (\BOXIDIFFERENCE OLDTIMER TIMER)))

(PUTPROPS TIMERSUBTRACT MACRO (OPENLAMBDA (TIMER OLDTIMER)
  (IDIFFERENCE OLDTIMER TIMER)))
)
)



(* Lossage to be sure TIMEREXPIRED? is defined)

(DECLARE: DONTEVAL@LOAD COPYWHEN (NEQ COMPILEMODE (QUOTE D)) 

(RPAQ? PROMPTWINDOW T)

(RPAQ? \RCLKSECOND 1000)
)
(DECLARE: EVAL@COMPILE DONTCOPY 
[DECLARE: EVAL@COMPILE 

(TYPERECORD PERIODIC.PROMPT.REMINDER (REMINDER.TIMEOUTBOX REMINDER.MESSAGE REMINDER.PERIOD 
							  REMINDER.WINKINGDURATION REMINDER.DURATION 
							  REMINDER.FINALTIME)
	    REMINDER.TIMEOUTBOX _(SETUPTIMER 0)
	    (ACCESSFNS ((REMINDER.NEXTREMINDDATE (GDATE (SELECTQ (SYSTEMTYPE)
								 (D (LOGXOR MIN.FIXP
									    (fetch 
									      REMINDER.TIMEOUTBOX
									       of DATUM)))
								 (IPLUS (fetch REMINDER.TIMEOUTBOX
									   of DATUM)
									(IDIFFERENCE
									  (IDATE)
									  (IQUOTIENT (CLOCK 0)
										     1000)))))
						 (PROG2 (replace REMINDER.TIMEOUTBOX of DATUM
							   with (SETUPTIMER.DATE NEWVALUE
										 (fetch 
									      REMINDER.TIMEOUTBOX
										    of DATUM)))
							(OR (STRINGP DATUM)
							    (fetch REMINDER.NEXTREMINDDATE
							       of DATUM))))
			(REMINDER.EXPIRATIONDATE
			  (AND (fetch REMINDER.FINALTIME of DATUM)
			       (GDATE (SELECTQ (SYSTEMTYPE)
					       (D (LOGXOR MIN.FIXP (fetch REMINDER.FINALTIME
								      of DATUM)))
					       (IPLUS (fetch REMINDER.FINALTIME of DATUM)
						      (IDIFFERENCE (IDATE)
								   (IQUOTIENT (CLOCK 0)
									      1000))))))
			  (PROG2 (replace REMINDER.FINALTIME of DATUM with (SETUPTIMER.DATE NEWVALUE))
				 (fetch REMINDER.EXPIRATIONDATE of DATUM))))))
]
)
[DECLARE: EVAL@COMPILE 

(RECORD \SHOWABLE.PROMPT.REMINDER (NIL NIL \REMINDER.MESSAGE \REMINDER.PERIOD 
				       \REMINDER.WINKINGDURATION \REMINDER.DURATION)
				  (CREATE (ERROR DATUM "Creations not allowed on this record"))
				  (ACCESSFNS ((\REMINDER.NEXTREMINDDATE (REMINDER.NEXTREMINDDATE
									  DATUM)
									(REMINDER.NEXTREMINDDATE
									  DATUM NEWVALUE))
					      (\REMINDER.EXPIRATIONDATE (REMINDER.EXPIRATIONDATE
									  DATUM)
									(REMINDER.EXPIRATIONDATE
									  DATUM NEWVALUE)))))
]

(RPAQQ \REMINDER.HOLD.TIMER NIL)

(RPAQQ \REMINDER.FLASH.TIMER NIL)

(RPAQQ \REMINDER.LITTLE.TIMER NIL)
(DECLARE: DOEVAL@COMPILE DONTCOPY

(ADDTOVAR GLOBALVARS \REMINDER.HOLD.TIMER \REMINDER.FLASH.TIMER \REMINDER.LITTLE.TIMER)
)
(DECLARE: DOEVAL@COMPILE DONTCOPY 
(PUTDEF (QUOTE \REMINDER.HOLD.TIMER)
	(QUOTE GLOBALRESOURCES)
	(QUOTE (SETUPTIMER 0 NIL (QUOTE TICKS))))
(PUTDEF (QUOTE \REMINDER.FLASH.TIMER)
	(QUOTE GLOBALRESOURCES)
	(QUOTE (SETUPTIMER 0 NIL (QUOTE TICKS))))
(PUTDEF (QUOTE \REMINDER.LITTLE.TIMER)
	(QUOTE GLOBALRESOURCES)
	(QUOTE (SETUPTIMER 0 NIL (QUOTE TICKS))))
)
(DEFINEQ

(SETREMINDER
  (LAMBDA (NAME PERIOD MESSAGE INITIALDELAY EXPIRATION REMINDINGDURATION WINKINGDURATION)
                                                             (* JonL "28-APR-83 21:51")
    (OR NAME (SETQ NAME (GENSYM)))
    (\CHECKTYPE NAME (QUOTE LITATOM))
    (\CHECKTYPE PERIOD (QUOTE \NULL.OR.FIXP))
    (\CHECKTYPE INITIALDELAY (QUOTE \CHARS.OR.FIXP))
    (PROG ((REMINDER (GETDEF NAME (QUOTE REMINDERS)
			     NIL
			     (QUOTE NOERROR)))
	   BOX)
          (if (NULL REMINDER)
	      then                                           (* Big time delay before first "reminding" to allow time
							     for the completion of this function!)
		   (SETQ REMINDER (create PERIODIC.PROMPT.REMINDER
					  REMINDER.TIMEOUTBOX _(SETUPTIMER 16000 NIL (QUOTE SECS)))))
          (replace REMINDER.MESSAGE of REMINDER with (OR MESSAGE NAME))
          (replace REMINDER.DURATION of (PROG1 REMINDER      (* Comment PPLossage))
	     with (OR (FIXP REMINDINGDURATION)
		      DEFAULT.REMINDER.DURATION))
          (replace REMINDER.WINKINGDURATION of (PROG1 REMINDER 
                                                             (* Comment PPLossage))
	     with (OR (FIXP WINKINGDURATION)
		      DEFAULT.REMINDER.WINKINGDURATION))
          (PUTDEF NAME (QUOTE REMINDERS)
		  REMINDER)

          (* This call is made even for "old" reminders, to get the action of MARKASCHANGED * Note also how the PERIOD was 
	  null during this time, so that it didn't reset the timer.)


          (replace REMINDER.PERIOD of REMINDER with PERIOD)
          (SETQ BOX (fetch REMINDER.TIMEOUTBOX of REMINDER))
          (if (OR (STRINGP INITIALDELAY)
		  (NNLITATOM INITIALDELAY))
	      then (SETQ BOX (SETUPTIMER.DATE INITIALDELAY BOX))
	    else (SETQ BOX (SETUPTIMER (OR INITIALDELAY PERIOD 0)
				       BOX
				       (QUOTE SECS))))
          (replace REMINDER.TIMEOUTBOX of REMINDER with BOX)
          (if EXPIRATION
	      then (replace REMINDER.FINALTIME of REMINDER
		      with (if (OR (STRINGP EXPIRATION)
				   (NNLITATOM EXPIRATION))
			       then (SETUPTIMER.DATE EXPIRATION)
			     else (PROG ((NEWBOX (SETUPTIMER 0 NIL (QUOTE SECS))))
				        (RETURN (SETUPTIMER (IPLUS (IMINUS (TIMERSUBTRACT BOX NEWBOX))
								   EXPIRATION)
							    NEWBOX
							    (QUOTE SECS)))))))
          (RETURN NAME))))

(ACTIVEREMINDERNAMES
  (LAMBDA NIL                                                (* JonL "29-NOV-82 16:58")
    (MAPCAR PERIODIC.PROMPT.REMINDERS (FUNCTION CAR))))

(INSPECTREMINDER
  (LAMBDA (NAME)                                             (* JonL "25-FEB-83 19:30")
    (AND (NNLITATOM NAME)
	 (HASDEF NAME (QUOTE REMINDERS))
	 (SELECTQ (SYSTEMTYPE)
		  (D (INSPECT (GETDEF NAME (QUOTE REMINDERS))
			      (QUOTE \SHOWABLE.PROMPT.REMINDER)))
		  ((LAMBDA (DEF)
		      (printout NIL T "Message: " (fetch REMINDER.MESSAGE of DEF)
				T "Period: " (fetch REMINDER.PERIOD of DEF)
				.TAB 20 "Winking: " (fetch REMINDER.WINKINGDURATION of DEF)
				.TAB 40 "Reminding: " (fetch REMINDER.DURATION of DEF)
				T "NextRemindDate: " (REMINDER.NEXTREMINDDATE NAME))
		      (AND (SETQ DEF (REMINDER.EXPIRATIONDATE NAME))
			   (printout NIL T "NextExpiration: " DEF))
		      (TERPRI))
		    (GETDEF NAME (QUOTE REMINDERS)))))))

(REMINDER.NEXTREMINDDATE
  (LAMBDA N                                                  (* JonL " 7-MAR-83 21:30")
    (AND (IGEQ N 1)
	 ((LAMBDA (DEF)
	     (AND (PROG1 DEF                                 (* Comment PPLossage))
		  (if (IEQP N 1)
		      then (fetch REMINDER.NEXTREMINDDATE of DEF)
		    else (replace REMINDER.NEXTREMINDDATE of DEF
			    with (OR (STRINGP (ARG N 2))
				     (GDATE (ARG N 2)))))))
	   (if (type? PERIODIC.PROMPT.REMINDER (ARG N 1))
	       then (ARG N 1)
	     else (GETDEF (ARG N 1)
			  (QUOTE REMINDERS)
			  NIL
			  (QUOTE (NOERROR NOCOPY))))))))

(REMINDER.EXPIRATIONDATE
  (LAMBDA N                                                  (* JonL " 7-MAR-83 21:29")
    (AND (IGEQ N 1)
	 ((LAMBDA (DEF)
	     (AND (PROG1 DEF                                 (* Comment PPLossage))
		  (if (IEQP N 1)
		      then (fetch REMINDER.EXPIRATIONDATE of DEF)
		    else (replace REMINDER.EXPIRATIONDATE of DEF
			    with (OR (STRINGP (ARG N 2))
				     (GDATE (ARG N 2)))))))
	   (if (type? PERIODIC.PROMPT.REMINDER (ARG N 1))
	       then (ARG N 1)
	     else (GETDEF (ARG N 1)
			  (QUOTE REMINDERS)
			  NIL
			  (QUOTE (NOERROR NOCOPY))))))))

(REMINDER.PERIOD
  (LAMBDA N                                                  (* JonL " 7-MAR-83 21:32")
    (AND (IGEQ N 1)
	 ((LAMBDA (DEF)
	     (AND (PROG1 DEF                                 (* Comment PPLossage))
		  (if (IEQP N 1)
		      then (fetch REMINDER.PERIOD of DEF)
		    else ((LAMBDA (N)
			     (OR (IGEQ N 1)
				 (ERRORX (LIST 27 N)))
			     (replace REMINDER.PERIOD of DEF with N))
			   (FIX (ARG N 2))))))
	   (if (type? PERIODIC.PROMPT.REMINDER (ARG N 1))
	       then (ARG N 1)
	     else (GETDEF (ARG N 1)
			  (QUOTE REMINDERS)
			  NIL
			  (QUOTE (NOERROR NOCOPY))))))))
)
(DEFINEQ

(PERIODICALLYCHECKREMINDERS
  (LAMBDA NIL                                                (* JonL "10-SEP-83 16:26")
    (SELECTQ (SYSTEMTYPE)
	     (D (if \PERIOD.SAVEDCARET
		    then                                     (* Safety check for resetting the CARET, in case someone
							     ^D's out of the waiting loops below.)
			 (CARET \PERIOD.SAVEDCARET))
		(SETQ \PERIOD.SAVEDCARET (CARET (QUOTE OFF))))
	     NIL)
    (bind TIMEOUT REMOVALS REMINDER SAVEDP (.5SECS.tics _(LRSH \RCLKSECOND 1)) for X in 
									PERIODIC.PROMPT.REMINDERS
       do
	(if (OR (NOT (FIXP (SETQ TIMEOUT (fetch REMINDER.TIMEOUTBOX of (CADR X)))))
		(AND (SETQ SAVEDP (fetch REMINDER.FINALTIME of REMINDER))
		     (TIMEREXPIRED? SAVEDP (QUOTE SECS))))
	    then                                             (* Must be that this guy is "finished" now, or perhaps 
							     in error.)
		 (SETQ PERIODIC.PROMPT.REMINDERS (REMOVE X PERIODIC.PROMPT.REMINDERS))
	  elseif (TIMEREXPIRED? TIMEOUT (QUOTE SECS))
	    then
	     (GLOBALRESOURCE
	       (\REMINDER.HOLD.TIMER \REMINDER.FLASH.TIMER)
                                                             (* When a reminder's timer has expired, then flash it at
							     the luser.)
	       (SETQ REMINDER (CADR X))
	       (if (NOT (FIXP (SETQ SAVEDP (fetch REMINDER.PERIOD of REMINDER))))
		   then                                      (* After having once done a reminder for which there is 
							     a NIL interval, then shut it off)
			(SETQ PERIODIC.PROMPT.REMINDERS (REMOVE X PERIODIC.PROMPT.REMINDERS))
			(SETQ SAVEDP)
		 else                                        (* Otherwise, set the next reminder time now, just in 
							     case he quits out of this with a ^D)
		      (replace REMINDER.TIMEOUTBOX of REMINDER with (SETUPTIMER SAVEDP TIMEOUT
										(QUOTE SECS))))
	       (during (fetch REMINDER.DURATION of REMINDER) timerUnits (QUOTE SECS) usingTimer
										      
									     \REMINDER.HOLD.TIMER
		  bind NFT OLDKEYLST ADDRSLST KEYMASKLST
		  do
		   (SELECTQ
		     (SYSTEMTYPE)
		     (D (if (NULL NFT)
			    then (DSPRESET PROMPTWINDOW)
				 (SETQ KEYMASKLST
				   (LOADTIMECONSTANT
				     (PROG ((X (ARRAY 7 (QUOTE WORD)
						      (MASK.1'S 0 16)
						      0)))
				           (SETA X 4 0)
				           (SETA X 5 0)
				           (SETA X 6 0)
				           (for I in (LIST (\KEYNAMETONUMBER (QUOTE LEFT))
							   (\KEYNAMETONUMBER (QUOTE MIDDLE))
							   (\KEYNAMETONUMBER (QUOTE RIGHT)))
					      do (SETA X (LRSH I 4)
						       (LOGOR (ELT X (LRSH I 4))
							      (MASK.1'S (IDIFFERENCE 15
										     (IMOD I 16))
									1))))
				           (for I in (LIST (\KEYNAMETONUMBER (QUOTE LSHIFT))
							   (\KEYNAMETONUMBER (QUOTE LOCK))
							   (\KEYNAMETONUMBER (QUOTE RSHIFT))
							   (\KEYNAMETONUMBER (QUOTE CTRL)))
					      do (SETA X (LRSH I 4)
						       (BITCLEAR (ELT X (LRSH I 4))
								 (MASK.1'S (IDIFFERENCE 15
											(IMOD I 16))
									   1))))
				           (RETURN (for I from 0 to 6 collect (LOGXOR (ELT X I)
										      (MASK.1'S
											0 16)))))))
				 (SETQ ADDRSLST (LOADTIMECONSTANT (LIST \EM.KBDAD0 \EM.KBDAD1 
									\EM.KBDAD2 \EM.KBDAD3 
									\EM.UTILIN \EM.KBDAD4 
									\EM.KBDAD5)))
                                                             (* The masks are basically which key positions to 
							     ignore)
				 (SETQ OLDKEYLST (LOADTIMECONSTANT (APPEND ADDRSLST NIL)))
				 (for L on OLDKEYLST as MASK in KEYMASKLST as A in ADDRSLST
				    do (FRPLACA L (LOGOR MASK (\GETBASE A 0))))
				 (SETQ NFT T)))
		     (PROGN (PRIN3 (fetch REMINDER.MESSAGE of REMINDER)
				   PROMPTWINDOW)
			    (TERPRI PROMPTWINDOW)))
		  repeatuntil (OR (during (fetch REMINDER.WINKINGDURATION of REMINDER)
				     timerUnits (QUOTE SECS) usingTimer \REMINDER.FLASH.TIMER
				     do                      (* Wink the message at him in the PROMPTWINDOW at 
							     roughly 1 second intervals)
					(SELECTQ (SYSTEMTYPE)
						 (D (PRIN3 (fetch REMINDER.MESSAGE of REMINDER)
							   PROMPTWINDOW)
						    (TERPRI PROMPTWINDOW)
						    (AND (OR (during .5SECS.tics timerUnits
										  (QUOTE TICKS)
								usingTimer \REMINDER.LITTLE.TIMER
								do (if (\PR.KBDChangedP OLDKEYLST 
											ADDRSLST 
										       KEYMASKLST)
								       then (RETURN T))
								finally (PROGN (DSPRESET PROMPTWINDOW)
									       NIL))
							     (during .5SECS.tics timerUnits
										  (QUOTE TICKS)
								usingTimer \REMINDER.LITTLE.TIMER
								do (if (\PR.KBDChangedP OLDKEYLST 
											ADDRSLST 
										       KEYMASKLST)
								       then (RETURN T))))
							 (RETURN T))
                                                             (* Exits when user depresses a key on the keyboard)
						    )
						 (if (READP T)
						     then (RETURN T)
						   else (PRIN3 (CONSTANT (CHARACTER (CHARCODE ^G))))
							(DISMISS 1000))))
				  (SELECTQ (SYSTEMTYPE)
					   (D (RINGBELLS 2))
					   (PRINTBELLS))))
	       (if SAVEDP
		   then                                      (* Make the next reminder timeout more current.)
			(replace REMINDER.TIMEOUTBOX of REMINDER with (SETUPTIMER SAVEDP TIMEOUT
										  (QUOTE SECS)))))))
    (SELECTQ (SYSTEMTYPE)
	     (D (CARET (PROG1 \PERIOD.SAVEDCARET (SETQ \PERIOD.SAVEDCARET))))
	     NIL)))

(\PUTREMINDER
  (LAMBDA (NAME FILEPKGTYPE DEF)                             (* JonL "28-APR-83 21:09")
    (DECLARE (GLOBALVARS PERIODIC.PROMPT.REMINDERS))
    (if (OR (NULL NAME)
	    (NOT (LITATOM NAME))
	    (NEQ FILEPKGTYPE (QUOTE REMINDERS)))
	then (ERRORX (LIST 27 (if (EQ FILEPKGTYPE (QUOTE REMINDERS))
				  then NAME
				else FILEPKGTYPE))))
    (if (NOT (type? PERIODIC.PROMPT.REMINDER DEF))
	then (ERRORX (LIST 27 DEF)))
    (PROG ((OLD (ASSOC NAME PERIODIC.PROMPT.REMINDERS))
	   (PERIOD (fetch REMINDER.PERIOD of DEF)))
          (MARKASCHANGED (PROG1 NAME                         (* Comment PPLossage))
			 FILEPKGTYPE
			 (if (NULL OLD)
			     then                            (* AHA! A new definiton!)
				  (/SETTOPVAL (QUOTE PERIODIC.PROMPT.REMINDERS)
					      (CONS (LIST NAME DEF)
						    PERIODIC.PROMPT.REMINDERS))
				  (QUOTE DEFINED)
			   elseif (EQUAL (CDDR DEF)
					 (CDDR (CADR OLD)))
			     then                            (* Blaaag! Notice how the CDDR depends upon 
							     PERIODIC.PROMPT.REMINDER being a TYPERECORD so as to 
							     skip checking the REMINDER.TIMEOUTBOX)
				  (RETURN)
			   else (/RPLACA (CDR OLD)
					 DEF)
				(QUOTE CHANGED)))
          (AND (FIXP PERIOD)
	       (replace REMINDER.TIMEOUTBOX of DEF with (SETUPTIMER PERIOD (fetch REMINDER.TIMEOUTBOX
									      of DEF)
								    (QUOTE SECS)))))
    NAME))

(\GETREMINDER
  (LAMBDA (NAME TYPE)                                        (* JonL "21-NOV-82 17:11")
    (CADR (ASSOC NAME PERIODIC.PROMPT.REMINDERS))))

(\DELREMINDER
  (LAMBDA (NAME FILEPKGTYPE)                                 (* JonL "26-FEB-83 12:24")
    (if (OR (NULL NAME)
	    (NOT (LITATOM NAME))
	    (NEQ FILEPKGTYPE (QUOTE REMINDERS)))
	then (ERRORX (LIST 27 (if (EQ FILEPKGTYPE (QUOTE REMINDERS))
				  then NAME
				else FILEPKGTYPE))))
    (PROG ((OLDDEF (ASSOC NAME PERIODIC.PROMPT.REMINDERS)))
          (if OLDDEF
	      then (MARKASCHANGED NAME FILEPKGTYPE (QUOTE DELETED))
		   (/SETTOPVAL (QUOTE PERIODIC.PROMPT.REMINDERS)
			       (REMOVE OLDDEF PERIODIC.PROMPT.REMINDERS))
		   (RETURN T)))))
)
(DECLARE: COPYWHEN (EQ COMPILEMODE (QUOTE D)) 
(DEFINEQ

(\PR.KBDChangedP
  (LAMBDA (ORIGKEYLST ADDRSLST MASKLST)                      (* JonL "25-JUL-83 17:55")
    (DECLARE (GLOBALVARS \EM.KBDAD0))
    (find A in ADDRSLST as WORD in ORIGKEYLST as MASK in MASKLST
       suchthat (NEQ WORD (LOGOR MASK (\GETBASE A 0))))))
)


(RPAQ? \PERIOD.SAVEDCARET NIL)
)

(RPAQ? DEFAULT.REMINDER.DURATION 60)

(RPAQ? DEFAULT.REMINDER.WINKINGDURATION 10)

(RPAQ? PERIODIC.PROMPT.REMINDERS NIL)
(DECLARE: DOEVAL@COMPILE DONTCOPY

(ADDTOVAR GLOBALVARS DEFAULT.REMINDER.DURATION DEFAULT.REMINDER.WINKINGDURATION 
	  PERIODIC.PROMPT.REMINDERS \PERIOD.SAVEDCARET \EM.KBDAD0 DEFAULT.REMINDER.PERIOD)
)
(PUTDEF (QUOTE REMINDERS) (QUOTE FILEPKGCOMS) (QUOTE ((TYPE DESCRIPTION "Periodic PROMTP Reminders" 
							    GETDEF \GETREMINDER PUTDEF \PUTREMINDER 
							    DELDEF \DELREMINDER))))

(ADDTOVAR PROMPTCHARFORMS (PERIODICALLYCHECKREMINDERS))
(DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 

(ADDTOVAR NLAMA )

(ADDTOVAR NLAML )

(ADDTOVAR LAMA REMINDER.PERIOD REMINDER.EXPIRATIONDATE REMINDER.NEXTREMINDDATE)
)
(PUTPROPS PROMPTREMINDERS COPYRIGHT ("Xerox Corporation" 1982 1983))
(DECLARE: DONTCOPY
  (FILEMAP (NIL (6666 12232 (SETREMINDER 6678 . 9202) (ACTIVEREMINDERNAMES 9206 . 9380) (INSPECTREMINDER 9384 . 10215) (
REMINDER.NEXTREMINDDATE 10219 . 10881) (REMINDER.EXPIRATIONDATE 10885 . 11547) (REMINDER.PERIOD 11551 . 12229)) (12234 20417 (
PERIODICALLYCHECKREMINDERS 12246 . 18094) (\PUTREMINDER 18098 . 19632) (\GETREMINDER 19636 . 19799) (\DELREMINDER 19803 . 20414)) (
20467 20791 (\PR.KBDChangedP 20479 . 20788)))))
STOP
  