                    INTERLISP - EMACS INTERFACE

	The INTERLISP editor provides a number of very powerful
list structure oriented editing primitives, however, for a large number
of editing applications it is less than ideal, because it is designed
to be useable on hard copy terminals.  Often, it is more desireable to
use a display oriented text editor.  The file <LISPUSERS>EMACS.COM
is a package which allows a user to run EMACS in an inferior fork and
edit s-expressions using EMACS.

	The idea, and much of the code, for this interface was inspired
by a LISP-EMACS interface written by Bob Boyer at SRI.  I feel this
package represents an improvement in the original Boyer package because
it is more naturally integrated with the rest of the LISP system, e.g.
DWIM, the file package, EDITDATE, etc.  It also makes more efficient
use of memory, and is much simpler, since it relies on built in LISP
functions instead of trying to do things itself.

	The package is activated by loading EMACS.COM.  When the file
is loaded, the function StartEmacs is called.  This function starts
up the EMACS fork, and sets up three scratch files required by the
interface.  StartEmacs also advises the editor, EDITL, so that it
knows about the interface.  From this point on EMACS will be invoked
in place of the INTERLISP editor whenever the list of edit commands
is NIL, i.e. the user is going to do an interactive edit.

	For example, if the user types (EDITF FOO), then the EXPR definition
of function FOO will be passed to EMACS for editing.  When the user exits
from EMACS, if the function has been changed, then the definition will
be undoably modified, the file package info updated, and the EDITDATE
stamp updated.

	If the user has only one edit command "T", then the LISP
editor will be called instead of EMACS.  The LISP editor is always
invoked when COMS is a list of edit commands.  Thus, the LISP editor
is always available to the user for editing, and for modifying functions
with BREAKIN and the USE command in LISPX, but EMACS becomes the
default editor.

	The file EMACS.DRIBBLE is created, where everything written on
the terminal is recorded.  When EMACS returns, the last few lines 
displayed on the terminal before entering EMACS will be re-displayed.
The default number of lines to be displayed is determined by the
screen size and data rate of your terminal.  The number of lines to
be displayed is the value of REFRESH.LINE.COUNT, which may be adjusted
to taste.

	When EMACS runs in LISP mode, whenever the user types a right
parenthesis, the cursor is moved to the matching left parenthesis for
a period of five seconds, or until the next character is typed, whichever
comes first.  This makes it very easy to maintain parenthesis balance.
Unfortunately, EMACS does not know about the INTERLISP left and right
bracket meta-parentheses, so when the function is written out to
the EMACS scratch file, #RPARS is set to NIL to avoid the generation
of any brackets.  There are also several other LISP-oriented EMACS
commands.  See the EMACS documentation under LISP mode for details.

	The user can hack as many buffers as he or she wants, however,
LISP always expects the s-expression being edited to be in the Main buffer.
Whatever editing operations are done in other buffers are completely ignored
by LISP.

	When the user wants to exit from EMACS and return to LISP,
he or she must do this in a very special way.  If you try to exit EMACS
in the wrong way, LISP will complain, and re-invoke EMACS to allow the user
to use one of the proper exit commands.  The proper exit commands are
all ^T commands, and they pass a return code to LISP, which determine
what action is to be taken after returning.  The following return codes
are currently implemented:

C-T ^T  Whatever was originally on ^T

C-T A	Abort edit - The original s-expression is returned as the value
	of EDITL

C-T C	Clispify - the edited s-expression is clispified, and the clispified
        version is pretty printed and EMACS is reentered.

C-T D   Dwimify - similar to Clispify

C-T E   Eval - Evaluates the S-epression after point, and prints the
	result in W2

C-T ^E	Eval - Runs ^R Beginning of DEFUN and evaluates the S-expression
	after the point, and returns the value.  This function is intended
	to be used by MACLISP hackers to simulate MACLISP LEDIT. A LISPXMACRO
	called LEDIT is available for invoking the editor in this mode.

C-T F   Apply Function - Prompts the user to type the name of a function,
	and the function is applied to the QUOTE of the S-exprresion after
	the point.  The result of the evaluation is printed in W2.
	^T F EVAL has the same effect as ^T E.  An example of a winning
	use of this feature would be to see the macro expansion of
	an s-expression in one's function.  Just type ^T F EXPANDMACRO.

C-T G   Get S-expression - Returns to LISP, and reads an s-expression which
	is evaluated and the value is inserted into window W2, and
	returns to EMACS.

C-T H	Get function - Returns to LISP and reads the name of a function,
	the definition is obtained, and printed in W2 upon return to EMACS.

C-T I	Insert S-expression - Prompts for the name of a variable. Return
	to LISP to evaluate the variable, and the value is inserted
	before the point.

C-T M   Multi Return - Returns multiple s-expressions by making a list
	of all s-expressions on the file, and then returning that list.
	This is intended to be used by the (EnterEmacs) call to EMACS.

C-T P   Pretty Print - the edited s-expression is retrieved, pretty printed
        and EMACS is reentered.

C-T R	Replace S-expression - Similar to insert, except the s-expression after
	the point is deleted.

C-T U   Undo - the original s-expression is retrieved and passed back to
        EMACS, which has the effect of undoing all the changes made since
        the last time EMACS was entered.

C-T X	Extract S-expression - Simulates the INTERLISP XTR command.
	It replaces the s expression after mark with an embedded s-expression
	after point.

C-T Z	Exit normally and return the undoably modified s-expression as the
	value of EDITL.

	The EMACS interface redefines the break macros BTV, BTV+, BTV*
and BTV! so they do their thing via EMACS, i.e. the backtrace is given
to EMACS and the user can examine it with the editor.

	If for some reason the user wishes to restore the editor to
its virgin state after starting EMACS, the function FlushEmacs does
this.  The proper stuff is added to AFTERSYSOUTFORMS so the interface
will "survive" sysouts.

	There is a function called (EnterEmacs), which allows the specification
of multiple s-expressions to be evaluated, somewhat like an EMACS based
TYPE-AHEAD feature.  The user should exit from the editor with ^T M, which
will cause a list of all s-expressions in the file to be LISPXEVALed, and
hence undoably executed. (EnterEmacs) returns a list of the expressions
evaluated.  ^T A returns NIL, and ^T Z returns a list consisting of the
first s-expression, which is evaluated.

	It is also possible to hack TECO from LISP.  All that is necessary
is to write the TECO code you want executed on the file EMACS.TEMP.
The file is already open, and the full name is the value of the variable
emacsTempFile.  Then call (Down T) which will cause EMACS to read the
TECO code and execute it.  For example, to cause EMACS to load the library
macros on file FOOLIB, one could execute the following code:

(SETFILEPTR emacsTempFile 0)
(printout emacsTempFile "M(M.MLoad Lib$)FOOLIB$FSEXIT$")
(Down T)

What actually happens here is that the system assumes that all text between
0 and th current value of the file pointer on EMACS.TEMP consists of TECO
code.  This much text is read in and macroed.  The EMACS.TEMP file is
left open, so if the TECO code read contains something like an FY, text
after the teco code is read into the buffer.  Thus, you can print some
TECO code followed by some text to be edited, and the TECO code can provide
special instructions for what to do with the text.

Note: if you want to do some interactive editing, your TECO code should
include FS TTYINI$-1FS PJATY$ in it somewhere to initialize and
re-draw the screen.

IMPORTANT DIFFERENCES BETWEEN EMACS AND THE LISP EDITOR

	The only real "incompatable" difference between using EMACS
to edit s-expressions and using the LISP editor is that EMACS does not
preserve the original unchanged list structure, except in certain cases.
For example, if you edit the s-expression (A (B C) (D E) F) with
EMACS and change the D to an X, giving (A (B C) (X E) F) the structure
(B C) in the new expression will NOT be EQ to the structure (B C) in the
old expression, however with the LISP editor, all unchanged subexpressions
will be EQ.  The EMACS interface will preserve the EQuality of the
top level expression, but not any sub-expressions.  Also, the interface
checks whether the new expression is EQUAL to the old expression, and if so,
then the original s-expression is returned unchanged.  In general, If you need
structure preservation, you should use the LISP editor.

CROCKS AND CRUFT

	Here's some info that will enable users to get themselves out of
jams that occasionally arise, due to bugs that haven't been fixed, and some
inadequacies in the overall design that have yet to be re-programed.

Typing ^C to the editor -

	This gets you back to the exec, but continuing later is a bit of a
problem.  If you continue once, you get right back to the exec.  Don't
panic...just type continue again.  You should get back into EMACS now in
a recursive ^R.  You can just continue in this state, and everything should
work, but if you like the security of knowing everything is back in its
original state, you should run the extended command "Abort Recursive Edit"
before returning to LISP.  If things are hopelessly confused, you can
always type "start" to return to the top level of LISP.  You should then
(FlushEmacs) and (StartEmacs) before using the editor again.

Exiting EMACS with unbalanced right parentheses - 

	Yes this is a crock.  You get an error break with the message
"End of EMACS Buffer" if you have insufficient right parentheses or
if your " marks don't pair up.  If you don't want to lose your editing,
you have to go through the following baroque hack:

Run the function (Down)  This gets you back to EMACS so you can fix up
your parentheses.  Exit normally with ^T Z.  When you return to LISP,
you will be back in the break.  Then run the function (EmacsReturn) which
should return as its value the s-expression in the EMACS buffer.
You then have to SETQ or PUTD to get the right thing done with the
s-expression.

	Please send any comments, suggestions, and bug reports to CSD.DEA@SCORE
   