TPSTK	- is a replacement for BAKTRACE, BT BTV and so on, plus some
	other breakpoint utilities.

Summary:

   TPSTK	stack printer with fancy options.  Similar to BTV BTV! etc.
   TPQ		stack name printer with options. Similar to BT
   BREAKEXIT	sets exit breakpoints on function already called.
   SPLICEXIT	splices computation after the exit of some existing frame.
   COUNTCALLERS	like BRKDWN, but tabulates number of calls from each caller

To load:

	Load the compiled version of TPSTK, which will load PRINTOPT

	Optionally set TPSTKDEFAULT to your preferred default switches.

---------------------------------------------------

TPSTK and TPQ

	  TPSTK takes a list of options describing the kind of
	a stack trace you want to see.  The list is remembered
	across calls, so once you have set your current preferred
	format, it is remembered. 

	  TPSTK abbreviates lists with -- and & to limit printout
	to one line per item, a great improvement in cases where the
	stack contains arbirtrarily long or convoluted list structures.


	The LISPXMACRO "TPSTK" accepts a list of options from the following
	list.  With no options, it uses the previous option list or the 
	default.

       T	means append TPSTKDEFAULT options, plus rest of options list
       +	means append TPSTKPREVIOUS options to the rest of the list
       -	means remove the following options from the list
       NAMES	means show names of functions only
       SHORT	type arg names only. Otherwise type arg names and values.
       REAL	type REALFRAMEP frames only.
       INTERP	is REALFRAMEP T frames, which includes interpreted
		special forms
       DUMMY	means show dummy frames only
       BLIPS	means show blip fields
       ACTUAL	means show local variables inside { }
       FROM XX	shows frames starting at frame XX above LASTPOS. XX can be a 
                frame name or a number of frames
       TO XX	stops at frame XX above the first shown. XX can be a frame 
		name or a number of frames. The FROM and TO specs are not
		remembered between calls to TPSTK
       FN	causes the printing to be formatted as function calls


TPQ is like TPSTK, but always adds the option NAMES.


EXAMPLE:

;;
;; this call shows the contents of the stack, including only the frames
;; corresponding to real function calls.  Argument names which are localvars
;; are printed in and extra ( )
;;
236:TPSTK REAL
{REAL}
TPSTK        CEXPR    1 OPTIONS       (REAL)
EVAL         SUBR     2 *arg1*        (TPSTK LISPXLINE)
                        *arg2*        :
LISPX        CEXPR    5 (LISPXX)      TPSTK
                        LISPXID       :
                        (LISPXXMACROS)
                                      ((TPQ &) (SP &) (SD &) (MM &) --)
                        (LISPXXUSERFN)
                                      NIL
                        (LISPXFLG)    NIL
ERRORSET     CEXPR    3 (ERRORSET.U)  (DUMMY.FOR.ERRORSET)
                        (ERRORSET.V)  T
                        (ERRORSET.W)  NIL
;;
;; this modifies the previous call to show only the argument
;; names, no argument values.
;;
237:TPSTK + SHORT
{SHORT REAL}
TPSTK        CEXPR    1 (OPTIONS)
EVAL         SUBR     2 (*arg1* *arg2*)
LISPX        CEXPR    5 ((LISPXX) LISPXID (LISPXXMACROS) (LISPXXUSERFN) --)
ERRORSET     CEXPR    3 ((ERRORSET.U) (ERRORSET.V) (ERRORSET.W))
BREAK1A      CEXPR    1 (NBREAKS)
BREAK1       CFEXPR   5 (BRKEXP BRKWHEN BRKFN BRKCOMS BRKTYPE)
INTERRUPT    CEXPR    3 (INTFN INTARGS (INTYPE))
INTERRUPTED  CEXPR    2 (CH CALLER)
APPLY*       SUBR*    4 (*arg1* *arg2* *arg3* *arg4*)

;;
;; TPQ supresses even the arg names, leaving just the function names.
;;
238:TPQ
{NAMES SHORT REAL}
TPSTK  TPQ  EVAL  LISPX  ERRORSET  BREAK1A  BREAK1  INTERRUPT  INTERRUPTED  
APPLY*  0Getty  APPLY*  READ  LISPXREAD  ERRORSET  EVALQT  T  


-----------------------------------------------

BREAKEXIT 
	Is both a function and a BREAKMACRO.  As a BREAKMACRO, you can
	specify the name of the frame to be broken, or else the current
	(that is, LASTPOS) frame is used.  As a function BREAKEXIT can be
	given any valid frame specifier as its argument.

	BREAKEXIT sets an exit breakpoint after some existing frame.  For 
	instance, in the example above, if you want to look around when 
	READ exits:

	:BREAKEXIT READ
	:OK

	when READ exits, a breakpoint is entered similar to what would
	have happened if you had broken READ before calling.

	Exit Breakpoint at READ
       :


------------------------------------------------

(SPLICEXIT WHERE FN)

	SPLICEXIT splices an arbitrary computation in afterthe exit
	of some existing frame.

	WHERE is any valid stack locator

	if FN is a non-list or a list whose CAR is LAMBDA, it is APPLY*'d 
	      with no arguments. Otherwise, (APPLY (CAR FN) (CDR FN)) is done.
	if ALINKFLG is non-NIL, the ALINK of the spliced computation is 
		      set as well. The most useful cases are
			 T, which essentially specifies no access environment
			same as WHERE, which  specifies ALINK = CLINK. A
			NIL  leaves the ALINK chain of the spliced 
			     computation unchanged, which preserves the
			     access environment of the splicer until the
			     splice has been discarded.

	SPLICEXIT normally returns the value of the interrupted computation,
	but binds !VALUE so it can be changed.

	For instance, in the above example, if you wanted to let the 
	READ complete but force it to return NIL, you could do.

	:(SPLICEXIT 'READ '(SETQ !VALUE NIL))


------------------------------------------------------


(COUNTCALLERS FNS1 FNS2 WHEN OPTIONS)

COUNTCALLERS works like BRKDWN, but generates dynamic counts of who 
calls particular functions.

      FNS1	can be a function name or list of functions
      FNS2	can be a function name or a list of functions.
		If FNS2 is non-nil countcallers set up to count
		ANY-IN-FNS1 called by ANY-IN-FNS2
      WHEN	is a break condition similar to what BREAK accepts
      OPTIONS	are controls on the accounting process, which can be an atom 
                or a list of atoms. Current options are:

                ANY to record any stack frame. Otherwise only REALFRAMEP 
                      frames are recorded.
                 a NUMBER in which case N callers are recorded rather than 
                    just the immediate caller.
                NOINIT supresses the reinitialization of the data collected


(COUNTCALLERSPRINT OPTIONS)

COUNTCALLERSPRINT tabulates and prints the results gathered by 
	COUNTCALLERS.

	OPTIONS can be an atom or a list of atoms. Current options 
	are:
	   RETURN causes the data structure to be returned rather than printed
         a NUMBER truncates the structure to its first N items
           MOST changes the sorting from alphabetical to by most calls

(COUNTCALLERSINIT A)

COUNTCALLERSINIT reinitializes the results COUNTCALLERS is gathering. 
       Normally, COUNTCALLERSINIT is done by every call to COUNTCALLERS

example:

26_COUNTCALLERS(TPSTK NIL NIL 4]
((TPSTK))
27_TPQ
{NAMES}
TPSTK  *PROG*LAM  TPQ  EVAL  *PROG*LAM  *PROG*LAM  LISPX  ERRORSET  EVALQT  T  
28_TPSTK
{SHORT REAL}
TPSTK        EXPR     1 (OPTIONS)
EVAL         SUBR     2 (*arg1* *arg2*)
LISPX        CEXPR    5 ((LISPXX) LISPXID (LISPXXMACROS) (LISPXXUSERFN) (
LISPXFLG))
ERRORSET     CEXPR    3 (*arg1* *arg2* *arg3*)
EVALQT       CEXPR    1 (LISPXID)
T            NIL      0

29_COUNTCALLERSPRINT]
[(TPSTK 2 (EVAL 1 (LISPX 1))
        (TPQ 1 (EVAL 1]
NIL
