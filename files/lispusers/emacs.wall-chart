C-T ^T  Whatever was originally on ^T

C-T A	Abort edit - The original s-expression is returned as the value
	of EDITL

C-T C	Clispify - the edited s-expression is clispified, and the clispified
        version is pretty printed and EMACS is reentered.

C-T D   Dwimify - similar to Clispify

C-T E   Eval - Evaluates the S-epression after point, and prints the
	result in W2

C-T ^E	Eval - Runs ^R Beginning of DEFUN and evaluates the S-expression
	after the point, and returns the value.  This function is intended
	to be used by MACLISP hackers to simulate MACLISP LEDIT. A LISPXMACRO
	called LEDIT is available for invoking the editor in this mode.

C-T F   Apply Function - Prompts the user to type the name of a function,
	and the function is applied to the QUOTE of the S-exprresion after
	the point.  The result of the evaluation is printed in W2.
	^T F EVAL has the same effect as ^T E.  An example of a winning
	use of this feature would be to see the macro expansion of
	an s-expression in one's function.  Just type ^T F EXPANDMACRO.

C-T G   Get S-expression - Returns to LISP, and reads an s-expression which
	is evaluated and the value is inserted into window W2, and
	returns to EMACS.

C-T H	Get function - Returns to LISP and reads the name of a function,
	the definition is obtained, and printed in W2 upon return to EMACS.

C-T I	Insert S-expression - Prompts for the name of a variable. Return
	to LISP to evaluate the variable, and the value is inserted
	before the point.

C-T M   Multi Return - Returns multiple s-expressions by making a list
	of all s-expressions on the file, and then returning that list.
	This is intended to be used by the (EnterEmacs) call to EMACS.

C-T P   Pretty Print - the edited s-expression is retrieved, pretty printed
        and EMACS is reentered.

C-T R	Replace S-expression - Similar to insert, except the s-expression after
	the point is deleted.

C-T U   Undo - the original s-expression is retrieved and passed back to
        EMACS, which has the effect of undoing all the changes made since
        the last time EMACS was entered.

C-T X	Extract S-expression - Simulates the INTERLISP XTR command.
	It replaces the s expression after mark with an embedded s-expression
	after point.

C-T Z	Exit normally and return the undoably modified s-expression as the
	value of EDITL.
	There is a function called (EnterEmacs), which allows the specification
of multiple s-expressions to be evaluated, somewhat like an EMACS based
TYPE-AHEAD feature.  The user should exit from the editor with ^T M, which
will cause a list of all s-expressions in the file to be LISPXEVALed, and
hence undoably executed. (EnterEmacs) returns a list of the expressions
evaluated.  ^T A returns NIL, and ^T Z returns a list consisting of the
first s-expression, which is evaluated.


Typing ^C to the editor -
	This gets you back to the exec, but continuing later is a bit of a
problem.  If you continue once, you get right back to the exec.  Don't
panic...just type continue again.  You should get back into EMACS now in
a recursive ^R.  You can just continue in this state, and everything should
work, but if you like the security of knowing everything is back in its
original state, you should run the extended command "Abort Recursive Edit"
before returning to LISP.  If things are hopelessly confused, you can
always type "start" to return to the top level of LISP.  You should then
(FlushEmacs) and (StartEmacs) before using the editor again.


Exiting EMACS with unbalanced right parentheses - 
	Yes this is a crock.  You get an error break with the message
"End of EMACS Buffer" if you have insufficient right parentheses or
if your " marks don't pair up.  If you don't want to lose your editing,
you have to go through the following baroque hack:
	Run the function (Down)  This gets you back to EMACS so you can fix up
your parentheses.  Exit normally with ^T Z.  When you return to LISP,
you will be back in the break.  Then run the function (EmacsReturn) which
should return as its value the s-expression in the EMACS buffer.
You then have to SETQ or PUTD to get the right thing done with the
s-expression.
